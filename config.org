#+TITLE: GNU Emacs Config
#+AUTHOR: Karna
#+auto_tangle: t
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:3

* TABLE OF CONTENTS :toc:
- [[#package-manager][PACKAGE MANAGER]]
- [[#startup-changes][STARTUP CHANGES]]
  - [[#major-hooks][MAJOR HOOKS]]
  - [[#ui-tweaks][UI TWEAKS]]
  - [[#directory-settings][DIRECTORY SETTINGS]]
  - [[#browser-settings][BROWSER SETTINGS]]
  - [[#recentf][RECENTF]]
  - [[#async][ASYNC]]
  - [[#backup-settings][BACKUP SETTINGS]]
  - [[#garbage-collection][GARBAGE COLLECTION]]
  - [[#native-compile][NATIVE COMPILE]]
  - [[#byte-compilation][BYTE COMPILATION]]
- [[#load-evil-mode][LOAD EVIL MODE]]
  - [[#which-key][WHICH KEY]]
- [[#ui-appearance][UI APPEARANCE]]
  - [[#themes][THEMES]]
  - [[#fonts][FONTS]]
  - [[#all-the-icons][ALL THE ICONS]]
- [[#dashboard][DASHBOARD]]
  - [[#modeline][MODELINE]]
  - [[#diminish][DIMINISH]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
  - [[#drag-stuff][DRAG-STUFF]]
  - [[#ediff][EDIFF]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#some-extra-stuff][SOME EXTRA STUFF]]
  - [[#calc][CALC]]
- [[#startup-packages][STARTUP PACKAGES]]
  - [[#beacon-mode][BEACON MODE]]
  - [[#projectile][PROJECTILE]]
  - [[#perspective][PERSPECTIVE]]
- [[#minibuffer-vertico-consult-orderless-marginalia--embark][MINIBUFFER (VERTICO, CONSULT, ORDERLESS MARGINALIA & EMBARK)]]
  - [[#vertico-minimal-and-fast-vertical-completion-ui][Vertico (Minimal and Fast Vertical Completion UI)]]
  - [[#marginalia-rich-annotations-for-minibuffer-completions][Marginalia (Rich Annotations for Minibuffer Completions)]]
  - [[#consult-better-searching-and-buffer-navigation][Consult (Better Searching and Buffer Navigation)]]
  - [[#orderless-smart-matching-for-completions][Orderless (Smart Matching for Completions)]]
  - [[#embark-perform-actions-on-completion-candidates][Embark (Perform Actions on Completion Candidates)]]
  - [[#archives][ARCHIVES]]
- [[#buffer-completion-system-corfu--cape--tabnine][BUFFER COMPLETION SYSTEM (CORFU / CAPE & TABNINE)]]
  - [[#corfu][CORFU]]
  - [[#cape][CAPE]]
  - [[#tabnine-ai-completion][TABNINE AI Completion]]
  - [[#archives-1][ARCHIVES]]
- [[#productivity-stuff][PRODUCTIVITY STUFF]]
  - [[#gptel][GPTEL]]
  - [[#ellama][ELLAMA]]
  - [[#undo-fu][UNDO FU]]
  - [[#wakatime][WAKATIME]]
- [[#file-manager-and-buffers-setup][FILE MANAGER AND BUFFERS SETUP]]
  - [[#treemacs][TREEMACS]]
  - [[#dired][DIRED]]
  - [[#peep-dired][PEEP DIRED]]
  - [[#sudo-edit][SUDO EDIT]]
- [[#programming-modes][PROGRAMMING MODES]]
  - [[#breadcrumb][BREADCRUMB]]
  - [[#jarchive][JARCHIVE]]
  - [[#flycheck][FLYCHECK]]
  - [[#treesitter-sources][TREESITTER SOURCES]]
  - [[#format-all][FORMAT ALL]]
  - [[#eglot][EGLOT]]
  - [[#highlight-indentation-guides][HIGHLIGHT INDENTATION GUIDES]]
  - [[#python-setup][PYTHON SETUP]]
- [[#latex-setup][LATEX SETUP]]
  - [[#pdf-tools][PDF TOOLS]]
  - [[#epub-reader][EPUB READER]]
  - [[#latex-previw-setup--settings][LATEX PREVIW SETUP & SETTINGS]]
  - [[#reftex][REFTEX]]
  - [[#preview-zathura][PREVIEW (ZATHURA)]]
  - [[#citar][CITAR]]
  - [[#auctex][AUCTEX]]
  - [[#archives-2][ARCHIVES]]
- [[#markdown][MARKDOWN]]
  - [[#markdown-setup][MARKDOWN SETUP]]
  - [[#ox-hugo][OX-HUGO]]
  - [[#markdown-preview-mode][MARKDOWN PREVIEW MODE]]
  - [[#archives-3][ARCHIVES]]
  - [[#impatient-mode][IMPATIENT MODE]]
- [[#org-mode][ORG MODE]]
  - [[#settings][SETTINGS]]
  - [[#org-remarks][ORG REMARKS]]
  - [[#highlight-todo][HIGHLIGHT TODO]]
  - [[#org-tempo][Org-Tempo]]
  - [[#center-org-mode][CENTER ORG MODE]]
  - [[#org-auto-tangle][ORG AUTO TANGLE]]
  - [[#org-mermaid][ORG MERMAID]]
  - [[#org-eval][ORG EVAL]]
  - [[#org-definitions][ORG DEFINITIONS]]
  - [[#agenda][AGENDA]]
  - [[#org-roam--journal-configuration][ORG ROAM & JOURNAL CONFIGURATION]]
  - [[#org-latex-preview-and-citation-configuration][Org LaTeX Preview and Citation Configuration]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][ESHELL]]
  - [[#vterm][VTERM]]
  - [[#vterm-toggle][VTERM TOGGLE]]
- [[#yasnippet][YASNIPPET]]
- [[#calendar][CALENDAR]]
- [[#archives-4][ARCHIVES]]
  - [[#neotree][NEOTREE]]
  - [[#centaur-tabs][CENTAUR TABS]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]

* PACKAGE MANAGER
  I use elpaca as my package manager.

#+BEGIN_SRC emacs-lisp
;;; $EMACSDIR/config.el -*- lexical-binding: t; -*-

(add-to-list 'load-path "~/.emacs.d/lisp/") ; add scripts dir to load path
(require 'elpaca-setup)  ;; The Elpaca Package Manager
(require 'buffer-move)   ;; Buffer-move for better window management
(require 'eshell-prompt) ;; A fancy prompt for eshell


#+END_SRC

* STARTUP CHANGES

** MAJOR HOOKS
Some commands should execute at startup since they will add some functionality to the system.

#+BEGIN_SRC emacs-lisp
;;; STARTUP HOOKS

(add-hook 'after-init-hook #'global-auto-revert-mode) ;; Auto-revert in Emacs is a feature that automatically updates the contents of a buffer to reflect changes made to the underlying file on disk.

(add-hook 'after-init-hook #'recentf-mode) ;; recentf is an Emacs package that maintains a list of recently  accessed files, making it easier to reopen files you have worked on recently.

(add-hook 'after-init-hook #'savehist-mode) ;; savehist is an Emacs feature that preserves the minibuffer history between sessions.

(add-hook 'after-init-hook #'save-place-mode) ;; save-place is an Emacs package that allows you to remember the position of the cursor when opening a file.


#+END_SRC

** UI TWEAKS
  Contains some UI tweaks such as menubars, scrollbars etc..,

#+BEGIN_SRC emacs-lisp
;;; UI TWEAKINGS

(use-package emacs
  :ensure nil
  :demand t
  :custom
  ;; Basic UI & Behavior
  (inhibit-startup-screen t)
  (user-full-name "Karna")
  (frame-inhibit-implied-resize t)
  (frame-resize-pixelwise t)

  ;; Auto-Reverting & Encoding
  (locale-coding-system 'utf-8)
  (ring-bell-function 'ignore)
  (display-time-default-load-average nil)

  ;; Miscellaneous Settings
  (long-line-threshold 100000)
  (use-file-dialog nil)
  (use-dialog-box nil)
  (pop-up-windows nil)
  (auto-save-interval 2400)
  (auto-save-timeout 300)
  (history-length 1000)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t)
  (use-short-answers t)

  :hook
  ;; Enable whitespace-mode for programming buffers
  ;; (prog-mode . whitespace-mode)
  ;; Clean up whitespace before saving any buffer
  (before-save . whitespace-cleanup)
  ;; For comint buffers, disable query on exit for the associated process
  (comint-exec . (lambda ()
		   (set-process-query-on-exit-flag
		    (get-buffer-process (current-buffer)) nil)))

  :config
  ;;----------------------------------------------------------------------------
  ;; Basic UI & Behavior
  ;;----------------------------------------------------------------------------
  (delete-selection-mode 1)           ;; Allow deletion of selected text
  (electric-indent-mode -1)           ;; Disable auto-indenting
  (electric-pair-mode 1)              ;; Automatically insert matching parens
  (global-display-line-numbers-mode 1) ;; Enable line numbers globally
  (global-visual-line-mode 1)         ;; Enable visual line wrapping
  (menu-bar-mode -1)                  ;; Disable the menu bar
  (scroll-bar-mode -1)                ;; Disable the scroll bar
  (column-number-mode t)              ;; Show column number in mode line
  (size-indication-mode t)            ;; Show file size in mode line
  (fringe-mode -1)                    ;; Remove UI fringes
  (tool-bar-mode -1)                  ;; Disable the tool bar
  (global-hl-line-mode 1)
  (setq init-start-time (current-time))

  ;;----------------------------------------------------------------------------
  ;; Auto-Reverting & Encoding
  ;;----------------------------------------------------------------------------
  (global-auto-revert-mode t)         ;; Auto-refresh buffers when files change
  (setq global-auto-revert-non-file-buffers t)

  ;; Call these functions so that terminal/keyboard/selection use UTF-8
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;;----------------------------------------------------------------------------
  ;; Appearance Tweaks
  ;;----------------------------------------------------------------------------
  (add-to-list 'default-frame-alist '(alpha-background . 100)) ;; Set frame transparency
  (global-prettify-symbols-mode 1)      ;; Display certain keywords as symbols

  ;;----------------------------------------------------------------------------
  ;; Miscellaneous Settings
  ;;----------------------------------------------------------------------------
  (defalias 'yes-or-no-p 'y-or-n-p)      ;; Use y/n instead of yes/no prompts
  (pixel-scroll-precision-mode 1)       ;; Enable precise pixel scrolling

  ;; History & Minibuffer
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'global-mark-ring)

  ;;----------------------------------------------------------------------------
  ;; Whitespace & Escape Key Behavior
  ;;----------------------------------------------------------------------------
  (global-set-key [escape] 'keyboard-escape-quit))

;; --- Speed benchmarking -----------------------------------------------------
(let ((init-time (float-time (time-subtract (current-time) init-start-time)))
      (total-time (string-to-number (emacs-init-time "%f"))))
  (message (concat
    (propertize "Startup time: " 'face 'bold)
    (format "%.2fs " init-time)
    (propertize (format "(+ %.2fs system time)"
			(- total-time init-time)) 'face 'shadow))))


#+END_SRC

** DIRECTORY SETTINGS
Emacs always saves everything in $EMACSDIR itself which is very annoying to push all the unnecessary files into git. (For example recentfiles cache, etc..,).

#+BEGIN_SRC emacs-lisp
;;; CUSTOM DIRECTORIES FOR CACHE FILES

(defun dir-concat (dir file)
  "join path DIR with filename FILE correctly"
  (concat (file-name-as-directory dir) file))

(defvar user-cache-directory "~/.cache/emacs/"
  "Location where files created by emacs are placed.") ;; Creating an emacs directory in ~/.cache for all the files that are created by emacs

(setq save-place-file (dir-concat user-cache-directory "places")) ;; Saving the place history in custom directory.
(setq transient-history-file (dir-concat user-cache-directory "transient-history.el")) ;; Saving transient-history file in ~/.cache/emacs/

(setq bookmark-default-file (dir-concat user-emacs-directory ".cache/bookmarks")) ;; Saving bookmarks in custom directory which is helped to display in emacs dashboard.

(setq auto-save-list-file-prefix (dir-concat user-cache-directory "auto-save-list/.saves-"))

(setq savehist-file (dir-concat user-cache-directory "savehist"))

(setq tramp-persistency-file-name (dir-concat user-cache-directory "tramp"))

(setq lsp-session-file (dir-concat user-cache-directory "lsp-session"))

(setq dap-breakpoints-file (dir-concat user-cache-directory "dap-breakpoints"))

(setq projectile-known-projects-file (dir-concat user-emacs-directory ".cache/projectile-bookmarks.eld"))

(setq eshell-directory-name (dir-concat user-cache-directory "eshell"))
(setq eshell-history-file-name (dir-concat user-cache-directory "eshell-history"))
(setq eshell-last-dir-ring-file-name (dir-concat user-cache-directory "eshell-last-dir-ring"))

(setq undo-fu-session-directory
	(dir-concat user-cache-directory "undo-fu-session/"))

(setq persp-state-default-file (dir-concat user-emacs-directory ".cache/sessions"))

#+END_SRC

** BROWSER SETTINGS
   Changing default browsers

#+BEGIN_SRC emacs-lisp
;;; BROWSER SETTINGS

;; Set the default browser function and program
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "zen-browser")
(setq browse-url-default-program "zen-browser")

;; (Optional) If you're using Org mode and want to specify a browser for HTML export:
(setq org-html-htmlize-browser "zen-browser")

;; Configure file associations for Org mode
(setq org-file-apps
      '(("auto-mode" . emacs)
	("\\.mm\\'" . default)
	("\\.x?html?\\'" . "zen-browser %s")
	("\\.pdf\\'" . "~/.local/bin/zathura %s")))



#+END_SRC

** RECENTF
Recentf mode is used by emacs to save recent files for faster access and also can be used in the emacs dashboard. We can also ignore some files or directories like below.

#+BEGIN_SRC emacs-lisp
;;; RECENTF SETTINGS

(require 'recentf)

;; Configure recentf settings
(setq recentf-save-file (dir-concat user-cache-directory "recentf")
      recentf-max-saved-items 200
      recentf-auto-cleanup 180)

;; Exclude specific files from recentf tracking
(setq recentf-exclude '("~/.cache/emacs/recentf"
			"~/.cache/emacs/*.md"
			"~/.cache/emacs/bookmarks"
			"/mnt/Karna/Git/Project-K/Org/Tasks.org"
			"~/.cache/emacs/treemacs-persist"))

;; Enable recentf mode
(recentf-mode 1)


#+END_SRC

** ASYNC
[[https://github.com/jwiegley/emacs-async][Async]] let us use asynchronous processes whereever possible, pretty useful.

#+BEGIN_SRC emacs-lisp
;;; ASYNCHRONOUS PROCESS

(use-package async
  :ensure t
  :defer t
  :init (dired-async-mode 1))


#+END_SRC

** BACKUP SETTINGS
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+BEGIN_SRC emacs-lisp
;;; BACKUP SETTINGS

(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ;; Default to Trash folder

;; Else you can also create a custom backup directory in ~/.cache/emacs and save the files versions wise

;;(setq backup-directory-alist
;;      `(("." . ,(dir-concat user-cache-directory "backup")))
;;      backup-by-copying t ; Use copies
;;      version-control t ; Use version numbers on backups
;;      delete-old-versions t ; Automatically delete excess backups
;;      kept-new-versions 5 ; Newest versions to keep
;;      kept-old-versions 3 ; Old versions to keep
;;      )


#+END_SRC

** GARBAGE COLLECTION
GC is the process of freeing up memory from unused/used up variables. We set the threshold on the GC so emacs will be a little faster.

#+BEGIN_SRC emacs-lisp
;;; GARBAGE COLLECTION

;; --- 1. Delay GC during startup to speed things up ---
(setq gc-cons-threshold most-positive-fixnum)

;; --- 2. Configure gcmh to dynamically manage GC after startup ---
(use-package gcmh
  :ensure t
  :diminish
  :init
  (setq gcmh-high-cons-threshold 402653184  ;; 384 MB: high threshold during busy periods
	gcmh-low-cons-threshold 16777216     ;; 16 MB: lower threshold when idle
	gcmh-idle-delay 5)                  ;; Wait 5 seconds of idle before lowering the threshold
  :config
  (gcmh-mode 1))

;; --- 3. After startup, restore GC settings and report load time ---
(add-hook 'emacs-startup-hook
	  (lambda ()
	    ;; Reset GC thresholds to reasonable values for normal operation.
	    (setq gc-cons-threshold 402653184
		  gc-cons-percentage 0.6)
	    (message "*** Emacs loaded in %.2f seconds with %d garbage collections."
		     (float-time (time-subtract after-init-time before-init-time))
		     gcs-done)))


#+END_SRC

** NATIVE COMPILE
Native Compile support and silence some annoying warnings when a package gets installed.

#+BEGIN_SRC emacs-lisp
;;; NATIVE COMPILE SUPPRESSION

;; Option 1: Disable deferred native compilation entirely.
;; This prevents background compilation tasks from running during interactive sessions.
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
  (setq native-comp-deferred-compilation nil))

;; Option 2 (alternative):
;; If you prefer to retain asynchronous native compilation to gradually compile packages in the background,
;; you can leave deferred compilation enabled and instead silence its warnings:
;; (setq native-comp-async-report-warnings-errors nil)

;; In noninteractive sessions (like batch scripts), prefer newer source files over stale byte-compiled ones.
;; This skips unnecessary mtime checks on *.elc files, shaving off some IO time.
(setq load-prefer-newer noninteractive)


#+END_SRC

** BYTE COMPILATION

#+BEGIN_SRC emacs-lisp
;;; BYTE COMPILATION

;; Byte-compile elisp files after saving
(defun auto-byte-recompile ()
  "Auto-recompile `.el' files to `.elc' if they exist."
  (when (and buffer-file-name
	     (eq major-mode 'emacs-lisp-mode)
	     (not (string-match-p "init\\.el$" buffer-file-name))
	     (file-exists-p (byte-compile-dest-file buffer-file-name)))
    (byte-recompile-file buffer-file-name)))

(defun byte-recompile-init-file ()
  "Recompile the Emacs init file on exit if it exists."
  (when (and user-init-file
	     (file-exists-p user-init-file))
    (byte-recompile-file user-init-file)))

(add-hook 'after-save-hook #'auto-byte-recompile)
(add-hook 'kill-emacs-hook #'byte-recompile-init-file)
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)


#+END_SRC

-----

* LOAD EVIL MODE
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs. Because...let's face it. The Vim keybindings are just plain better.

#+BEGIN_SRC emacs-lisp
;;; EVIL MODE IN EMACS

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
  :diminish
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
	evil-want-keybinding nil
	evil-vsplit-window-right t
	evil-split-window-below t
	evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
  (evil-mode 1))

(use-package evil-collection
  :diminish
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor :diminish)

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)


#+END_SRC

** WHICH KEY
Which Key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup

#+BEGIN_SRC emacs-lisp
;;; WHICH KEY

(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-allow-imprecise-window-fit nil
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit nil
    which-key-separator " → " ))


#+END_SRC

-----

* UI APPEARANCE

** THEMES

#+BEGIN_SRC emacs-lisp
;;; EF THEMES

(use-package ef-themes
  :ensure t
  :config
  (defvar my/current-ef-theme 'ef-cyprus
    "Stores the current theme to toggle between `ef-cyprus` and `ef-winter`.")

  (defun my/toggle-ef-theme ()
    "Toggle between `ef-cyprus` and `ef-winter` themes."
    (interactive)
    (setq my/current-ef-theme (if (eq my/current-ef-theme 'ef-cyprus)
				  'ef-winter
				'ef-cyprus))
    (ef-themes-select my/current-ef-theme)
    (message "Switched to %s" my/current-ef-theme))

  ;; Load default theme
  (ef-themes-select my/current-ef-theme))

;;; NANO THEMES

;; (use-package nano-theme
;;   :ensure (nano-theme :host github :repo "rougier/nano-theme")
;;   :config
;;   (load-theme 'nano t)
;;   (nano-light))


#+END_SRC

*** DOOM THEME

#+BEGIN_SRC emacs-lisp :tangle no
;;; DOOM THEMES

(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; Enable bold text
	doom-themes-enable-italic t) ; Enable italic text
  ;(load-theme 'doom-challenger-deep t) ; Load default theme
  (doom-themes-neotree-config) ; Enable neotree theme
  (doom-themes-org-config))  ; Improve org-mode fontification


#+END_SRC

** FONTS

#+BEGIN_SRC emacs-lisp
;;; FONTS

(add-to-list 'default-frame-alist '(font . "Roboto Mono Nerd Font-13:bold"))

(set-face-attribute 'default nil
		    :font "Roboto Mono Nerd Font"
		    :height 120
		    :weight 'bold)

(set-face-attribute 'fixed-pitch nil
		    :font "Roboto Mono Nerd Font"
		    :height 130
		    :weight 'bold)

(set-face-attribute 'variable-pitch nil
		    :font "Roboto Mono Nerd Font"
		    :height 120
		    :weight 'bold)

;; Italics for comments & keywords
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

(setq-default line-spacing 0)

(set-display-table-slot standard-display-table 'truncation (make-glyph-code ?…))
(set-display-table-slot standard-display-table 'wrap (make-glyph-code ?–))


#+END_SRC

** ALL THE ICONS
All The Icons is an emcas package that provides a collection of icons for use in various Emacs features, such as the mode-line, minibuffer, and other user interfaces.

#+BEGIN_SRC emacs-lisp
;;; ALL THE ICONS

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

(use-package all-the-icons-completion
  :ensure t
  :defer t
  :hook (marginalia-mode . #'all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

(use-package nerd-icons :defer t
  :custom
  (nerd-icons-color-icons t))


#+END_SRC

-----

* DASHBOARD
[[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+BEGIN_SRC emacs-lisp
;;; EMACS DASHBOARD

;; Load dashboard instead of scratchpad at startup
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;;(use-package page-break-lines :ensure t) ;; enable if you want horizontal lines between sections in dashboard.

(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-banner-logo-title "I'll Walk My Own Path!")
  (setq dashboard-startup-banner 'logo)
  ;; (setq dashboard-startup-banner "~/.config/emacs/assets/emacs.png")
  (setq dashboard-center-content t)
  (setq dashboard-items '((vocabulary)
			  (recents . 5)
			  (agenda . 5)
			  (bookmarks . 10)
			  (projects . 5)))
  (setq dashboard-startupify-list '(dashboard-insert-banner
				    dashboard-insert-newline
				    dashboard-insert-banner-title
				    dashboard-insert-newline
				    dashboard-insert-init-info
				    dashboard-insert-items))
  (setq dashboard-item-generators '(
				    (vocabulary . gopar/dashboard-insert-vocabulary)
				    (recents . dashboard-insert-recents)
				    (bookmarks . dashboard-insert-bookmarks)
				    (agenda . dashboard-insert-agenda)
				    (projects . dashboard-insert-projects)))
  (defun gopar/dashboard-insert-vocabulary (list-size)
    (dashboard-insert-heading " Word of the Day:"
			      nil
			      (all-the-icons-faicon "newspaper-o"
						    :height 1.2
						    :v-adjust 0.0
						    :face 'dashboard-heading))
    (insert "\n")
    (let ((random-line nil)
	  (lines nil))
      (with-temp-buffer
	(insert-file-contents (concat user-emacs-directory "assets/words"))
	(goto-char (point-min))
	(setq lines (split-string (buffer-string) "\n" t))
	(setq random-line (nth (random (length lines)) lines))
	(setq random-line (string-join (split-string random-line) " ")))
      (insert "    " random-line)))
  :config
  (dashboard-setup-startup-hook)
  (add-hook 'dashboard-mode-hook
	    (lambda ()
	      (display-line-numbers-mode -1))))


#+END_SRC

** MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+BEGIN_SRC emacs-lisp
;;; DOOM MODELINE

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (inhibit-compacting-font-caches t)
  (doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-buffer-state-icon nil)
  (doom-modeline-lsp nil)
  :hook (after-init . doom-modeline-mode)
  :config
    (setq doom-modeline-height 25      ;; sets modeline height
	  doom-modeline-bar-width 5    ;; sets right bar width
	  doom-modeline-persp-name t   ;; adds perspective name to modeline
	  doom-modeline-persp-icon t))


#+END_SRC

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+BEGIN_SRC emacs-lisp
;;; DIMINISH

(use-package diminish
  :ensure t
  :defer t
  :init
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'beacon-mode)
  (diminish 'irony-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'auto-revert-mode)
  (diminish 'yas-minor-mode)
)


#+END_SRC

** RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+BEGIN_SRC emacs-lisp
;;; RAINBOW MODE

(use-package rainbow-mode
  :ensure t
  :defer t
  :diminish
  :hook org-mode prog-mode)


#+END_SRC

** RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+BEGIN_SRC emacs-lisp
;;; RAINBOW DELIMITERS
(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
	 (clojure-mode . rainbow-delimiters-mode)))


#+END_SRC

** DRAG-STUFF
[[https://github.com/rejeep/drag-stuff.el][Drag Stuff]] is a minor mode for Emacs that makes it possible to drag stuff (words, region, lines) around in Emacs.  When 'drag-stuff-define-keys' is enabled, then the following keybindings are set: M-up, M-down, M-left, and M-right.

#+BEGIN_SRC emacs-lisp
;;; DRAG STUFF

(use-package drag-stuff
  :ensure t
  :defer t
  :diminish
  :init
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))


#+END_SRC

** EDIFF
'ediff' is a diff program that is built into Emacs.  By default, 'ediff' splits files vertically and places the 'help' frame in its own window.  I have changed this so the two files are split horizontally and the 'help' frame appears as a lower split within the existing window.  Also, I create my own 'karna-ediff-hook' where I add 'j/k' for moving to next/prev diffs.  By default, this is set to 'n/p'.

#+BEGIN_SRC emacs-lisp
;;; EDIFF SETUP

(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun karna-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'karna-ediff-hook)


#+END_SRC

-----

* GIT PROGRAMS
  Git Programs that I personally love with Emacs.

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+BEGIN_SRC emacs-lisp
;;; GIT TIMEMACHINE

(use-package git-timemachine
  :after git-timemachine
  :defer t
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)


#+END_SRC

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+BEGIN_SRC emacs-lisp

;;; MAGIT
;; Transient is required by Magit for handling popups and keybindings
(use-package transient
  :defer t)

;; Magit - A Git porcelain inside Emacs
(use-package magit
  :after transient  ;; Ensure transient is loaded first
  :defer t          ;; Load Magit when needed
  :custom
  (magit-show-long-lines-warning nil))  ;; Disable long lines warning in Magit


#+END_SRC

-----

* SOME EXTRA STUFF
I am so lazy to document so adding some of the extras here

#+BEGIN_SRC emacs-lisp
;;; SOME EXTRA STUFF
(use-package tldr :ensure t :defer t)

;; Use puni-mode globally and disable it for term-mode.
(use-package puni
  :defer t
  :init
  ;; The autoloads of Puni are set up so you can enable `puni-mode` or
  ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
  ;; any key that calls Puni commands, it's loaded.
  (puni-global-mode)
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))

(use-package expand-region
  :bind ("C-=" . er/expand-region))


#+END_SRC

** CALC

#+BEGIN_SRC emacs-lisp
;;; CALC

(use-package calc
  :ensure nil  ;; tells Elpaca not to manage calc because it's built-in
  :bind (("C-x c" . calc)
	 ("C-S-e" . latex-math-from-calc)
	 ("C-c e" . calc-embedded))
  :config
  (use-package calc-embed
    :ensure nil
    :bind (:map calc-override-minor-modes-map
	   ("'" . calc-algebraic-entry)))
  (use-package calc-yank
    :ensure nil
    :defer t
    :config
    (define-advice calc-finish-stack-edit (:around (orig-fn &rest args) pop-to-buffer)
      (cl-letf (((symbol-function 'switch-to-buffer)
		 #'pop-to-buffer))
	(apply orig-fn args))))
  (setq calc-make-windows-dedicated t)
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (let ((lang (if (memq major-mode '(org-mode latex-mode LaTex-mode))
		    'latex 'normal)))
      (cond ((region-active-p)
	     (let* ((beg (region-beginning))
		    (end (region-end))
		    (string (buffer-substring-no-properties beg end)))
	       (kill-region beg end)
	       (insert (calc-eval `(,string calc-language ,lang
					    calc-prefer-frac t
					    calc-angle-mode rad)))))
	    (t (let ((l (thing-at-point 'line)))
		 (end-of-line 1)
		 (kill-line 0)
		 (insert (calc-eval `(,l
				      calc-language ,lang
				      calc-prefer-frac t
				      calc-angle-mode rad)))))))))

;; If you need additional settings for calc after org-latex-preview, combine them into the same declaration:
(use-package calc
  :ensure nil
  :after org-latex-preview
  :hook (calc-mode . my/olp-calc-settings)
  :config
  (defun my/olp-calc-settings ()
    (setq-local org-latex-preview-numbered nil
		org-latex-preview-auto-ignored-commands
		'(mwheel-scroll pixel-scroll-precision
		  scroll-up-command scroll-down-command
		  scroll-other-window scroll-other-window-down))))


#+END_SRC

-----

* STARTUP PACKAGES
These are some of my packages that are required on startup

** BEACON MODE
Whenever the window scrolls a light will shine on top of your cursor so you know where it is - [[https://github.com/Malabarba/beacon][BEACON]].

#+BEGIN_SRC emacs-lisp
;;; BEACON

(use-package beacon
  :ensure t
  :defer t
  :init
  ;;(setq beacon-size 40)
  ;;(setq beacon-color "#ff00ff")
  (beacon-mode 1))


#+END_SRC

** PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+BEGIN_SRC emacs-lisp
;;; PROJECTILE

(use-package projectile
  :ensure t
  :init
  ;; Set the search path for Projectile if the directory exists.
  (when (file-directory-p "/mnt/Karna/Git/Project-K")
    (setq projectile-project-search-path '("/mnt/Karna/Git/Project-K/")))
  ;; Define the action to take when switching projects.
  (setq projectile-switch-project-action #'projectile-dired)
  ;; :custom
  ;; Use Ivy for completion within Projectile.
  ;; (projectile-completion-system 'ivy)
  :config
  ;; Now that Projectile is loaded, append the extra directories to ignore.
  (setq projectile-globally-ignored-directories
	(append projectile-globally-ignored-directories
		'("node_modules" "dist" "build" "vendor" ".venv" "tmp" "cache" "log" "bower_components")))
  (projectile-mode 1))

;(use-package counsel-projectile
;  :ensure t
;  :after (projectile counsel)  ;; Ensure Projectile and Counsel are loaded first.
;  :config
;  (counsel-projectile-mode 1))

(use-package consult-projectile
  :ensure (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))


#+END_SRC

** PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+BEGIN_SRC emacs-lisp
;;; PERSPECTIVE

(use-package perspective
  :ensure t
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :config
  (persp-mode 1)
  ;; Sets a file to write to when we save states
)

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
	  (lambda ()
	    (persp-ibuffer-set-filter-groups)
	    (unless (eq ibuffer-sorting-mode 'alphabetic)
	      (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
;; (add-hook 'kill-emacs-hook #'persp-state-save)

(global-set-key (kbd "C-S-s") #'persp-state-save)


#+END_SRC

-----

* MINIBUFFER (VERTICO, CONSULT, ORDERLESS MARGINALIA & EMBARK)

** Vertico (Minimal and Fast Vertical Completion UI)
Vertico provides an efficient and minimalistic vertical completion UI.

#+BEGIN_SRC emacs-lisp
;;; VERTICO

(use-package vertico
  :init
  (vertico-mode)
  :hook
  ;; Tidy paths automatically in the minibuffer.
  (rfn-eshadow-update-overlay-hook . vertico-directory-tidy)
  :config
  ;; Load the directory extension once Vertico is loaded.
  (require 'vertico-directory)
  ;; Show more candidates
  ;(setq vertico-count 20)
  ;; Grow/shrink the minibuffer dynamically.
  (setq vertico-resize nil)
  ;; Enable cycling through candidates.
  (setq vertico-cycle t))


#+END_SRC

** Marginalia (Rich Annotations for Minibuffer Completions)
Marginalia enhances minibuffer completions by providing additional context annotations.

#+BEGIN_SRC emacs-lisp
;;; MARGINALIA

(use-package marginalia
  :ensure t
  :defer t
  :bind (:map minibuffer-local-map
	 ("M-A" . marginalia-cycle))
  :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init (marginalia-mode))


#+END_SRC

** Consult (Better Searching and Buffer Navigation)
The `consult' package provides lots of commands that are enhanced variants of basic, built-in functionality.  One of the headline features of `consult' is its preview facility, where it shows in another Emacs window the context of what is currently matched in the minibuffer.  Here I define key bindings for some commands you may find useful.  The mnemonic for their prefix is "alternative search" (as opposed to the basic C-s or C-r keys).

#+BEGIN_SRC emacs-lisp
;;; CONSULT

(use-package consult
  :ensure t
  :bind (;; A recursive grep
	 ("M-s M-g" . consult-grep)
	 ;; Search for files names recursively
	 ("M-s M-f" . consult-fd)
	 ;; Search through the outline (headings) of the file
	 ("M-s M-o" . consult-outline)
	 ;; Search the current buffer
	 ("M-s M-l" . consult-line)
	 ;; Switch to another buffer, or bookmarked file, or recently
	 ;; opened file.
	 ("M-s M-b" . consult-buffer)))

;;; CONSULT DIR

(use-package consult-dir
 :ensure t
 :defer t
 :bind (("C-x C-d" . consult-dir)
 :map vertico-map
 ("C-x C-d" . consult-dir)
 ("C-x C-j" . consult-dir-jump-file)))

;; The `wgrep' packages lets us edit the results of a grep search
;; while inside a `grep-mode' buffer.  All we need is to toggle the
;; editable mode, make the changes, and then type C-c C-c to confirm
;; or C-c C-k to abort.
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852

(use-package wgrep
  :ensure t
  :bind ( :map grep-mode-map
	  ("e" . wgrep-change-to-wgrep-mode)
	  ("C-x C-q" . wgrep-change-to-wgrep-mode)
	  ("C-c C-c" . wgrep-finish-edit)))


;; Display a counter showing the number of the current and the other
;; matches.  Place it before the prompt, though it can be after it.
(setq isearch-lazy-count t)
(setq lazy-count-prefix-format "(%s/%s) ")
(setq lazy-count-suffix-format nil)

;; Make regular Isearch interpret the empty space as a regular
;; expression that matches any character between the words you give
;; it.
(setq search-whitespace-regexp ".*?")

;; Install the `wgrep' package.  It makes the grep buffers editable.

;; Install the `consult' package.  It provides lots of useful commands that
;; enhance the minibuffer experience of Emacs (e.g. for searching
;; lines/heading).

;; Install the `embark' package.  It allows you to perform context-sensitive
;; actions, using a prompt and then a key/action selection interface.


#+END_SRC

** Orderless (Smart Matching for Completions)
#+BEGIN_SRC emacs-lisp
;;; ORDERLESS

(use-package orderless
  :ensure t
  :defer t
  :custom
  ;; (orderless-style-dispatchers '(orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(basic substring initials flex orderless))
  (completion-category-defaults nil)

  (setq completion-category-overrides
	;; NOTE 2021-10-25: I am adding `basic' because it works better as a
	;; default for some contexts.  Read:
	;; <https://debbugs.gnu.org/cgi/bugreport.cgi?bug=50387>.
	;;
	;; `partial-completion' is a killer app for files, because it
	;; can expand ~/.l/s/fo to ~/.local/share/fonts.
	;;
	;; If `basic' cannot match my current input, Emacs tries the
	;; next completion style in the given order.  In other words,
	;; `orderless' kicks in as soon as I input a space or one of its
	;; style dispatcher characters.
	'((file (styles . (basic partial-completion orderless)))
	  (bookmark (styles . (basic substring)))
	  (library (styles . (basic substring)))
	  (embark-keybinding (styles . (basic substring)))
	  (imenu (styles . (basic substring orderless)))
	  (consult-location (styles . (basic substring orderless)))
	  (kill-ring (styles . (orderless)))
	  (eglot (styles . (orderless flex))))))

(setq completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
(setq-default case-fold-search t)   ; For general regexp
(setq read-file-name-completion-ignore-case t)


#+END_SRC

** Embark (Perform Actions on Completion Candidates)
Embark allows performing actions on minibuffer candidates dynamically.

#+BEGIN_SRC emacs-lisp
;;; EMBARK

(use-package embark
  :ensure t
  :defer t
  :bind (("M-h" . embark-act))
  :commands (embark-act
	       embark-dwim
	       embark-export
	       embark-collect
	       embark-bindings
	       embark-prefix-help-command)

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;;; EMBARK CONSULT

  (use-package embark-consult
     :ensure t
     :after (embark consult)
     :defer t
     :hook
     (embark-collection-mode . consult-preview-at-point-mode))


#+END_SRC

** ARCHIVES

*** IVY

#+BEGIN_SRC emacs-lisp :tangle no
;;; IVY

(use-package ivy
  :ensure t
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (ivy-mode))


#+END_SRC

*** IVY RICH

#+BEGIN_SRC emacs-lisp :tangle no

;;; IVY RICH

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1)  ;; Enable Ivy-rich for improved display in Ivy prompts
  :custom
  (ivy-virtual-abbreviate 'full)  ;; Show full path in Ivy buffers
  (ivy-rich-switch-buffer-align-virtual-buffer t)  ;; Align virtual buffers (e.g., project-root buffers)
  (ivy-rich-path-style 'abbrev)  ;; Abbreviate file paths for better display
  :config
  ;; Set default transformers for ivy commands
  (setq ivy-rich-display-transformers-list
	'((ivy-switch-buffer
	   :columns
	   ((ivy-rich-switch-buffer-icon (:width 2))
	    (ivy-rich-candidate (:width 30))
	    (ivy-rich-switch-buffer-size (:width 7))
	    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	    (ivy-rich-switch-buffer-project (:width 15 :face success))
	    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))))))


#+END_SRC

*** ALL THE ICONS IVY RICH

#+BEGIN_SRC emacs-lisp :tangle no

;;; ALL THE ICONS IVY RICH

(use-package all-the-icons-ivy-rich
  :ensure t
  :init
  (all-the-icons-ivy-rich-mode 1))


#+END_SRC

*** COUNSEL

#+BEGIN_SRC emacs-lisp :tangle no

;;; COUNSEL

(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config
  (counsel-mode)
  (setq ivy-initial-inputs-alist nil))


#+END_SRC

*** IVY POSTFRAME

#+BEGIN_SRC emacs-lisp :tangle no
;;; IVY POSTFRAME

 (use-package posframe
   :ensure t)

 (use-package ivy-posframe
   :ensure t
   :after ivy
   :config
   (setq ivy-posframe-parameters '((left . 0) (top . 0)))  ;; Center position
   (setq ivy-posframe-width 80)  ;; Adjust the width as needed
   (setq ivy-posframe-height 20)  ;; Adjust the height as needed
   (setq ivy-posframe-min-width 20)

   ;; Enable ivy-posframe
   (ivy-posframe-mode 1))

 (setq ivy-display-function 'ivy-posframe-display)


#+END_SRC

-----

* BUFFER COMPLETION SYSTEM (CORFU / CAPE & TABNINE)
This is a list of buffer completion systems I use.

** CORFU

#+BEGIN_SRC emacs-lisp
;;; CORFU

(use-package corfu
  :ensure t
  :defer t
  :init
  (global-corfu-mode)
  :custom
  (corfu-cycle t)               ;; Enable cycling through candidates
  (corfu-auto t)                ;; Enable auto-completion
  (corfu-auto-prefix 2)         ;; Minimum prefix length for auto-completion
  (corfu-auto-delay 0.02)          ;; No delay before suggestions appear
  (corfu-quit-no-match t)
  (corfu-quit-at-boundary 'separator)
  (corfu-echo-documentation nil)
  (corfu-preview-current 'insert)
  (corfu-preselect-first nil)
  (corfu-popupinfo-mode nil)      ;; Enable documentation popups
  :bind (:map corfu-map
	 ("S-RET" . nil)
	 ("RET"   . corfu-insert)
	 ("TAB"   . corfu-next)
	 ("[tab]" . corfu-next)
	 ("S-TAB" . corfu-previous)
	 ("C-h"   . corfu-info-documentation)
	 ("M-SPC" . corfu-insert-separator))
  :hook
  ;; In eshell, disable auto-completion but keep the quit settings.
  (eshell-mode . (lambda ()
		   (setq-local corfu-quit-at-boundary t
			       corfu-quit-no-match t
			       corfu-auto nil)))
  ;; Customize completion styles for Corfu.
  (corfu-mode . (lambda ()
		  (setq-local completion-styles '(basic)
			      completion-category-overrides nil
			      completion-category-defaults nil)))
  :config
  (corfu-history-mode))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  ;; Add the Nerd Icons Corfu formatter to Corfu's margin formatters.
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))


#+END_SRC

** CAPE

#+BEGIN_SRC emacs-lisp
;;; CAPE

(use-package cape
  :ensure t
  :init
  (dolist (fn '(cape-file
		cape-keyword
		cape-dabbrev
		cape-elisp-block
		cape-abbrev
		cape-dict
		;; cape-emoji
		cape-sgml))
    (add-hook 'completion-at-point-functions fn 'append))

  (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-elisp-symbol 'append)
	      (add-hook 'completion-at-point-functions #'cape-elisp-block 'append)))

  (add-hook 'latex-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-tex 'append))))

;;; CAPF AUTOSUGGEST

(use-package capf-autosuggest
  :ensure t
  :defer t
  :hook ((eshell-mode . capf-autosuggest-mode))
  :custom
  (capf-autosuggest-dwim-next-line nil))


#+END_SRC

** TABNINE AI Completion
TabNine provides AI-powered autocompletion, enhancing productivity for programming tasks.

#+BEGIN_SRC emacs-lisp
;;; TABNINE AI Completion

(use-package tabnine
  :commands (tabnine-start-process tabnine-mode)
  :ensure t
  :diminish "⌬"
  :custom
  (tabnine-wait 1)
  (tabnine-minimum-prefix-length 2)
  ;; :hook
  ;; ((prog-mode . tabnine-mode)
  ;; (org-mode . tabnine-mode)
  ;; (LaTeX-mode . tabnine-mode)
  ;; (text-mode . tabnine-mode)
  ;; (kill-emacs . tabnine-kill-process))
  :config
  (add-to-list 'completion-at-point-functions #'tabnine-completion-at-point)
  (tabnine-start-process)
  :bind
  (:map tabnine-completion-map
    ("<tab>" . tabnine-accept-completion)
    ("M-f" . tabnine-accept-completion-by-word)
    ("M-<return>" . tabnine-accept-completion-by-line)
    ("C-g" . tabnine-clear-overlay)
    ("M-[" . tabnine-previous-completion)
    ("M-]" . tabnine-next-completion)))


#+END_SRC

** ARCHIVES

*** CODEIUM AI COMPLETION
Codeium is a powerful AI-powered code completion and coding assistant.

#+BEGIN_SRC emacs-lisp :tangle no
;;; CODEIUM

;; we recommend using use-package to organize your init.el
(use-package codeium
    ;; if you use straight
    ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
    ;; otherwise, make sure that the codeium.el file is on load-path

    :ensure (codeium :host github :repo "Exafunction/codeium.el")

    :init
    ;; use globally
    (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
    ;; or on a hook
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

    ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local completion-at-point-functions
    ;;             (list (cape-capf-super #'codeium-completion-at-point #'lsp-completion-at-point)))))
    ;; an async company-backend is coming soon!

    ;; codeium-completion-at-point is autoloaded, but you can
    ;; optionally set a timer, which might speed up things as the
    ;; codeium local language server takes ~0.2s to start up
     (add-hook 'emacs-startup-hook
      (lambda () (run-with-timer 0.1 nil #'codeium-init)))

    ;; :defer t ;; lazy loading, if you want
    :config
    (setq use-dialog-box nil) ;; do not use popup boxes

    ;; if you don't want to use customize to save the api-key
    ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

    ;; get codeium status in the modeline
    (setq codeium-mode-line-enable
	(lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
    (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
    ;; alternatively for a more extensive mode-line
    ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
    (setq codeium-api-enabled
	(lambda (api)
	    (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
    ;; you can also set a config for a single buffer like this:
    ;; (add-hook 'python-mode-hook
    ;;     (lambda ()
    ;;         (setq-local codeium/editor_options/tab_size 4)))

    ;; You can overwrite all the codeium configs!
    ;; for example, we recommend limiting the string sent to codeium for better performance
    (defun my-codeium/document/text ()
	(buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
    ;; if you change the text, you should also change the cursor_offset
    ;; warning: this is measured by UTF-8 encoded bytes
    (defun my-codeium/document/cursor_offset ()
	(codeium-utf8-byte-length
	    (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
    (setq codeium/document/text 'my-codeium/document/text)
    (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))


#+END_SRC

*** COMPANY

#+BEGIN_SRC emacs-lisp :tangle no
;;; COMPANY

(use-package company
  :ensure t
  :defer t
  :bind
  (:map company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous)
    ("M-<" . company-select-first)
    ("M->" . company-select-last)
    ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-require-match nil)
  (company-idle-delay 0)
  (company-show-numbers t)
  (company-tooltip-offset-display 'lines)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend-with-delay
		       company-preview-frontend
		       company-echo-metadata-frontend))
  :config
  (global-company-mode t))

(setq company-tooltip-limit 10)
(setq company-tooltip-minimum 4) ;; Ensure at least 4 candidates are visible
(setq company-tooltip-flip-when-above t) ;; Keep candidates visually consistent
(setq company-text-face-extra-attributes '(:weight bold :slant italic))


#+END_SRC

*** COMPANY BOX

#+BEGIN_SRC emacs-lisp :tangle no
;;; COMPANY BOX

(use-package company-box
  :after company
  :ensure t
  :defer t
  :diminish
  :hook (company-mode . company-box-mode))


#+END_SRC

-----

* PRODUCTIVITY STUFF
Productivity stuff configs such as undo-fu, wakatime etc..

** GPTEL
GPTEL is an excellent package written by karthink and the document is written [[https://github.com/karthink/gptel?tab=readme-ov-file#installation][here]]. And a detailed demo is available on [[https://youtu.be/bsRnh_brggM?si=t65KN0WiKe9e7OMY][YouTube]].

#+BEGIN_SRC emacs-lisp
;;; GPTEL

(use-package gptel
  :ensure t
  :defer t
  :config

  ;;; KAGI Backend
  ;(gptel-make-kagi "Kagi"
  ;  :key (lambda () (auth-source-pick-first-password :host "kagi.com" :login "apikey")))

  (setq gptel-default-mode 'org-mode)
  (setq gptel-expert-commands t)

  ;; Define and Set Ollama as Default Backend
  (setq gptel-backend
	(gptel-make-ollama "Ollama"
			   :host "localhost:11434"
			   :stream t
			   :models '("llama3:latest"
				     "deepseek-coder:6.7b"
				     "mistral"
				     "zephyr"
				     "llama3:8b-instruct-q6_K"
				     "deepseek-r1:8b"
				     "qwen2.5:3b"))))
  ;; Set up keybinding for sending messages
(define-key global-map (kbd "C-c RET") 'gptel-send)


#+END_SRC

** ELLAMA
[[https://github.com/s-kostyaev/ellama][Ellama]] is a tool for interacting with large language models from Emacs.  You need to have 'ollama' installed on your computer to use 'ellama' in Emacs.  You need to pull in any LLMs that you want to have available for use.  For example, if you want to be able to use Llama 3.1, then you need to run 'ollama pull llama3.1'.

#+BEGIN_SRC emacs-lisp
;;; ELLAMA

(use-package ellama
  :init
  (setopt ellama-keymap-prefix "C-c e")  ;; keymap for all ellama functions
  (setopt ellama-language "English")     ;; language ellama should translate to
  (require 'llm-ollama)
  (setopt ellama-provider
    (make-llm-ollama
     ;; this model should be pulled to use it
     ;; value should be the same as you print in terminal during pull
     :chat-model "llama3.1"
     :embedding-model "nomic-embed-text"
     :default-chat-non-standard-params '(("num_ctx" . 8192))))
  ;; Predefined llm providers for interactive switching.
  (setopt ellama-providers
	'(("zephyr" . (make-llm-ollama
	   :chat-model "zephyr"
	   :embedding-model "zephyr"))
	  ("deepseek-r1:8b" . (make-llm-ollama
	   :chat-model "deepseek-r1:8b"
	   :embedding-model "deepseek-r1:8b"))
	  ("llama3" . (make-llm-ollama
	   :chat-model "llama3"
	   :embedding-model "llama3"))
	  ("mistral" . (make-llm-ollama
	    :chat-model "mistral"
	    :embedding-model "mistral"))))
  (setopt ellama-coding-provider
	(make-llm-ollama
	 ;; :chat-model "qwen2.5-coder:3b"
	 :chat-model "deepseek-coder:6.7b"
	 :embedding-model "deepseek-coder:6.7b"
	 ;; :default-chat-non-standard-params '(("num_ctx" . 32768))
))
  (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
  ;; Translation llm provider
  (setopt ellama-translation-provider (make-llm-ollama
	       :chat-model "qwen2.5:3b"
	       :embedding-model "nomic-embed-text"))
  ;; customize display buffer behaviour
  ;; see ~(info "(elisp) Buffer Display Action Functions")~
  (setopt ellama-chat-display-action-function #'display-buffer-full-frame)
  (setopt ellama-instant-display-action-function #'display-buffer-at-bottom)
  :config
  (setq ellama-sessions-directory "~/.cache/emacs/ellama-sessions/"
	ellama-sessions-auto-save t))


#+END_SRC

** UNDO FU
Undo Management in Emacs

#+BEGIN_SRC emacs-lisp
;;; UNDO FU

;; The =undo-fu-session= package saves and restores the undo states of buffers
;; across Emacs sessions.
(use-package undo-fu-session
  :ensure t
  :defer t
  :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  :hook ((prog-mode conf-mode text-mode tex-mode) . undo-fu-session-mode))


#+END_SRC

** WAKATIME
Wakatime is a time tracking extension for Emacs.

#+BEGIN_SRC emacs-lisp
;;; Wakatime -- Install wakatime cli

(use-package wakatime-mode
  :ensure t
  :diminish
  :config
  (global-wakatime-mode))


#+END_SRC

-----

* FILE MANAGER AND BUFFERS SETUP
I use TREEMACS as file manager with the dired setting and also peep dired for better icons and stuff..

** TREEMACS
Treemacs is a cool alternative to Neotree

#+BEGIN_SRC emacs-lisp
;;; TREEMACS

   (use-package treemacs
  :ensure t
  :defer t
  :bind
  (("C-c t" . treemacs))
  :config
  (setq treemacs-width 30))

(setq treemacs-persist-file (concat user-cache-directory "treemacs-persist"))

;; Mouse single-click expands nodes in Treemacs
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))


#+END_SRC

** DIRED
Enhancing Emacs' built-in Dired file manager with additional functionality.

#+BEGIN_SRC emacs-lisp
;;; DIRED OPEN

(use-package dired-open
  :ensure t
  :defer t
  :config
  ;; Define applications to open specific file types
  (setq dired-open-extensions '(("gif" . "sxiv")   ;; Open GIFs with sxiv
				("jpg" . "sxiv")   ;; Open JPEGs with sxiv
				("png" . "sxiv")   ;; Open PNGs with sxiv
				("mkv" . "mpv")    ;; Open MKVs with mpv
				("mp4" . "mpv")))) ;; Open MP4s with mpv


#+END_SRC

** PEEP DIRED
peep-dired: Quick file previews within Dired

#+BEGIN_SRC emacs-lisp
;;; PEEP DIRED

(use-package peep-dired
  :after dired
  :ensure t
  :hook (evil-normalize-keymaps . peep-dired-hook) ;; Ensure peep-dired works with Evil mode
  :config
  ;; Define keybindings for navigation in Dired mode
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)   ;; Go up one directory
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)      ;; Open file (use `dired-find-file` if not using `dired-open`)

  ;; Keybindings for navigating files in peep-dired preview mode
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)  ;; Next file preview
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)) ;; Previous file preview


#+END_SRC

** SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+BEGIN_SRC emacs-lisp
;;; SUDO EDIT

(use-package sudo-edit :ensure t :defer t)


#+END_SRC

-----

* PROGRAMMING MODES

** BREADCRUMB

#+BEGIN_SRC emacs-lisp
;;; BREADCRUMB

(use-package breadcrumb
  :ensure t
  :config
  (breadcrumb-mode 1) ; Enable breadcrumb globally.
  ;; Optional tweaks for breadcrumb appearance:
  (setq breadcrumb-imenu-max-length 30
	breadcrumb-project-max-length 30
	breadcrumb-imenu-crumb-separator " » "
	breadcrumb-project-crumb-separator " / ")
  ;; Set the header-line to display both project and imenu breadcrumbs.
  (setq header-line-format
	'((:eval (concat (breadcrumb-project-crumbs)
			 "  " (breadcrumb-imenu-crumbs))))))


#+END_SRC

** JARCHIVE
Jarchive teaches emacs how to open project dependencies that reside inside jar files.

#+BEGIN_SRC emacs-lisp
;;; JARCHIVE

(use-package jarchive
  :ensure t
  :after eglot
  :config
  (jarchive-setup))


#+END_SRC

** FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+BEGIN_SRC emacs-lisp
;;; FLYCHECK

(use-package flycheck
  :ensure t
  :defer t
  :diminish flycheck-mode
  :init
  (global-flycheck-mode)
  :config
  ;; Adjust when Flycheck runs syntax checks.
  (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)
	;; Increase the error threshold to avoid disabling checkers on too many errors.
	flycheck-checker-error-threshold 1000))


#+END_SRC

** TREESITTER SOURCES

#+BEGIN_SRC emacs-lisp
;;; TREESITTER SOURCES

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(setq treesit-language-source-alist
	'((templ      "https://github.com/vrischmann/tree-sitter-templ")
	  (bash       "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake      "https://github.com/uyha/tree-sitter-cmake")
	  (css        "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp      "https://github.com/Wilfred/tree-sitter-elisp")
	  (go         "https://github.com/tree-sitter/tree-sitter-go")
	  (gomod      "https://github.com/camdencheek/tree-sitter-go-mod")
	  (html       "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (cpp        "https://github.com/tree-sitter/tree-sitter-cpp")
	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
	  (json       "https://github.com/tree-sitter/tree-sitter-json")
	  (make       "https://github.com/alemuller/tree-sitter-make")
	  (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
	  (python     "https://github.com/tree-sitter/tree-sitter-python")
	  (toml       "https://github.com/tree-sitter/tree-sitter-toml")
	  (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (yaml       "https://github.com/ikatyang/tree-sitter-yaml")
	  (haskell    "https://github.com/tree-sitter/tree-sitter-haskell")
	  (typst      "https://github.com/uben0/tree-sitter-typst")
	  (java       "https://github.com/tree-sitter/tree-sitter-java")
	  (ruby       "https://github.com/tree-sitter/tree-sitter-ruby")
	  (rust       "https://github.com/tree-sitter/tree-sitter-rust")))


#+END_SRC

** FORMAT ALL

#+BEGIN_SRC emacs-lisp
;;; FORMAT ALL

(use-package format-all
  :ensure t
  :defer t
  :preface
  (defun ian/format-code ()
    "Auto-format the entire buffer.
If in `prolog-mode', call `prolog-indent-buffer';
if the buffer is managed by Eglot and the LSP server supports document
formatting, call `eglot-format-buffer';
otherwise, call `format-all-buffer'."
    (interactive)
    (cond
     ((derived-mode-p 'prolog-mode)
      (prolog-indent-buffer))
     ((and (eglot-managed-p)
	   (eglot--server-capable :documentFormattingProvider))
      (eglot-format-buffer))
     (t (format-all-buffer))))
  :hook (prog-mode . format-all-ensure-formatter))


#+END_SRC

** EGLOT

#+BEGIN_SRC emacs-lisp
;;; EGLOT

(use-package eglot
  :ensure nil
  :custom
  (eglot-autoshutdown t)  ;; Shut down LSP when the buffer is closed.
  (eglot-sync-connect 1)   ;; Asynchronous connection.
  :bind (:map eglot-mode-map
	 ("C-c a" . eglot-code-actions)
	 ("C-c f" . flymake-show-buffer-diagnostics)
	 ("C-c r" . eglot-rename)
	 ("C-c i" . consult-imenu)
	 ("C-c b" . imenu-list-smart-toggle))
  :hook ((python-ts-mode . eglot-ensure)
	 (c-ts-mode        . eglot-ensure)
	 (c++-ts-mode      . eglot-ensure)
	 (go-ts-mode       . eglot-ensure)
	 (yaml-mode        . eglot-ensure)
	 (eglot-managed-mode . my/eglot-setup))
  :config
  (dolist (server `((c-ts-mode        . ("clangd"))
	(python-ts-mode   . ("pyright-langserver" "--stdio"))
		    (c++-ts-mode      . ("clangd"))
		    (go-ts-mode       . ("gopls"))))
    (add-to-list 'eglot-server-programs server)))

;; Custom eglot setup for buffer-local settings and keybindings.

(defun my/eglot-setup ()
  "Custom configuration for eglot-managed buffers."
  (electric-indent-local-mode t)
  (cond
   ((derived-mode-p 'python-ts-mode)
    (setq-local indent-tabs-mode nil
		python-indent-offset 4
		python-indent-guess-indent-offset nil)
    (local-set-key (kbd "<f6>") #'ian/format-code))
   ((derived-mode-p 'c-ts-mode 'c++-ts-mode)
    (setq-local c-default-style "linux"
		c-basic-offset 4)
    (local-set-key (kbd "<f6>") #'ian/format-code))
   ((derived-mode-p 'go-ts-mode)
    (setq-local tab-width 4
		indent-tabs-mode t)  ;; Go conventionally uses tabs.
    (local-set-key (kbd "<f6>") #'ian/format-code))
   ((derived-mode-p 'yaml-mode)
    nil)))


;; Additional auto-mode association for C++ using tree-sitter.
(add-to-list 'auto-mode-alist
	     '("\\(\\.ii\\|\\.\\(CC?\\|HH?\\)\\|\\.[ch]\\(pp\\|xx\\|\\+\\+\\)\\|\\.\\(cc\\|hh\\)\\)\\'"
	       . c++-ts-mode))

(use-package eldoc-box
  :ensure t
  :hook (eglot-managed-mode . eldoc-box-hover-mode) ;; Enable it for Eglot
  :bind (:map eglot-mode-map
	      ("C-c d" . eldoc-box-help-at-point))) ;; Manually trigger it

(add-hook 'eldoc-box-buffer-setup-hook #'eldoc-box-prettify-ts-errors 0 t)


#+END_SRC

** HIGHLIGHT INDENTATION GUIDES

#+BEGIN_SRC emacs-lisp
;;; HIGHLIGHT INDENTATION GUIDES

(use-package highlight-indent-guides
  :ensure t
  :defer t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
  (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-auto-enabled nil) ;; Disable auto coloring

  ;; Adjust colors based on theme background
  (defun my/highlight-indent-guides-set-colors ()
    (if (eq (frame-parameter nil 'background-mode) 'dark)
	(progn
	  (set-face-foreground 'highlight-indent-guides-character-face "gray40")
	  (set-face-foreground 'highlight-indent-guides-top-character-face "white")
	  (set-face-foreground 'highlight-indent-guides-stack-character-face "gray60"))
      (progn
	(set-face-foreground 'highlight-indent-guides-character-face "gray40")
	(set-face-foreground 'highlight-indent-guides-top-character-face "black")
	(set-face-foreground 'highlight-indent-guides-stack-character-face "gray60"))))

  (add-hook 'after-load-theme-hook #'my/highlight-indent-guides-set-colors)
  (my/highlight-indent-guides-set-colors)) ;; Apply colors immediately


#+END_SRC

** PYTHON SETUP

*** CONDA

#+BEGIN_SRC emacs-lisp
;;; CONDA

(use-package conda
  :ensure t
  :defer t
  :init
  ;; Set base directories (this is lightweight and safe to run on startup)
  (setq conda-anaconda-home (expand-file-name "~/miniconda"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda"))
  :config
  ;; Initialize shells and modeline updates only when Conda is loaded.
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode nil)   ;; Disable global autoactivation.
  (conda-mode-line-setup)              ;; Update modeline when Conda env changes.
  :hook ((python-mode . conda-env-autoactivate-mode)
	 (conda-postactivate-hook . restart-python-shell-with-conda)))


#+END_SRC

*** CUSTOM FUNCTIONS

#+BEGIN_SRC emacs-lisp
;;; CUSTOM FUNCTIONS

(defun restart-python-shell-with-conda ()
  "Restart Python shell using the currently activated Conda environment."
  (interactive)
  (when (bound-and-true-p conda-env-current-name)
    (let* ((conda-base-path (or (getenv "CONDA_PREFIX") "~/miniconda"))
	   (env-path (if (string= conda-env-current-name "base")
			 conda-base-path
		       (concat conda-base-path "/envs/" conda-env-current-name)))
	   (env-bin (concat env-path "/bin/python"))
	   (python-buffer (get-buffer "*Python*")))
      ;; Kill existing Python shell if running.
      (when (get-process "Python")
	(delete-process "Python"))
      (when python-buffer
	(kill-buffer python-buffer))
      (delete-other-windows)
      (if (file-executable-p env-bin)
	  (progn
	    (setq-local python-shell-interpreter env-bin)
	    (setq-local python-shell-interpreter-args "-i")
	    (setq-local pythonic-interpreter env-bin)  ;; If using pythonic.el.
	    (run-python (concat env-bin " -i") nil nil)
	    (message "Switched Python shell to Conda environment: %s"
		     conda-env-current-name))
	(message "Error: Could not find Python executable at %s" env-bin)))))


(defun open-python-right-side ()
  "Toggle a Python REPL in a vertical split on the right side."
  (interactive)
  (let ((python-buffer (get-buffer "*Python*"))
	(python-window (get-buffer-window "*Python*")))
    (if python-buffer
	(if python-window
	    (progn
	      (delete-window python-window)
	      (other-window 1))
	  (progn
	    (split-window-right)
	    (other-window 1)
	    (run-python)
	    (when (get-buffer "*Python*")
	      (switch-to-buffer "*Python*"))
	    (other-window 1)))
      (progn
	(split-window-right)
	(other-window 1)
	(run-python)
	(when (get-buffer "*Python*")
	  (switch-to-buffer "*Python*"))
	(other-window 1)))))

(setq display-buffer-alist
      '(("\\*compilation\\*"
	 (display-buffer-reuse-window display-buffer-at-bottom)
	 (window-height . 0.3))))


#+END_SRC

**** OPTIONALS

PYENV support for virtualenvs.

#+BEGIN_SRC emacs-lisp :tangle no
;;; PYENV

(use-package pyvenv
  :ensure t
  :defer t)

(defun pyvenv-autoload ()
  (require 'pyvenv)
  (require 'projectile)
  (interactive)
  "auto activate venv directory if exists"
  (f-traverse-upwards (lambda (path)
	(let ((venv-path (f-expand "env" path)))
	  (when (f-exists? venv-path)
	    (pyvenv-activate venv-path))))))
(add-hook 'python-mode 'pyvenv-autoload)


#+END_SRC

-----

* LATEX SETUP
This configuration sets up AUCTeX with RefTeX, citation management, LaTeX preview, and integration with PDF viewers.

** PDF TOOLS
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+BEGIN_SRC emacs-lisp
;;; PDF TOOLS

(use-package pdf-tools
  :ensure t
  :defer t
  :commands (pdf-loader-install)
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :custom
  (pdf-view-display-size 'fit-width)
  (pdf-annot-activate-created-annotations t)
  :bind (:map pdf-view-mode-map
	      ("j" . pdf-view-next-line-or-next-page)
	      ("k" . pdf-view-previous-line-or-previous-page)
	      ("C-=" . pdf-view-enlarge)
	      ("C--" . pdf-view-shrink)
	      ("C-s" . isearch-forward)
	      ("C-r" . isearch-backward))
  :init
  (pdf-loader-install)
  :hook (pdf-view-mode . (lambda ()
			   (display-line-numbers-mode -1)
			   (blink-cursor-mode -1)
			   (doom-modeline-mode -1)))
  :config
  (add-to-list 'revert-without-query ".pdf"))


#+END_SRC

** EPUB READER
I am using NOV to read EPUB files.

#+BEGIN_SRC emacs-lisp
;;; EPUB

(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-variable-pitch nil) ;; Use fixed-width font
  (setq nov-text-width t)) ;; Adjust text width dynamically
#+END_SRC

** LATEX PREVIW SETUP & SETTINGS

#+BEGIN_SRC emacs-lisp
;;; LATEX

(use-package tex
  :ensure auctex
  :defer t
  :mode ("\\.tex\\'" . LaTeX-mode)
  :hook
  ((LaTeX-mode . LaTeX-math-mode))  ; Enable math-mode shortcuts in LaTeX buffers.
  :config
  ;; Basic AUCTeX settings.
  (setq TeX-auto-save t
	TeX-parse-self t
	TeX-PDF-mode t
	TeX-save-query nil)
  ;; Integration with RefTeX.
  (setq reftex-plug-into-AUCTeX t)
  ;; Master file setup: default to main.tex if it exists; otherwise prompt.
  (setq-default TeX-master
		(lambda ()
		  (let ((default-master (concat (file-name-directory (or (buffer-file-name) default-directory))
						"main.tex")))
		    (if (file-exists-p default-master)
			"main.tex"
		      (progn
			(message "main.tex not found, please select a master file")
			(read-file-name "Choose master file: " nil nil t))))))
  ;; LaTeX indentation and electric settings.
  (setq LaTeX-indent-level 2
	LaTeX-item-indent 2
	TeX-electric-math '("$" . "$"))
  ;; LaTeX preview settings.
  (setq preview-auto-cache-preamble t
	TeX-show-compilation nil))

#+END_SRC

** REFTEX

#+BEGIN_SRC emacs-lisp
;;; REFTEX

(use-package reftex
  :ensure nil  ;; RefTeX is built-in
  :defer t
  :preface
  ;; Explicit autoloads if desired (usually not needed)
  (autoload 'reftex-mode "reftex" "RefTeX Minor Mode" t)
  (autoload 'turn-on-reftex "reftex" "RefTeX Minor Mode" nil)
  (autoload 'reftex-citation "reftex-cite" "Make citation" nil)
  (autoload 'reftex-index-phrase-mode "reftex-index" "Phrase mode" t)
  :hook (LaTeX-mode . turn-on-reftex)
  :config
  (setq reftex-plug-into-AUCTeX t
	reftex-enable-partial-scans t
	reftex-save-parse-info t
	reftex-use-multiple-selection-buffers t
	reftex-toc-split-windows-horizontally t
	reftex-toc-split-windows-fraction 0.2))


#+END_SRC

** PREVIEW (ZATHURA)

#+BEGIN_SRC emacs-lisp
;;; PREVIEW

(with-eval-after-load 'tex
  (add-to-list 'TeX-view-program-list
	       '("Zathura"
		 ("zathura "
		  (mode-io-correlate
		   " --synctex-forward %n:0:%b -x \"emacsclient +%{line} %{input}\" ")
		  " %o")
		 "zathura"))
  (setq TeX-view-program-selection '((output-pdf "Zathura"))
	TeX-source-correlate-start-server t)
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-method 'synctex))


#+END_SRC

** CITAR

#+BEGIN_SRC emacs-lisp
;;; CITAR

(use-package citar
  :ensure t
  :defer t
  :init
  (setq org-cite-insert-processor 'citar
	org-cite-follow-processor 'citar
	org-cite-activate-processor 'citar
	citar-bibliography org-cite-global-bibliography)
	;; citar-notes-paths '("~/Path/To/NotesDir")
	)

(use-package citar-embark
  :after (citar embark)
  :ensure t
  :defer t
  :init
  (setq citar-at-point-function 'embark-act)
  :config
  (citar-embark-mode 1))


#+END_SRC

** AUCTEX

#+BEGIN_SRC emacs-lisp
;;; AUCTEX

(use-package auctex-latexmk
  :ensure t
  :defer t
  :config
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))

(use-package cdlatex
  :ensure t
  :defer t
  :hook (LaTeX-mode . turn-on-cdlatex))


#+END_SRC

** ARCHIVES

*** Xenops
- TANGLE it if you want to use `xenops` (Alternative to Preview-Latex) for real-time LaTeX rendering.

#+BEGIN_SRC emacs-lisp :tangle no
;;; XENOPS

(use-package xenops
  :ensure t
  :defer t
  :hook (LaTeX-mode . xenops-mode)
  :config
  (setq xenops-render-on-save t))
(setq xenops-cache-directory (dir-concat user-cache-directory "xenops-cache"))


#+END_SRC

*** ADDITIONAL SETUP

#+BEGIN_SRC emacs-lisp :tangle no
;;; ============================================================
;;; Additional Preview Hooks (Optional)
;;; ============================================================
;; These hooks allow LaTeX fragment previews to be generated on file open
;; and automatically when saving the buffer. (Enable only if desired.)
(defun my-initial-preview ()
  "Generate preview for the current document.
This function is intended to be called on file open."
  (save-excursion
    (preview-document)))

(define-minor-mode my-preview-at-save-mode
  "Minor mode to preview LaTeX fragments on save."
  :init-value nil
  :global nil
  (if my-preview-at-save-mode
      (add-hook 'after-save-hook #'my-initial-preview nil t)
    (remove-hook 'after-save-hook #'my-initial-preview t)))

(with-eval-after-load 'preview
  ;; Add the preview functions to LaTeX-mode if the preview package is loaded.
  (add-hook 'LaTeX-mode-hook #'my-initial-preview t)
  (add-hook 'LaTeX-mode-hook #'my-preview-at-save-mode))

;;; PDF TOOLS FOR LATEX PREVIEW (ALTERNATIVE)

;;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
;;       TeX-source-correlate-start-server t)


#+END_SRC

-----

* MARKDOWN

** MARKDOWN SETUP
Markdown Preview in both Markdown buffers and Org preview in md formats using browser.

#+BEGIN_SRC emacs-lisp
;;; ============================================================
;;; MARKDOWN SETUP
;;; ============================================================

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode))

(eval-after-load "org"
  '(require 'ox-md nil t))

;; --------------------------------
;; OX-GFM FOR GITHUB-FLAVORED MARKDOWN EXPORT
;; --------------------------------
(use-package ox-gfm
  :ensure t
  :after org
  :defer t)

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist
	     '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))


#+END_SRC

** OX-HUGO
OX-HUGO is to convert org files into hugo supported markdown file

#+BEGIN_SRC emacs-lisp
;;; OX-HUGO

(use-package ox-hugo
  :ensure ( :host github
	      :repo "kaushalmodi/ox-hugo"
	      :branch "main")
  :after ox)

;; Function to insert the current date
(defun insert-current-date ()
  "Insert the current date in the format YYYY-MM-DD at the point."
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

;; Bind the function to C-c d in Org mode
(add-hook 'org-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c d") 'insert-current-date)))


#+END_SRC

** MARKDOWN PREVIEW MODE

#+BEGIN_SRC emacs-lisp
;;; MARKDOWN PREVIEW MODE

(use-package markdown-preview-mode
  :ensure t
  :commands (markdown-preview-mode
	     markdown-preview-open-browser
	     markdown-preview-cleanup)
  :init
  ;; Set your Markdown processor (by default it uses "markdown")
  ;; If you want to use multimarkdown, make sure it's installed and in your PATH.
  ;(setq markdown-command "multimarkdown")
  :config
  ;; Optional: add extra JavaScript (e.g., MathJax)
  (add-to-list 'markdown-preview-javascript
	       "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"))

;; Additional CSS
;; (setq markdown-preview-stylesheets
;;       (list "http://thomasf.github.io/solarized-css/solarized-light.min.css"))


#+END_SRC

** ARCHIVES

** IMPATIENT MODE

#+BEGIN_SRC emacs-lisp :tangle no
;;; IMPATIENT MODE

(use-package impatient-mode
  :ensure t
  :hook (web-mode . impatient-mode))


#+END_SRC

*** MARKDOWN LIVE PREVIEW

#+BEGIN_SRC emacs-lisp :tangle no
;;; MARKDOWN LIVE PREVIEW

;; --------------------------------
;; CUSTOM PACKAGE FOR MARKDOWN PREVIEW FUNCTIONS
;; - This dummy package holds our custom Markdown preview functions.
;; - It is deferred (i.e. not loaded at startup) and provides commands for
;;   live Markdown preview and Org Markdown preview.
;; --------------------------------

(defun markdown-html (buffer)
  "Render Markdown from BUFFER into GitHub-styled HTML with scroll preservation."
  (princ (with-current-buffer buffer
	   (format "<!DOCTYPE html>
<html>
<head>
  <meta charset=\"UTF-8\">
  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/he/1.1.1/he.js\"></script>
  <link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/github-e6bb18b320358b77abe040d2eb46b547.css\">
  <link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/frameworks-95aff0b550d3fe338b645a4deebdcb1b.css\">
  <script type=\"text/javascript\" async src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>
  <script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js\"></script>
  <title>Impatient Markdown</title>
  <script>
    // Restore scroll position on load
    document.addEventListener('DOMContentLoaded', function() {
      var saved = sessionStorage.getItem('imp-scroll');
      if (saved) {
	window.scrollTo(0, parseInt(saved, 10));
      }
      // Observe mutations and try to restore scroll if needed
      new MutationObserver(function() {
	var saved = sessionStorage.getItem('imp-scroll');
	if (saved) { window.scrollTo(0, parseInt(saved, 10)); }
      }).observe(document.body, {childList: true, subtree: true});
    });
    // Save scroll position on scroll
    window.addEventListener('scroll', function() {
      sessionStorage.setItem('imp-scroll', window.pageYOffset);
    });
  </script>
</head>
<body>
  <div id=\"markdown-content\" style=\"display:none\">%s</div>
  <div class=\"markdown-body\" style=\"max-width:968px;margin:0 auto;\"></div>
  <script>
    fetch('https://api.github.com/markdown', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ \"text\": document.getElementById('markdown-content').innerHTML, \"mode\": \"gfm\", \"context\": \"knit-pk/homepage-nuxtjs\" })
    }).then(response => response.text()).then(response => {
      document.querySelector('.markdown-body').innerHTML = he.decode(response);
      MathJax.typesetPromise();
    }).then(() => {
      fetch(\"https://gist.githubusercontent.com/FieryCod/b6938b29531b6ec72de25c76fa978b2c/raw/\")
      .then(response => response.text()).then(eval);
    });
  </script>
</body>
</html>"
		   (buffer-substring-no-properties (point-min) (point-max))))
	 (current-buffer)))


(defun markdown-preview-auto ()
  "Start HTTP server, enable `impatient-mode`, set user filter to `markdown-html`, and open preview."
  (interactive)
  ;; Start the HTTP server if not already running
  (unless (process-status "httpd")
    (httpd-start))
  ;; Enable impatient mode
  (impatient-mode 1)
  ;; Set the user filter function to render Markdown like GitHub
  (setq imp-user-filter #'markdown-html)
  ;; Refresh the impatient mode state
  (cl-incf imp-last-state)
  (imp--notify-clients)
  ;; Open the preview in the browser
  (browse-url "http://localhost:8080/imp"))


#+END_SRC

-----

* ORG MODE
This configuration sets up Org Agenda, auto-tangling, visual enhancements (bullets, centering, fonts), definitions, and advanced features such as Org Roam, Org-Tempo, and more. This also contains some of the programming modes using org mode such as latex and markdown.

** SETTINGS
Some settings that will make the UI look and feel more appealing(Personal) and also enhancing features in org mode.

*** TOC & INDENTATION
Allows us to create a Table of Contents in our Org docs. And also preserving Indentation on Org Bable Tangle

#+BEGIN_SRC emacs-lisp
;;; TOC & INDENTATION

(use-package toc-org
    :ensure t
    :defer t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

(setq org-src-preserve-indentation t)

;; Prevent '<>' from auto-pairing in Org mode (fix for org-tempo)
(add-hook 'org-mode-hook
	  (lambda ()
	    (setq-local electric-pair-inhibit-predicate
			`(lambda (c)
			   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(eval-after-load 'org-indent '(diminish 'org-indent-mode)) ;; Removes "Ind" from showing in the modeline.


#+END_SRC

*** UI
Some UI Settings

#+BEGIN_SRC emacs-lisp
;;; ORG UI SETTINGS

;; ORG MODERN PACKAGE
;;;; Better Looking Bullets
(use-package org-modern
  :ensure t
  :hook ((org-mode                 . org-modern-mode)
	 (org-agenda-finalize-hook . org-modern-agenda))
  :custom ((org-modern-todo t)
	   (org-modern-table nil)
	   (org-modern-variable-pitch nil)
	   (org-modern-block-fringe nil))
  :commands (org-modern-mode org-modern-agenda)
  :init (global-org-modern-mode))

(use-package org-transclusion
  :after org
  :bind ("C-c M-t" . org-transclusion-add))

(setq org-id-locations-file (concat user-emacs-directory ".cache/.org-id-locations"))

;; ORG CUSTOM HEADER FACES
(custom-set-faces
'(org-level-1 ((t (:inherit outline-1 :height 1.3))))
'(org-level-2 ((t (:inherit outline-2 :height 1.25))))
'(org-level-3 ((t (:inherit outline-3 :height 1.2))))
'(org-level-4 ((t (:inherit outline-4 :height 1.15))))
'(org-level-5 ((t (:inherit outline-5 :height 1.1))))
'(org-level-6 ((t (:inherit outline-5 :height 1.05))))
'(org-level-7 ((t (:inherit outline-5 :height 1.00)))))

;; ORG FONTS
(defun karna/org-colors-doom-one ()
 "Enable Doom One colors for Org headers."
 (interactive)
 (dolist
     (face
      '((org-level-1 1.7 "#51afef" ultra-bold)
	(org-level-2 1.6 "#c678dd" extra-bold)
	(org-level-3 1.5 "#98be65" bold)
	(org-level-4 1.4 "#da8548" semi-bold)
	(org-level-5 1.3 "#5699af" normal)
	(org-level-6 1.2 "#a9a1e1" normal)
	(org-level-7 1.1 "#46d9ff" normal)
	(org-level-8 1.0 "#ff6c6b" normal)))
   (set-face-attribute (nth 0 face) nil :font "Iosevka Comfy Motion" :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
 (set-face-attribute 'org-table nil :font "Iosevka Comfy Motion" :weight 'bold :height 1.0 :foreground "#bfafdf"))

;; (karna/org-colors-doom-one)


;;; ORG BULLETS -
;; Org-bullets gives us attractive bullets rather than asterisks.
;(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets :ensure t :defer t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


#+END_SRC

** ORG REMARKS
Lets you highlight text in org mode.

#+BEGIN_SRC emacs-lisp
;;; ORG REMARKS

(use-package org-remark
  :ensure t
  :bind (("C-c n m" . org-remark-mark)
	 ("C-c n l" . org-remark-mark-line)
	 :map org-remark-mode-map
	 ("C-c n o" . org-remark-open)
	 ("C-c n ]" . org-remark-view-next)
	 ("C-c n [" . org-remark-view-prev)
	 ("C-c n r" . org-remark-remove)
	 ("C-c n d" . org-remark-delete))
  :config
  (org-remark-global-tracking-mode +1)  ;; Moved inside :config to ensure `org-remark` is loaded
  ;; Optional modes
  (with-eval-after-load 'nov
    (org-remark-nov-mode +1))
  (with-eval-after-load 'info
    (org-remark-info-mode +1)))


#+END_SRC

** HIGHLIGHT TODO
Highlights the TODO keywords with different colors.

#+BEGIN_SRC emacs-lisp
;;; HIGHLIGHT TODO

(use-package hl-todo
  :ensure t
  :defer t
  :hook ((org-mode . hl-todo-mode)
	 (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
	hl-todo-keyword-faces
	`(("TODO"       warning bold)
	  ("FIXME"      error bold)
	  ("HACK"       font-lock-constant-face bold)
	  ("REVIEW"     font-lock-keyword-face bold)
	  ("NOTE"       success bold)
	  ("DEPRECATED" font-lock-doc-face bold))))


#+END_SRC

** Org-Tempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+BEGIN_SRC emacs-lisp
;;; ORG TEMPO

(require 'org-tempo)


#+END_SRC

** CENTER ORG MODE
Centering Org Mode to get ZEN mode feel.

#+BEGIN_SRC emacs-lisp
;;; CENTER ORG MODE

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 180
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))


#+END_SRC

** ORG AUTO TANGLE
org-auto-tangle allows you to add the option #+auto_tangle: t in your Org file so that it automatically tangles when you save the document.

#+BEGIN_SRC emacs-lisp
;;; ORG AUTO TANGLE

(use-package org-auto-tangle
  :defer t
  :diminish
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun karna/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (org-end-of-line)
  (newline)
  (insert "#+auto_tangle: t")
  (evil-force-normal-state))


#+END_SRC

** ORG MERMAID
Evaluate Mermaid code in org mode

#+BEGIN_SRC emacs-lisp
;;; ORG MERMAID

(use-package mermaid-mode
  :ensure t)

;; Install Mermaid CLI using - sudo npm install -g @mermaid-js/mermaid-cli
(use-package ob-mermaid
  :ensure t
  :config
  (setq ob-mermaid-cli-path "/usr/bin/mmdc") ;; Adjust this path to your mermaid-cli
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((mermaid . t))))


#+END_SRC

** ORG EVAL

#+BEGIN_SRC emacs-lisp
;;; ORG EVAL

(setq org-confirm-babel-evaluate nil
      org-babel-clojure-backend 'cider
      org-babel-lisp-eval-fn #'sly-eval
      org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sqlite . t) (haskell . t) (emacs-lisp . t) (shell . t) (python . t)
   (C . t) (lua . t) (dot . t) (java . t)
   (lisp . t) (clojure . t) (scheme . t)
   (forth . t) (R . t)))



#+END_SRC

** ORG DEFINITIONS
Defining some of the org variable settings

*** Org Mode Core Settings
This section sets up basic Org mode options such as the Org directory, default notes file, ellipsis, heading bullets, log settings, link abbreviations, table conversion limits, and todo keywords.

#+BEGIN_SRC emacs-lisp
;;; ORG MODE CORE SETTINGS

(setq org-directory "/mnt/Karna/Git/Project-K/Org/"
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
      org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
      org-log-done 'time
      org-hide-emphasis-markers t
      ;; ex. of org-link-abbrev-alist in action
      ;; [[arch-wiki:Name_of_Page][Description]]
      org-link-abbrev-alist
	'(("google" . "http://www.google.com/search?q=")
	  ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
	  ("ddg" . "https://duckduckgo.com/?q=")
	  ("wiki" . "https://en.wikipedia.org/wiki/"))
      org-table-convert-region-max-lines 20000)


(setq org-todo-keywords
      '((sequence "IDEA(i)"      ; Generate research ideas
		  "LIT(l)"       ; Conduct literature review
		  "CODE(c)"      ; Develop code/algorithms
		  "TEST(t)"      ; Test implementations or experiments
		  "WRITE(w)"     ; Document findings or draft manuscripts
		  "REVIEW(r)"    ; Revise based on feedback
		  "|"
		  "SUBMITTED(s)" ; Work submitted for review/publication
		  "PUBLISHED(p)" ; Work published (or defended)
		  "ABANDONED(x)") ; Project discontinued
	(sequence "TODO(T)"       ; Basic task: not yet started
		  "NEXT(n)"       ; Basic task: immediate next action
		  "|"
		  "DONE(d!)"))) ; Basic task: completed

(setq org-export-backends '(md org ascii html icalendar latex odt rss)
      org-export-with-toc nil)

;; Load export backends
(require 'ox-md)
(require 'ox-org)


#+END_SRC

*** Org Refiler Settings
This section configures the refile targets and ensures that Org buffers are saved after refile operations.

#+BEGIN_SRC emacs-lisp
;;; ORG REFILE SETTINGS

(setq org-bookmark-names-plist nil) ;; Stop bookmarking on org captures and refiling

(setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
	("Tasks.org" :maxlevel . 1)))

(setq org-hide-drawers '("PROPERTIES"))

;; Save Org buffers after refiling!
;; (advice-add 'org-refile :after 'org-save-all-org-buffers)


#+END_SRC

*** Org Archive Settings
This section defines a function to automatically archive done tasks and records the original file.

#+BEGIN_SRC emacs-lisp :tangle no
;;; ORG ARCHIVE SETTINGS

(advice-add 'org-refile :after (lambda (&rest _args) (org-save-all-org-buffers)))

;; 1. Configure your archive location.
(setq org-archive-location "Archive.org::* Archived")

;; 2. Function to auto-archive done tasks and record the original file.
(defun my/auto-archive-done-tasks ()
  "Automatically archive tasks marked as done (or submitted, published, abandoned).
Before archiving, store the original file in the ARCHIVE_ORIG property."
  (when (member org-state '("DONE" "SUBMITTED" "PUBLISHED" "ABANDONED"))
    ;; Only add ARCHIVE_ORIG if not already present.
    (unless (org-entry-get nil "ARCHIVE_ORIG")
      (org-entry-put nil "ARCHIVE_ORIG" (buffer-file-name)))
    (org-archive-subtree-default)))

;; 3. Function to refile an active (reactivated) task from Archive back to its origin.

(defun my/cleanup-archive-properties ()
  "Remove all ARCHIVE_* properties from the current entry."
  (dolist (prop '("ARCHIVE_ORIG" "ARCHIVE_TIME" "ARCHIVE_FILE" "ARCHIVE_OLPATH" "ARCHIVE_CATEGORY" "ARCHIVE_TODO"))
    (org-entry-delete nil prop)))

(defun my/auto-refile-active-from-archive ()
  "If an entry in Archive.org is reactivated (state changed to an active state),
automatically refile it back to its original file as stored in the ARCHIVE_ORIG
property, or to a default file (Tasks.org) if not available, and clean up archive properties."
  (when (and (string-match "Archive\\.org" (or (buffer-file-name) ""))
	     (not (member org-state '("DONE" "SUBMITTED" "PUBLISHED" "ABANDONED"))))
    (let* ((orig (org-entry-get nil "ARCHIVE_ORIG"))
	   (default-dir (if (and (boundp 'org-directory) org-directory)
			    org-directory
			  "~"))
	   (target (if (and orig (file-exists-p orig))
		       orig
		     (expand-file-name "Tasks.org" default-dir))))
      (if (and target (file-exists-p target))
	  (progn
	    ;; Temporarily set the refile target.
	    (let ((org-refile-targets `((,target :maxlevel . 1))))
	      (org-refile nil nil nil))
	    ;; Clean up all ARCHIVE_* properties.
	    (my/cleanup-archive-properties)
	    (message "Refiled reactivated entry back to %s" target))
	(message "Target file not found; refile aborted.")))))

;; 4. Add the functions to the appropriate hook.
(add-hook 'org-after-todo-state-change-hook 'my/auto-archive-done-tasks)
(add-hook 'org-after-todo-state-change-hook 'my/auto-refile-active-from-archive)



#+END_SRC

*** Org Tag Configuration
This section defines the tag list for Org entries. The commented lines are preserved for potential future adjustments.

#+BEGIN_SRC emacs-lisp
;;; ORG TAG CONFIGURATION

(setq org-tag-alist
      '((:startgroup)
	("@errand"   . ?E)
	("@home"     . ?H)
	("@lab"      . ?L)
	("@office"   . ?O)
	(:endgroup)
	("agenda"    . ?a)
	("planning"  . ?p)
	("note"      . ?n)
	("idea"      . ?i)
	("lit"       . ?l)   ; literature review
	("code"      . ?c)
	("test"      . ?t)
	("write"     . ?w)
	("review"    . ?r)
	("submitted" . ?s)
	("published" . ?P)   ; uppercase P differentiates from planning
	("abandoned" . ?x)
	("meeting"   . ?m)
	("reading"   . ?R)))


#+END_SRC

** AGENDA
This section configures Org Agenda by specifying agenda files, enabling log mode, setting logging behavior, and customizing agenda views.

*** BASICS
#+BEGIN_SRC emacs-lisp
;;; AGENDA BASICS

(setq org-agenda-files (directory-files-recursively org-directory "\\.org$") )

(setq org-agenda-start-with-log-mode t
      org-log-done 'time
      org-log-into-drawer t)

#+END_SRC

*** CUSTOM AGENDA SETTINGS
This section configures custom agenda views to help you manage tasks, including dashboards, next tasks, work tasks, low-effort actions, workflow statuses and fancy priorities.

#+BEGIN_SRC emacs-lisp

;;; CUSTOM AGENDA SETTINGS

;; Fancy Priorities Settings
(setq org-fancy-priorities-list '("🟥" "🟧" "🟨")
      org-priority-faces
      '((?A :foreground "#ff6c6b" :weight bold)  ; High priority (🟥)
	(?B :foreground "#98be65" :weight bold)  ; Medium priority (🟧)
	(?C :foreground "#c678dd" :weight bold)) ; Low priority (🟨)
      org-agenda-block-separator 8411)

;; Org Agenda Custom Commands
(setq org-agenda-custom-commands
      '(
	;; Dashboard: Agenda view + Next Tasks + Active Projects
	("d" "Dashboard"
	 ((agenda "" ((org-deadline-warning-days 7)))
	  (todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))
	  (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	;; Next Tasks: Focused view on tasks marked as NEXT
	("n" "Next Tasks"
	 ((todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))))

	;; Work & Location-Based Tasks: Filter tasks by location tags
	("w" "Work & Location Tasks"
	 ((tags-todo "+@lab")
	  (tags-todo "+@office")
	  (tags-todo "+@errand")
	  (tags-todo "+@home")))

	;; Low-Effort Tasks: Show NEXT tasks with low estimated effort
	("e" "Low-Effort Tasks"
	 ((tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
		     ((org-agenda-overriding-header "Low Effort Tasks")
		      (org-agenda-max-todos 20)
		      (org-agenda-files org-agenda-files)))))

	;; Unified Research Workflow
	("r" "Unified Research Workflow"
	 ((todo "IDEA"      ((org-agenda-overriding-header "Research Ideas")))
	  (todo "LIT"       ((org-agenda-overriding-header "Literature Review")))
	  (todo "CODE"      ((org-agenda-overriding-header "Development / Coding")))
	  (todo "TEST"      ((org-agenda-overriding-header "Testing / Experiments")))
	  (todo "WRITE"     ((org-agenda-overriding-header "Writing / Documentation")))
	  (todo "REVIEW"    ((org-agenda-overriding-header "Revision / Feedback")))
	  (todo "SUBMITTED" ((org-agenda-overriding-header "Submitted Work")))
	  (todo "PUBLISHED" ((org-agenda-overriding-header "Published Work")))
	  (todo "ABANDONED" ((org-agenda-overriding-header "Discontinued Projects")))))

	;; Priority-Based View: Unfinished tasks by custom priority tags
	("v" "Priority View"
	 ((tags "PRIORITY=\"A\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "High-Priority Tasks")))
	  (tags "PRIORITY=\"B\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "Medium-Priority Tasks")))
	  (tags "PRIORITY=\"C\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "Low-Priority Tasks")))
	  (agenda "")
	  (alltodo "")))))


  #+END_SRC

** ORG ROAM & JOURNAL CONFIGURATION
This section sets up Org Roam for advanced note-taking and integrates Org Journal and dailies. The configuration includes custom capture templates for different note types.

*** Org Roam Setup
This part uses `use-package` to load Org Roam, enables v2 features, auto-sync, and completion everywhere.
The custom capture templates allow you to quickly create new notes for default entries, programming languages, book notes, and projects.

#+BEGIN_SRC emacs-lisp
;;; ORG ROAM SETUP

(use-package org-roam
  :ensure t
  :defer t
  :init
  (setq org-roam-v2-ack t)   ; Acknowledge the v2 upgrade message
  :custom
  (org-roam-db-autosync-mode)           ; Automatically sync the Org Roam database
  (org-roam-completion-everywhere t)     ; Enable completion everywhere
  ;; (org-roam-dailies-capture-templates
  ;;     '(("d" "default" entry "* %<%I:%M %p>: %?"
  ;;        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     ("l" "programming language" plain
      "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n")
      :unnarrowed t)
     ("b" "book notes" plain
      (file "/mnt/Karna/Git/Project-K/Org/Templates/BooknoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n#+filetags: Project")
      :unnarrowed t)))
  :config
  (org-roam-setup))


#+END_SRC

*** Org Roam Directories & Graph Viewer
These settings define where Org Roam files and dailies are stored, and set the graph viewer program.

#+BEGIN_SRC emacs-lisp
;;; ORG ROAM DIRECTORIES & GRAPH VIEWER

(with-eval-after-load 'org
  (setq org-roam-directory "/mnt/Karna/Git/Project-K/Org/Roam/"
	org-roam-graph-viewer "/usr/bin/zen-browser"))

(setq org-roam-dailies-directory "/mnt/Karna/Git/Project-K/Org/Journal/")


#+END_SRC

*** Org Journal Setup
This configuration sets up Org Journal with custom date/time prefixes, file format, and directory.

#+BEGIN_SRC emacs-lisp
;;; ORG JOURNAL SETUP

(setq org-journal-dir "/mnt/Karna/Git/Project-K/Org/Journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")


#+END_SRC

*** Org Roam Database Location
This ensures the Org Roam database is stored in the specified location.

#+BEGIN_SRC emacs-lisp
;;; ORG ROAM DATABASE LOCATION

(setq org-roam-db-location "/mnt/Karna/Git/Project-K/Org/Roam/org-roam.db")


#+END_SRC

** Org LaTeX Preview and Citation Configuration

This section configures LaTeX preview settings in Org mode, including the LaTeX compiler, custom classes, live previews, and integration with citation and Markdown export packages.

*** LATEX COMPILER & BASIC PREVIEW SETTINGS
- Sets the LaTeX compiler to use xelatex.
- Enables the use of listings.
- Configures the default LaTeX preview process to use dvisvgm.

#+BEGIN_SRC emacs-lisp
;;; LATEX COMPILER & BASIC PREVIEW SETTINGS

(setq org-latex-compiler "xelatex")
(setq org-latex-listings t)
(setq org-latex-preview-process-default 'dvisvgm)


#+END_SRC

*** CUSTOM LATEX CLASSES
- Adds a custom LaTeX class ("org-plain-latex") for exporting Org documents.

#+BEGIN_SRC emacs-lisp
;;; CUSTOM LATEX CLASSES FOR ORG EXPORT

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("org-plain-latex"
		 "\\documentclass{article}
	       [NO-DEFAULT-PACKAGES]
	       [PACKAGES]
	       [EXTRA]"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))


#+END_SRC

*** AUTO IGNORE COMMANDS
- Prevents certain navigation commands (e.g., next-line, previous-line) from triggering previews.

#+BEGIN_SRC emacs-lisp
;;; AUTO IGNORE COMMANDS

(setq org-latex-preview-auto-ignored-commands
      '(next-line previous-line mwheel-scroll
	scroll-up-command scroll-down-command))


#+END_SRC

*** UI SETTINGS
- Enables consistent equation numbering.
- Enables live previews for LaTeX fragments.
- Sets a more immediate debounce delay for live previews.

#+BEGIN_SRC emacs-lisp
;;; UI SETTINGS

(setq org-latex-preview-numbered t)
(setq org-latex-preview-live t)
(setq org-latex-preview-live-debounce 0.25)


#+END_SRC

*** ORG FRAGTOP
- Automatically toggles LaTeX fragment previews when editing Org files.

#+BEGIN_SRC emacs-lisp
;;; ORG FRAGTOP

(use-package org-fragtog
  :ensure t
  :defer t)
(add-hook 'org-mode-hook 'org-fragtog-mode)


#+END_SRC

*** ORG LATEX FRAGMENT SCALE
- Sets the scale factor for rendered LaTeX fragments.

#+BEGIN_SRC emacs-lisp
;;; LATEX FRAGMENT SCALE

(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))


#+END_SRC

*** CITATION AND BIBLIOGRAPHY INTEGRATION
- Loads citeproc for citation formatting.
- Requires additional citation backends (oc-csl, oc-biblatex, oc-natbib).
- Uncomment and adjust the bibliography path if needed.

#+BEGIN_SRC emacs-lisp
;;; CITATION

(use-package citeproc
  :ensure t
  :defer t)

(require 'oc-csl)
(require 'oc-biblatex)
(require 'oc-natbib)
;; (setq org-cite-global-bibliography '("~/Path/To/bibliographyFile"))


#+END_SRC

-----

* SHELLS AND TERMINALS
I use ESHELL and VTERM as default terminal and shell in Emacs.

** ESHELL
Eshell is an Emacs 'shell' that is written in Elisp.

#+BEGIN_SRC emacs-lisp
;;; ESHELL

(setopt eshell-prompt-function 'fancy-shell)
(setopt eshell-prompt-regexp "^[^#$\n]* [$#] ")
(setopt eshell-highlight-prompt nil)

;; Disabling company mode in eshell, because it's annoying.
(setq company-global-modes '(not eshell-mode))

;; Adding a keybinding for 'pcomplete-list' on F9 key.
(add-hook 'eshell-mode-hook
	  (lambda ()
	    (define-key eshell-mode-map (kbd "<f9>") #'pcomplete-list)))


;; A function for easily creating multiple buffers of 'eshell'.
;; NOTE: `C-u M-x eshell` would also create new 'eshell' buffers.
(defun eshell-new (name)
  "Create new eshell buffer named NAME."
  (interactive "sName: ")
  (setq name (concat "$" name))
  (eshell)
  (rename-buffer name))

(use-package eshell-toggle
  :ensure t
  :defer t
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
	eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
	eshell-history-size 5000
	eshell-buffer-maximum-lines 5000
	eshell-hist-ignoredups t
	eshell-scroll-to-bottom-on-input t
	eshell-destroy-buffer-when-process-dies t
	eshell-visual-commands'("bash" "zsh" "htop" "ssh" "top" "fish"))


#+END_SRC

** VTERM
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+BEGIN_SRC emacs-lisp
;;; VTERM

(use-package vterm
:ensure t
:defer t
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))


#+END_SRC

** VTERM TOGGLE
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+BEGIN_SRC emacs-lisp
;;; VTERM TOGGLE

(use-package vterm-toggle
  :after vterm
  :ensure t
  :defer t
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		  (display-buffer-reuse-window display-buffer-at-bottom)
		  ;;(display-buffer-reuse-window display-buffer-in-direction)
		  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		  ;;(direction . bottom)
		  ;;(dedicated . t) ;dedicated is supported in emacs27
		  (reusable-frames . visible)
		  (window-height . 0.4))))


#+END_SRC

-----

* YASNIPPET
Yasnippet is a snippet manager for Emacs.

#+BEGIN_SRC emacs-lisp
;;; YASNIPPET

(use-package yasnippet-snippets :ensure t :defer t :after yasnippet)

(use-package yasnippet
:ensure t
:diminish
:defer t
:config
(yas-global-mode 1)
(yas-reload-all)
(add-hook 'prog-mode-hook 'yas-minor-mode)
(add-hook 'text-mode-hook 'yas-minor-mode))


;;; yasnippet-capf
(use-package yasnippet-capf
  :after cape yasnippet
  :config
  ;; enable yasnippet-capf everywhere
  (progn
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
  ;; integrate yasnippet-capf with eglot completion
  (progn
    (defun my/eglot-capf-with-yasnippet ()
      (setq-local completion-at-point-functions
		  (list
		   (cape-capf-super
		    #'eglot-completion-at-point
		    #'yasnippet-capf))))
    (with-eval-after-load 'eglot
      (add-hook 'eglot-managed-mode-hook #'my/eglot-capf-with-yasnippet))))

(setq completion-auto-select-single-candidate nil)
(setq completion-auto-commit nil)

;; Bind a key for manual snippet insertion:
(global-set-key (kbd "C-c y") #'yas-insert-snippet)

#+END_SRC

-----

* CALENDAR
Let’s make a 12-month calendar available so we can have a calendar app that, we get a nice 12-month calendar to view.
This is a modification of: http://homepage3.nifty.com/oatu/emacs/calendar.html
  See also: https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months - Copied from DISTROTUBE

#+BEGIN_SRC emacs-lisp
;;; CALENDAR

;; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months

(use-package calfw :ensure t :defer t)
(use-package calfw-org :ensure t :defer t)
;;(use-package calendar)

(defun karna/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
	(calendar-generate-month
	  (setq month (+ month 1))
	  year
	  ;; indentation / spacing between months
	  (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun karna/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
	      (year (+ displayed-year arg)))
	(karna/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun karna/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		     last-nonmenu-event))
  (karna/scroll-year-calendar-forward (- (or arg 1)) event))

(defalias 'year-calendar 'karna/year-calendar)


#+END_SRC

-----

* ARCHIVES
Here are some of my old alternatives to some of the above packages or the packages that I am not using right now.

** NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp :tangle no
;;; NEOTREE

(use-package neotree
  :config
  (setq neo-smart-open t
	neo-show-hidden-files t
	neo-window-width 35
	neo-window-fixed-size nil
	inhibit-compacting-font-caches t
	projectile-switch-project-action 'neotree-projectile-action)
	;; truncate long file names in neotree
	(add-hook 'neo-after-create-hook
	   #'(lambda (_)
	       (with-current-buffer (get-buffer neo-buffer-name)
		 (setq truncate-lines t)
		 (setq word-wrap nil)
		 (make-local-variable 'auto-hscroll-mode)
		 (setq auto-hscroll-mode nil)))))


#+END_SRC

** CENTAUR TABS
[[https://github.com/ema2159/centaur-tabs][Centaur Tabs]] is an Emacs package that enhances the tab bar functionality, providing a more visually appealing and user-friendly way to manage multiple open buffers (files) within the editor.

#+BEGIN_SRC emacs-lisp :tangle no
;;; CENTAUR TABS - TAB BAR

(use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)

:config
;; Appearance settings
(setq centaur-tabs-style "bar"
      centaur-tabs-height 25
      centaur-tabs-set-icons t
      centaur-tabs-show-new-tab-button t
      centaur-tabs-set-modified-marker t
      centaur-tabs-modified-marker "•"
      centaur-tabs-show-navigation-buttons t
      centaur-tabs-set-bar 'over
      centaur-tabs-show-count nil
      centaur-tabs-label-fixed-length 15
      centaur-tabs-gray-out-icons 'buffer
      x-underline-at-descent-line t
      centaur-tabs-left-edge-margin nil)

;; Hide specific buffers
(setq centaur-tab-buffer-local-list '(("\*scratch\*" :hide t)
				      ("\*Warnings\*" :hide t)
				      ("\*straight-process\*" :hide t)
				      ("\*Messages\*" :hide t)
				      ("Tasks.org" :hide t)))

;; Font and style adjustments
(centaur-tabs-change-fonts (face-attribute 'default :font) 110)
(centaur-tabs-headline-match)

;; Buffer naming behavior
(setq uniquify-separator "/"
      uniquify-buffer-name-style 'forward)

;; Custom buffer grouping
(defun my/centaur-tabs-buffer-groups ()
  "Define custom buffer groups for Centaur Tabs."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
	 (memq major-mode '(magit-process-mode
			    magit-status-mode
			    magit-diff-mode
			    magit-log-mode
			    magit-file-mode
			    magit-blob-mode
			    magit-blame-mode)))
     "Emacs")
    ((derived-mode-p 'prog-mode)
     "Editing")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(helpful-mode
			help-mode))
     "Help")
    ((memq major-mode '(org-mode
			org-agenda-clockreport-mode
			org-src-mode
			org-agenda-mode
			org-beamer-mode
			org-indent-mode
			org-bullets-mode
			org-cdlatex-mode
			org-agenda-log-mode
			diary-mode))
     "OrgMode")
    ;; ((member (buffer-name) '("*scratch*" "*Messages*" "*dashboard*" "*eww*")) "All")
    ((string-equal "newsrc-dribble" (buffer-name)) "Others")
    ((derived-mode-p 'gnus-mode) "All")
    ((eq major-mode 'message-mode) "All")
    ((string-match "org.*sidebar" (buffer-name)) "Others")
    ((string-match "<tree>" (buffer-name)) "Others")
    ((string-match "^TAGS.*" (buffer-name)) "Others")
    ((eq major-mode 'dired-mode) "Dired")
    (t "All"))))
(setq centaur-tabs-buffer-groups-function #'my/centaur-tabs-buffer-groups)

;; Enable centaur-tabs-mode
(centaur-tabs-mode t)

;; Keybindings
:bind
("C-<prior>" . centaur-tabs-backward)
("C-<next>" . centaur-tabs-forward)
("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
("C-S-<next>" . centaur-tabs-move-current-tab-to-right)
(:map evil-normal-state-map
      ("g t" . centaur-tabs-forward)
      ("g T" . centaur-tabs-backward))

;; Hooks
:hook
(dashboard-mode . centaur-tabs-local-mode)
(term-mode . centaur-tabs-local-mode)
(calendar-mode . centaur-tabs-local-mode)
(org-agenda-mode . centaur-tabs-local-mode))

;; Custom tab switching function
(defun my/switch-tabs (&optional direction cycle-group)
  "Change tabs in the given direction (left or right). Cycle within the same group unless cycle-group is non-nil."
  (interactive)
  (let* ((keys (mapcar #'event-basic-type (this-command-keys-vector)))
	 (direction (or direction (if (or (member 'left keys) (member 'home keys)) 'left 'right)))
	 (centaur-tabs-cycle-scope (if cycle-group 'groups (if (> (length keys) 1) 'groups 'tabs))))
    (if (eq window-system 'mac)
	(mac-start-animation (selected-window) :type 'swipe :direction direction))
    (centaur-tabs-cycle (eq direction 'left))))

;; Keybindings for tab switching
(keymap-global-set "C-M-<right>" #'my/switch-tabs)
(keymap-global-set "C-M-<left>" #'my/switch-tabs)


#+END_SRC

-----

* GENERAL KEYBINDINGS
List of all the keybinds that are used in my Emacs Config.

#+BEGIN_SRC emacs-lisp
;;; KEYBINDINGS

(use-package evil-nerd-commenter
  :ensure t
  :defer t)

(use-package general
  :ensure t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer karna/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (karna/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "/" '(evilnc-comment-or-uncomment-lines :wk "Toggle Comments")
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))

   (karna/leader-keys
    "a" '(:ignore t :wk "A.I.")
    "a a" '(ellama-ask-about :wk "Ask ellama about region")
    "a c" '(:prefix "c" :wk "Code")
    "a c a" '(ellama-code-add :wk "Ellama code add")
    "a c c" '(ellama-code-complete :wk "Ellama code complete")
    "a c e" '(ellama-code-edit :wk "Ellama code edit")
    "a c i" '(ellama-code-improve :wk "Ellama code improve")
    "a c r" '(ellama-code-review :wk "Ellama code review")
    "a e" '(:ignore t :wk "Ellama enhance")
    "a e g" '(ellama-improve-grammar :wk "Ellama enhance wording")
    "a e w" '(ellama-improve-wording :wk "Ellama enhance grammar")
    "a i" '(ellama-chat :wk "Ask ellama")
    "a p" '(ellama-provider-select :wk "Ellama provider select")
    "a s" '(ellama-summarize :wk "Ellama summarize region")
    "a t" '(ellama-translate :wk "Ellama translate region"))

  (karna/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b I" '(consult-buffer :wk "Preview buffers")
    "b i" '(persp-switch-to-buffer* :wk "Persp Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  ;; (karna/leader-keys
  ;;   "c" '(:ignore t :wk "Centaur Tabs")
  ;;   "c n" '(centaur-tabs-forward-tab :wk "Next Tab")
  ;;   "c p" '(centaur-tabs-backward-tab :wk "Previous Tab")
  ;;   "c c" '(centaur-tabs-close-tab :wk "Close Tab")
  ;;   "c r" '(centaur-tabs-rename-tab :wk "Rename Tab")
  ;;   "c l" '(centaur-tabs-list-tabs :wk "List Tabs")
  ;;   "c m" '(centaur-tabs-move-current-tab-to-left :wk "Move Tab Left")
  ;;   "c <left>" '(karna/scroll-year-calendar-backward :wk "Scroll year calendar backward")
  ;;   "c <right>" '(karna/scroll-year-calendar-forward :wk "Scroll year calendar forward")
  ;;   "c y" '(karna/year-calendar :wk "Show year calendar")
  ;;   "c t" '(centaur-tabs-move-current-tab-to-right :wk "Move Tab Right"))


  (karna/leader-keys
    "c"  '(:ignore t :wk "Consult")
    ;; Buffer-related commands
    "c b" '(consult-buffer         :wk "Switch Buffer")

    ;; File-related commands
    "c d" '(:prefix "d"             :wk "Consult Directory")
    "c d f" '(consult-dir           :wk "Find Directory")
    "c d j" '(consult-dir-jump-file :wk "Jump to a directory")
    "c f" '(consult-fd           :wk "Find File")
    "c r" '(consult-recent-file    :wk "Recent Files")

    ;; Search commands
    "c l" '(consult-line           :wk "Search Lines")
    "c g" '(consult-grep           :wk "Grep Search")
    "c p" '(consult-ripgrep        :wk "Ripgrep Search")

    ;; Navigation commands
    "c i" '(consult-imenu          :wk "Imenu")
    "c o" '(consult-outline        :wk "Outline")

    ;; Other commands
    "c m" '(consult-man            :wk "Man Pages")
    "c k" '(consult-bookmark       :wk "Bookmarks")
    "c y" '(karna/year-calendar    :wk "Show year calendar"))

    (karna/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d f" '(wdired-finish-edit :wk "Writable dired finish edit")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(treemacs-find-file :wk "Open file in Treemacs")
    ;; "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired")
    "d w" '(wdired-change-to-wdired-mode :wk "Writable dired")

    ;; New prefix for favorite directories
    "d o" '(:ignore t :wk "Favorite Directories")
    "d o p" `((lambda () (interactive) (dired "/mnt/Karna/Git/portfolio/")) :wk "Open Portfolio")
    "d o P" `((lambda () (interactive) (dired "/mnt/Karna/Git/Project-K/")) :wk "Open Project-K")
    "d o h" `((lambda () (interactive) (dired "~")) :wk "Open Home")
    )

  (karna/leader-keys
    "e" '(:ignore t :wk "Ediff/Eshell/Eval/EWW")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e f" '(ediff-files :wk "Run ediff on a pair of files")
    "e F" '(ediff-files3 :wk "Run ediff on three files")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e n" '(eshell-new :wk "Create new eshell buffer")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (karna/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
	      (find-file "~/.emacs.d/config.org"))
	    :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
	      (dired "~/.emacs.d/"))
	    :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f m" '(ian/format-code :wk "Format Buffer")
    "f g" '(consult-ripgrep :wk "Search for string current file")
    "f i" '((lambda () (interactive)
	      (find-file "~/dotfiles/install.sh"))
	    :wk "Open dotfiles install.sh")
    "f j" '(consult-dir-jump-file :wk "Jump to a file below current directory")
    "f l" '(consult-locate :wk "Locate a file")
    "f r" '(consult-recent-file :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (karna/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

 (karna/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		(ignore (elpaca-process-queues)))
		 ;; (karna/org-colors-doom-one) ;; Reapply colors after reloading
	    :wk "Reload emacs config"r)
    "h t" '(consult-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (karna/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (karna/leader-keys
    "i" '(:ignore t :wk "Custom")
    "i a" '(karna/insert-auto-tangle-tag :wk "Insert auto-tangle tag"))

  (karna/leader-keys
    "q" '(:ignore t :wk "Quit")
    "q q" '(evil-quit :wk " Quit Emacs"))

  (karna/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (karna/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (karna/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o p" '(open-python-right-side :wk "Open Python REPL")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  ;; projectile-command-map already has a ton of bindings
  ;; set for us, so no need to specify each individually.
  (karna/leader-keys
    "p" '(projectile-command-map :wk "Projectile")
    "P a" '(projectile-add-known-project :wk "Add root to known projects"))

  (karna/leader-keys
    "P" '(projectile-command-map :wk "Custom Previews")
    "P m" '(markdown-preview-mode :wk "Preview Markdown Document"))

  (karna/leader-keys
    "r" '(:ignore t :wk "Org-roam")
    "r c" '(completion-at-point :wk "Completion at point")
    "r f" '(org-roam-node-find :wk "Find node")
    "r g" '(org-roam-graph :wk "Show graph")
    "r t" '(org-roam-dailies-goto-today :wk "Show today note")
    "r i" '(org-roam-node-insert :wk "Insert node")
    "r n" '(org-roam-capture :wk "Capture to node")
    "r d" '(:prefix "d" :wk "Dailies")
    "r d c" '(:prefix "c" :wk "Capture")
    "r d c c" '(org-roam-dailies-capture-today :wk "Capture Today")
    "r d c y" '(org-roam-dailies-capture-yesterday :wk "Capture Yesterday")
    "r d c t" '(org-roam-dailies-capture-tomorrow :wk "Capture Tomorrow")
    "r d c d" '(org-roam-dailies-capture-date :wk "Capture Specific Date")
    "r d g" '(:prefix "g" :wk "Go to")
    "r d g g" '(org-roam-dailies-goto-today :wk "Go to Today")
    "r d g y" '(org-roam-dailies-goto-yesterday :wk "Go to Yesterday")
    "r d g t" '(org-roam-dailies-goto-tomorrow :wk "Go to Tomorrow")
    "r d g d" '(org-roam-dailies-goto-date :wk "Go to Specific Date")
    "r d g n" '(org-roam-dailies-goto-next-note :wk "Go to Next Date")
    "r d g d" '(org-roam-dailies-goto-previous-note :wk "Go to Previous Date")
    "r s" '(org-id-get-create :wk "Create Small node inside buffer")
    "r a" '(org-roam-alias-add :wk "Create alias for a roam")
    "r r" '(org-roam-buffer-toggle :wk "Toggle roam buffer"))


  (karna/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s s" '(occur :wk "Search buffer")
    "s p" '(pdf-occur :wk "Pdf search lines matching STRING")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s r" '(query-replace :wk "Search and replace")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (karna/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t c" '(company-mode :wk "Toggle Company Mode")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t h" '(my/toggle-ef-theme :wk "Toggle ef-themes")
    "t n" '(treemacs :wk "Toggle Treemacs")
    ;;"t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(tabnine-mode :wk "Toggle Tabnine mode")
    "t T" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (karna/leader-keys
    "w" '(:ignore t :wk "Windows/Words")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    "w <left>" '(evil-window-left :wk "Window left")
    "w <down>" '(evil-window-down :wk "Window down")
    "w <up>" '(evil-window-up :wk "Window up")
    "w <right>" '(evil-window-right :wk "Window right")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right")
    ;; Words
    "w d" '(downcase-word :wk "Downcase word")
    "w u" '(upcase-word :wk "Upcase word")
    "w =" '(count-words :wk "Count words/lines for buffer"))
)

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") nil)
(global-set-key (kbd "<C-wheel-down>") nil)
(global-set-key (kbd "C-a") 'mark-whole-buffer) ;; Selects whole buffer to copy/delete

;; Binds `C-s` to compile and view the latex preview document.
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-s") #'TeX-command-run-all)))


#+END_SRC
