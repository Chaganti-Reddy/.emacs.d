#+TITLE: GNU Emacs Config
#+AUTHOR: Karna
#+auto_tangle: t
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:3

* TABLE OF CONTENTS :toc:
- [[#package-manager-setup][PACKAGE MANAGER SETUP]]
- [[#core-configuration][CORE CONFIGURATION]]
  - [[#hooks--cache][HOOKS & CACHE]]
  - [[#ui-tweaks][UI TWEAKS]]
  - [[#garbage-collection][GARBAGE COLLECTION]]
  - [[#native-compile][NATIVE COMPILE]]
  - [[#byte-compilation][BYTE COMPILATION]]
  - [[#async][ASYNC]]
- [[#editor-settings][EDITOR SETTINGS]]
  - [[#custom][CUSTOM]]
  - [[#backup-settings][BACKUP SETTINGS]]
  - [[#format-all][FORMAT ALL]]
  - [[#undo-fu][UNDO FU]]
  - [[#jarchive][JARCHIVE]]
  - [[#breadcrumb][BREADCRUMB]]
  - [[#diminish][DIMINISH]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
  - [[#drag-stuff][DRAG-STUFF]]
  - [[#some-extra-stuff][SOME EXTRA STUFF]]
  - [[#highlight-indentation-guides][HIGHLIGHT INDENTATION GUIDES]]
  - [[#flycheck][FLYCHECK]]
  - [[#wakatime][WAKATIME]]
- [[#load-evil-mode][LOAD EVIL MODE]]
- [[#which-key][WHICH KEY]]
- [[#ui-configurations][UI CONFIGURATIONS]]
  - [[#themes][THEMES]]
  - [[#fonts][FONTS]]
  - [[#icons][ICONS]]
  - [[#beacon][BEACON]]
- [[#dashboard][DASHBOARD]]
- [[#modeline][MODELINE]]
- [[#projectile][PROJECTILE]]
- [[#perspective][PERSPECTIVE]]
- [[#minibuffer][MINIBUFFER]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#archives][ARCHIVES]]
- [[#consult][Consult]]
- [[#completions][COMPLETIONS]]
  - [[#corfu][CORFU]]
  - [[#cape][CAPE]]
  - [[#orderless-smart-matching-for-completions][Orderless (Smart Matching for Completions)]]
  - [[#tabnine][TABNINE]]
  - [[#yasnippet][YASNIPPET]]
  - [[#consult-yasnippet][CONSULT YASNIPPET]]
  - [[#archives-1][ARCHIVES]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
  - [[#ediff][EDIFF]]
- [[#gptel][GPTEL]]
- [[#ellama][ELLAMA]]
- [[#calc][CALC]]
- [[#file-manager-and-buffers-setup][FILE MANAGER AND BUFFERS SETUP]]
  - [[#treemacs][TREEMACS]]
  - [[#dired][DIRED]]
  - [[#peep-dired][PEEP DIRED]]
  - [[#sudo-edit][SUDO EDIT]]
- [[#development][DEVELOPMENT]]
  - [[#treesitter][TREESITTER]]
  - [[#eglot][EGLOT]]
  - [[#conda][CONDA]]
  - [[#pyenv][PYENV]]
- [[#latex-setup][LATEX SETUP]]
  - [[#pdf-tools][PDF TOOLS]]
  - [[#epub-reader][EPUB READER]]
  - [[#latex-previw-setup--settings][LATEX PREVIW SETUP & SETTINGS]]
  - [[#reftex][REFTEX]]
  - [[#preview-zathura][PREVIEW (ZATHURA)]]
  - [[#citar][CITAR]]
  - [[#auctex-latexmk][AUCTEX-LATEXMK]]
  - [[#magic-latex-buffer][MAGIC LATEX BUFFER]]
  - [[#preview-auto][PREVIEW AUTO]]
  - [[#xenops][Xenops]]
  - [[#archives-2][ARCHIVES]]
- [[#org-latex][ORG LATEX]]
  - [[#latex-compiler--basic-preview-settings][LATEX COMPILER & BASIC PREVIEW SETTINGS]]
  - [[#custom-latex-classes][CUSTOM LATEX CLASSES]]
  - [[#org-latex-preview][ORG LATEX PREVIEW]]
  - [[#citation-and-bibliography-integration][CITATION AND BIBLIOGRAPHY INTEGRATION]]
  - [[#archives-3][ARCHIVES]]
- [[#markdown][MARKDOWN]]
  - [[#markdown-setup][MARKDOWN SETUP]]
  - [[#ox-hugo][OX-HUGO]]
  - [[#markdown-preview-mode][MARKDOWN PREVIEW MODE]]
  - [[#markdown-latex-preview][MARKDOWN LATEX PREVIEW]]
  - [[#archives-4][ARCHIVES]]
  - [[#impatient-mode][IMPATIENT MODE]]
- [[#org-mode][ORG MODE]]
  - [[#settings][SETTINGS]]
  - [[#org-remarks][ORG REMARKS]]
  - [[#highlight-todo][HIGHLIGHT TODO]]
  - [[#org-tempo][Org-Tempo]]
  - [[#center-org-mode][CENTER ORG MODE]]
  - [[#org-auto-tangle][ORG AUTO TANGLE]]
  - [[#org-mermaid][ORG MERMAID]]
  - [[#org-eval][ORG EVAL]]
  - [[#org-definitions][ORG DEFINITIONS]]
  - [[#agenda][AGENDA]]
  - [[#org-roam--journal-configuration][ORG ROAM & JOURNAL CONFIGURATION]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][ESHELL]]
  - [[#vterm][VTERM]]
  - [[#vterm-toggle][VTERM TOGGLE]]
  - [[#vterm-multi][VTERM MULTI]]
- [[#calendar][CALENDAR]]
- [[#centaur-tabs][CENTAUR TABS]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#load-config-files][LOAD CONFIG FILES]]

* PACKAGE MANAGER SETUP
  I am using [[https://github.com/progfolio/elpaca][Elpaca]] as my package manager which is very fast and asynchronous package manager.

#+BEGIN_SRC emacs-lisp :tangle lisp/elpaca.el
;;; elpaca.el --- Package Manager Setup -*- lexical-binding: t; -*-

(defvar elpaca-installer-version 0.9)
(defvar elpaca-directory (expand-file-name "elpaca/" "~/.local/share/git/"))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			      :ref nil :depth 1 :inherit ignore
			      :files (:defaults "elpaca-test.el" (:exclude "extensions"))
			      :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
	(if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						  ,@(when-let* ((depth (plist-get order :depth)))
						      (list (format "--depth=%d" depth) "--no-single-branch"))
						  ,(plist-get order :repo) ,repo))))
		  ((zerop (call-process "git" nil buffer t "checkout"
					(or (plist-get order :ref) "--"))))
		  (emacs (concat invocation-directory invocation-name))
		  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					"--eval" "(byte-recompile-directory \".\" 0 'force)")))
		  ((require 'elpaca))
		  ((elpaca-generate-autoloads "elpaca" repo)))
	    (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	  (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))


(provide 'elpaca-setup)
;;; elpaca-setup.el ends here
#+END_SRC

-----

* CORE CONFIGURATION
  Core configurations such as UI tweakings, hooks, directories, garbage management, etc.

** HOOKS & CACHE
   Adding some startup hooks and changing the cache directories for some modes in Emacs.

#+BEGIN_SRC emacs-lisp :tangle lisp/hooks-dirs.el
;;; hooks-dirs.el --- Hooks and Cache Dirs Settings -*- lexical-binding: t; -*-

(add-hook 'after-init-hook #'global-auto-revert-mode)  ;; Automatically refresh buffers
(add-hook 'after-init-hook #'recentf-mode)             ;; Track recently opened files
(add-hook 'after-init-hook #'savehist-mode)            ;; Preserve minibuffer history
(add-hook 'after-init-hook #'save-place-mode)          ;; Remember cursor positions

;;----------------------------------------------------------------------------
;; Custom Directories for Cache Files
;;----------------------------------------------------------------------------

(defun dir-concat (dir file)
  (concat (file-name-as-directory dir) file))

;; Define the cache directory for Emacs files.
(defvar user-cache-directory "~/.cache/emacs/"
  "Directory for files created by Emacs.")

;; Set the file to save cursor positions.
(setq save-place-file (dir-concat user-cache-directory "places"))
;; Set the file for transient history.
(setq transient-history-file (dir-concat user-cache-directory "transient-history.el"))
;; Set the file for bookmarks.
(setq bookmark-default-file (dir-concat user-emacs-directory ".cache/bookmarks"))
;; Set the prefix for auto-save list files.
(setq auto-save-list-file-prefix (dir-concat user-cache-directory "auto-save-list/.saves-"))
;; Set the file for save history.
(setq savehist-file (dir-concat user-cache-directory "savehist"))
;; Set the file for TRAMP persistency.
(setq tramp-persistency-file-name (dir-concat user-cache-directory "tramp"))
;; Set the file for the LSP session.
(setq lsp-session-file (dir-concat user-cache-directory "lsp-session"))
;; Set the file for DAP breakpoints.
(setq dap-breakpoints-file (dir-concat user-cache-directory "dap-breakpoints"))
;; Set the file for Projectile's known projects.
(setq projectile-known-projects-file (dir-concat user-emacs-directory ".cache/projectile-bookmarks.eld"))
;; Set the directory for eshell.
(setq eshell-directory-name (dir-concat user-cache-directory "eshell"))
;; Set the file for eshell history.
(setq eshell-history-file-name (dir-concat user-cache-directory "eshell-history"))
;; Set the file for eshell's last directory ring.
(setq eshell-last-dir-ring-file-name (dir-concat user-cache-directory "eshell-last-dir-ring"))
;; Set the directory for undo session files.
(setq undo-fu-session-directory (dir-concat user-cache-directory "undo-fu-session/"))
;; Set the file for perspective sessions.
(setq persp-state-default-file (dir-concat user-emacs-directory ".cache/sessions"))
;; Set the file for org-id locations.
(setq org-id-locations-file (concat user-emacs-directory ".cache/.org-id-locations"))
;; Set the file for org-roam database.
(setq org-roam-db-location "/mnt/Karna/Git/Project-K/Org/Roam/org-roam.db")
;; Set the preview tailor storage file.
(setq preview-tailor-storage-file (dir-concat user-cache-directory ".preview-tailor"))

(provide 'hooks-dirs)
;;; hooks-dirs.el ends here
#+END_SRC

** UI TWEAKS

#+BEGIN_SRC emacs-lisp :tangle lisp/core-config.el
;;; core-config.el --- Core Configuration Settings -*- lexical-binding: t; -*-

(use-package emacs
  :ensure nil
  :demand t
  :custom
  ;; Basic UI & Behavior
  (inhibit-startup-screen t)
  (user-full-name "Karna")
  (frame-inhibit-implied-resize t)
  (frame-resize-pixelwise t)

  ;; Miscellaneous Settings
  (long-line-threshold 100000)
  (use-file-dialog nil)
  (use-dialog-box nil)
  (pop-up-windows nil)
  (auto-save-interval 2400)
  (auto-save-timeout 300)
  (history-length 1000)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t)
  (use-short-answers t)

  :hook
  ;; Clean up whitespace before saving any buffer
  (before-save . whitespace-cleanup)
  ;; For comint buffers, disable the exit query for the associated process
  (comint-exec . (lambda ()
		   (set-process-query-on-exit-flag
		    (get-buffer-process (current-buffer)) nil)))

  :config
  ;;----------------------------------------------------------------------------
  ;; Basic UI & Behavior Adjustments
  ;;----------------------------------------------------------------------------
  (delete-selection-mode 1)           ;; Allow deletion of selected text
  (electric-indent-mode -1)           ;; Disable auto-indenting
  (electric-pair-mode 1)              ;; Auto-insert matching parentheses
  (global-display-line-numbers-mode 1) ;; Enable line numbers globally
  (global-visual-line-mode 1)         ;; Enable visual line wrapping
  (add-hook 'text-mode-hook 'visual-line-mode)
  (menu-bar-mode -1)                  ;; Disable the menu bar
  (scroll-bar-mode -1)                ;; Disable the scroll bar
  (column-number-mode t)              ;; Show column numbers
  (setq cursor-type 'box)             ;; some others are hollow, bar, nil
  (setq blink-cursor-mode t)          ;; Enable cursor blinking
  (size-indication-mode t)            ;; Display file size in the mode line
  (fringe-mode -1)                    ;; Remove UI fringes
  (setq animate-cursor-mode t)        ;; Enable cursor animation
  (tool-bar-mode -1)                  ;; Disable the tool bar
  (global-hl-line-mode -1)            ;; global highlighting of the current line
  (setq init-start-time (current-time))  ;; Record startup time

  ;;----------------------------------------------------------------------------
  ;; Auto-Reverting & UTF-8 Encoding Settings
  ;;----------------------------------------------------------------------------
  (setq ring-bell-function 'ignore) ;; Disable the bell sound.
  (setq display-time-default-load-average nil) ;; Hide the system load average in the mode line.
  (global-auto-revert-mode t)         ;; Auto-refresh buffers when files change
  (setq global-auto-revert-non-file-buffers t)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;;----------------------------------------------------------------------------
  ;; Appearance Tweaks
  ;;----------------------------------------------------------------------------
  (add-to-list 'default-frame-alist '(alpha-background . 95)) ;; Set frame transparency
  (global-prettify-symbols-mode 1)      ;; Display certain keywords as symbols

  ;;----------------------------------------------------------------------------
  ;; Miscellaneous Tweaks
  ;;----------------------------------------------------------------------------
  (defalias 'yes-or-no-p 'y-or-n-p)      ;; Use y/n prompts instead of yes/no
  (pixel-scroll-precision-mode 1)       ;; Enable precise pixel scrolling

  ;; History & Minibuffer Enhancements
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'global-mark-ring)

  ;;----------------------------------------------------------------------------
  ;; Keybindings
  ;;----------------------------------------------------------------------------
  (global-set-key [escape] 'keyboard-escape-quit))  ;; Make ESC quit prompts

;;----------------------------------------------------------------------------
;; Speed Benchmarking (Startup Time Reporting)
;;----------------------------------------------------------------------------
(let ((init-time (float-time (time-subtract (current-time) init-start-time)))
      (total-time (string-to-number (emacs-init-time "%f"))))
  (message (concat
	    (propertize "Startup time: " 'face 'bold)
	    (format "%.2fs " init-time)
	    (propertize (format "(+ %.2fs system time)"
				(- total-time init-time)) 'face 'shadow))))


#+END_SRC

** GARBAGE COLLECTION
GC is the process of freeing up memory from unused/used up variables. We set the threshold on the GC so emacs will be a little faster.

#+BEGIN_SRC emacs-lisp :tangle lisp/core-config.el
;;----------------------------------------------------------------------------
;; Garbage Collection
;;----------------------------------------------------------------------------

;; --- 1. Delay GC during startup to speed things up ---
(setq gc-cons-threshold most-positive-fixnum)

;; --- 2. Configure gcmh to dynamically manage GC after startup ---
(use-package gcmh
  :ensure t
  :diminish
  :init
  (setq gcmh-high-cons-threshold 402653184  ;; 384 MB: high threshold during busy periods
	gcmh-low-cons-threshold 16777216     ;; 16 MB: lower threshold when idle
	gcmh-idle-delay 5)                  ;; Wait 5 seconds of idle before lowering the threshold
  :config
  (gcmh-mode 1))

;; --- 3. After startup, restore GC settings and report load time ---
(add-hook 'emacs-startup-hook
	  (lambda ()
	    ;; Reset GC thresholds to reasonable values for normal operation.
	    (setq gc-cons-threshold 402653184
		  gc-cons-percentage 0.6)
	    (message "*** Emacs loaded in %.2f seconds with %d garbage collections."
		     (float-time (time-subtract after-init-time before-init-time))
		     gcs-done)))

;; Increase the amount of data which Emacs reads from the process
(setq read-process-output-max (* 1024 1024)) ;; 1mb


#+END_SRC

** NATIVE COMPILE
Native Compile support and silence some annoying warnings when a package gets installed.

#+BEGIN_SRC emacs-lisp :tangle lisp/core-config.el
;;----------------------------------------------------------------------------
;; Native Compile Warning Suppression
;;----------------------------------------------------------------------------

;; Option 1: Disable deferred native compilation entirely.
;; This prevents background compilation tasks from running during interactive sessions.
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
  (setq native-comp-deferred-compilation nil))

;; Option 2 (alternative):
;; If you prefer to retain asynchronous native compilation to gradually compile packages in the background,
;; you can leave deferred compilation enabled and instead silence its warnings:
;; (setq native-comp-async-report-warnings-errors nil)

;; In noninteractive sessions (like batch scripts), prefer newer source files over stale byte-compiled ones.
;; This skips unnecessary mtime checks on *.elc files, shaving off some IO time.
(setq load-prefer-newer noninteractive)


#+END_SRC

** BYTE COMPILATION

#+BEGIN_SRC emacs-lisp :tangle lisp/core-config.el
;;----------------------------------------------------------------------------
;; BYTE Compilation
;;----------------------------------------------------------------------------

;; Byte-compile elisp files after saving
(defun auto-byte-recompile ()
  "Auto-recompile `.el' files to `.elc' if they exist."
  (when (and buffer-file-name
	     (eq major-mode 'emacs-lisp-mode)
	     (not (string-match-p "init\\.el$" buffer-file-name))
	     (file-exists-p (byte-compile-dest-file buffer-file-name)))
    (byte-recompile-file buffer-file-name)))

(defun byte-recompile-init-file ()
  "Recompile the Emacs init file on exit if it exists."
  (when (and user-init-file
	     (file-exists-p user-init-file))
    (byte-recompile-file user-init-file)))

(add-hook 'after-save-hook #'auto-byte-recompile)
(add-hook 'kill-emacs-hook #'byte-recompile-init-file)
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)


#+END_SRC

** ASYNC
[[https://github.com/jwiegley/emacs-async][Async]] let us use asynchronous processes whereever possible, pretty useful.

#+BEGIN_SRC emacs-lisp :tangle lisp/core-config.el
;;----------------------------------------------------------------------------
;; Asynchronous Process
;;----------------------------------------------------------------------------

(use-package async
  :ensure t
  :defer t
  :init (dired-async-mode 1))


(provide 'core-config)
;;; core-config.el ends here
#+END_SRC

-----

* EDITOR SETTINGS
  Editor setting such as backups, recent files, formatting etc..,

** CUSTOM

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;;; custom.el --- Custom Settings for Emacs -*- lexical-binding: t; -*-

;; Set the default browser function and program
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "zen-browser"
      browse-url-default-program "zen-browser")

;; Specify browser for Org mode HTML export (optional)
(setq org-html-htmlize-browser "zen-browser")

;; Configure file associations for Org mode
(setq org-file-apps
      '(("auto-mode" . emacs)          ;; Open files in Emacs by default
	("\\.mm\\'" . default)         ;; Use system default for .mm files
	("\\.x?html?\\'" . "zen-browser %s")  ;; Open HTML files in zen-browser
	("\\.pdf\\'" . "~/.local/bin/zathura %s"))) ;; Open PDFs in Zathura

;; Set default system file opener using xdg-open
(setcdr (assq 'system org-file-apps-gnu) "xdg-open %s")

;; Workaround for a known issue with xdg-open when opening files in Org mode
(advice-add 'org-open-file :around
	    (lambda (orig-fun &rest args)
	      (let ((process-connection-type nil))
		(apply orig-fun args))))

;; ----------------------------------------------------------------------------
;; RECENTF SETTINGS
;; ----------------------------------------------------------------------------

(require 'recentf)

;; Configure recentf settings
(setq recentf-save-file (dir-concat user-cache-directory "recentf")
      recentf-max-saved-items 200    ;; Store up to 200 recent files
      recentf-auto-cleanup 180)      ;; Auto-cleanup old entries every 180 seconds

;; Exclude specific files and directories from tracking
(setq recentf-exclude
      '("~/.cache/emacs/"             ;; Exclude everything inside ~/.cache/emacs/
      "~/.emacs.d/snippets/"          ;; Exclude everything inside ~/.emacs.d/snippets/
      "/mnt/Karna/Git/Project-K/Org/Journal/"          ;; Exclude everything inside Org Journal
      "/mnt/Karna/Git/Project-K/Org/Tasks.org" ;; Exclude this specific Org file
      "_region_\\.tex$"              ;; Ignore temporary LaTeX region files
      "<none>\\.tex$"              ;; Ignore temporary LaTeX region files
      "^/tmp/"))                     ;; Exclude everything inside /tmp/

;; Enable recentf mode
(recentf-mode 1)


#+END_SRC

** BACKUP SETTINGS
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; BACKUP SETTINGS
;; ----------------------------------------------------------------------------

(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ;; Default to Trash folder

;; Else you can also create a custom backup directory in ~/.cache/emacs and save the files versions wise

;;(setq backup-directory-alist
;;      `(("." . ,(dir-concat user-cache-directory "backup")))
;;      backup-by-copying t ; Use copies
;;      version-control t ; Use version numbers on backups
;;      delete-old-versions t ; Automatically delete excess backups
;;      kept-new-versions 5 ; Newest versions to keep
;;      kept-old-versions 3 ; Old versions to keep
;;      )


#+END_SRC

** FORMAT ALL

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; FORMATTING SETTINGS
;; ----------------------------------------------------------------------------

(use-package format-all
  :ensure t
  :defer t
  :preface
  (defun ian/format-code ()
    "Auto-format the entire buffer. If in `prolog-mode', call `prolog-indent-buffer';  if the buffer is managed by Eglot and the LSP server supports document formatting, call `eglot-format-buffer'; otherwise, call `format-all-buffer'."
    (interactive)
    (cond
     ((derived-mode-p 'prolog-mode)
      (prolog-indent-buffer))
     ((and (eglot-managed-p)
	   (eglot--server-capable :documentFormattingProvider))
      (eglot-format-buffer))
     (t (format-all-buffer))))
  :hook (prog-mode . format-all-ensure-formatter))


#+END_SRC

** UNDO FU
Undo Management in Emacs

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; UNDO MANAGEMENT
;; ----------------------------------------------------------------------------

;; The `undo-fu` package provides a more intuitive undo system than the default Emacs undo.
(use-package undo-fu
  :ensure t
  :defer t
  :config
  (setq undo-fu-allow-undo-in-region t) ;; Allow undo in active region
  (setq undo-fu-ignore-keyboard-quit t)) ;; Prevent undo from resetting on C-g

;; The `undo-fu-session` package saves and restores undo history across Emacs sessions.
(use-package undo-fu-session
  :ensure t
  :defer t
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (setq undo-fu-session-directory (dir-concat user-cache-directory "undo-fu-session/")) ;; Store undo history in cache
  :hook ((prog-mode conf-mode text-mode tex-mode) . undo-fu-session-mode))


#+END_SRC

** JARCHIVE
Jarchive teaches emacs how to open project dependencies that reside inside jar files.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;;; JARCHIVE

(use-package jarchive
  :ensure t
  :after eglot
  :config
  (jarchive-setup))


#+END_SRC

** BREADCRUMB

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; BREADCRUMB FOR EMACS
;; ----------------------------------------------------------------------------

(use-package breadcrumb
  :ensure t
  :config
  (breadcrumb-mode 1) ; Enable breadcrumb globally.
  ;; Optional tweaks for breadcrumb appearance:
  (setq breadcrumb-imenu-max-length 30
	breadcrumb-project-max-length 30
	breadcrumb-imenu-crumb-separator " » "
	breadcrumb-project-crumb-separator " / ")
  ;; Set the header-line to display both project and imenu breadcrumbs.
  (setq header-line-format
	'((:eval (concat (breadcrumb-project-crumbs)
			 "  " (breadcrumb-imenu-crumbs))))))


#+END_SRC

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; DIMINISH
;; ----------------------------------------------------------------------------

(use-package diminish
  :ensure t
  :defer t
  :init
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'beacon-mode)
  (diminish 'irony-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'auto-revert-mode)
  (diminish 'yas-minor-mode)
)


#+END_SRC

** RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; RAINBOW MODE
;; ----------------------------------------------------------------------------

(use-package rainbow-mode
  :ensure t
  :defer t
  :diminish
  :hook org-mode prog-mode)


#+END_SRC

** RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; RAINBOW DELIMITERS
;; ----------------------------------------------------------------------------

(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
	 (clojure-mode . rainbow-delimiters-mode)))


#+END_SRC

** DRAG-STUFF
[[https://github.com/rejeep/drag-stuff.el][Drag Stuff]] is a minor mode for Emacs that makes it possible to drag stuff (words, region, lines) around in Emacs.  When 'drag-stuff-define-keys' is enabled, then the following keybindings are set: M-up, M-down, M-left, and M-right.

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; DRAG STUFF
;; ----------------------------------------------------------------------------

(use-package drag-stuff
  :ensure t
  :defer t
  :diminish
  :init
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys))


#+END_SRC

** SOME EXTRA STUFF
I am so lazy to document so adding some of the extras here

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; SOME EXTRA STUFF
;; ----------------------------------------------------------------------------

(use-package tldr :ensure t :defer t)

;; Use puni-mode globally and disable it for term-mode.
(use-package puni
  :defer t
  :init
  ;; The autoloads of Puni are set up so you can enable `puni-mode` or
  ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
  ;; any key that calls Puni commands, it's loaded.
  (puni-global-mode)
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))

(use-package expand-region
  :bind ("C-=" . er/expand-region))

;; Removes whitespace from the ends of lines.
(use-package ws-butler
:init (ws-butler-global-mode))


#+END_SRC

** HIGHLIGHT INDENTATION GUIDES

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; HIGHLIGHT INDENTATION GUIDES
;; ----------------------------------------------------------------------------

(use-package highlight-indent-guides
  :ensure t
  :defer t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
  (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-auto-enabled nil) ;; Disable auto coloring

  ;; Adjust colors based on theme background
  (defun my/highlight-indent-guides-set-colors ()
    (if (eq (frame-parameter nil 'background-mode) 'dark)
	(progn
	  (set-face-foreground 'highlight-indent-guides-character-face "gray40")
	  (set-face-foreground 'highlight-indent-guides-top-character-face "white")
	  (set-face-foreground 'highlight-indent-guides-stack-character-face "gray60"))
      (progn
	(set-face-foreground 'highlight-indent-guides-character-face "gray40")
	(set-face-foreground 'highlight-indent-guides-top-character-face "black")
	(set-face-foreground 'highlight-indent-guides-stack-character-face "gray60"))))

  (add-hook 'after-load-theme-hook #'my/highlight-indent-guides-set-colors)
  (my/highlight-indent-guides-set-colors)) ;; Apply colors immediately


#+END_SRC

** FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+BEGIN_SRC emacs-lisp :tangle lisp/editor.el
;; ----------------------------------------------------------------------------
;; FLYCHECK FOR EMACS
;; ----------------------------------------------------------------------------

(use-package flycheck
  :ensure t
  :defer t
  :diminish flycheck-mode
  :init
  (global-flycheck-mode)
  :config
  ;; Adjust when Flycheck runs syntax checks.
  (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)
	;; Increase the error threshold to avoid disabling checkers on too many errors.
	flycheck-checker-error-threshold 1000))

(use-package sideline-flymake
  :hook (flymake-mode . sideline-mode)
  :custom
  (sideline-flymake-display-mode 'line) ;; show errors on the current line
  (sideline-backends-right '(sideline-flymake)))


(provide 'editor)
;;; editor.el ends here
#+END_SRC

** WAKATIME
Wakatime is a time tracking extension for Emacs.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/wakatime.el
;;; wakatime.el --- Wakatime Extension -*- lexical-binding: t; -*-

(use-package wakatime-mode
  :ensure t
  :diminish
  :config
  (global-wakatime-mode)) ;; Requires wakatime-cli


(provide 'packages/wakatime)
;; packages/wakatime.el ends here
#+END_SRC

-----

* LOAD EVIL MODE
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs. Because...let's face it. The Vim keybindings are just plain better.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/evil.el
;;; evil.el --- Evil Mode Setup -*- lexical-binding: t; -*-

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
  :diminish
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
	evil-want-keybinding nil
	evil-vsplit-window-right t
	evil-split-window-below t
	evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
  (evil-mode 1))

(use-package evil-collection
  :diminish
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor :diminish)

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

(use-package evil-tex
  :ensure t
  :hook (LaTeX-mode . evil-tex-mode))


#+END_SRC

* WHICH KEY
Which Key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/evil.el
;; ----------------------------------------------------------------------------
;; WHICH KEY
;; ----------------------------------------------------------------------------

(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-allow-imprecise-window-fit nil
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit nil
    which-key-separator " → " ))


(provide 'packages/evil)
;;; packages/evil.el ends here
#+END_SRC

-----

* UI CONFIGURATIONS
  UI Configurations such as themes, fonts, modeline, dashboard etc..,

** THEMES

#+BEGIN_SRC emacs-lisp :tangle lisp/ui-config.el
;;; ui-config.el --- UI Configurations -*- lexical-binding: t; -*-

;; ----------------------------------------------------------------------------
;; THEMES
;; ----------------------------------------------------------------------------

(use-package ef-themes
  :ensure t
  :config
  (defvar my/current-ef-theme 'ef-winter
    "Stores the current theme to toggle between `ef-cyprus` and `ef-winter`.")

  (defun my/toggle-ef-theme ()
    "Toggle between `ef-cyprus` and `ef-winter` themes."
    (interactive)
    (setq my/current-ef-theme (if (eq my/current-ef-theme 'ef-cyprus)
				  'ef-winter
				'ef-cyprus))
    (ef-themes-select my/current-ef-theme)
    (message "Switched to %s" my/current-ef-theme))

  ;; Load default theme
  (ef-themes-select my/current-ef-theme))


#+END_SRC

** FONTS

#+BEGIN_SRC emacs-lisp :tangle lisp/ui-config.el
;; ----------------------------------------------------------------------------
;; FONT SETTINGS
;; ----------------------------------------------------------------------------

(defvar my/default-font "JetBrainsMono Nerd Font"
  "Default font for Emacs.")

(add-to-list 'default-frame-alist `(font . ,(format "%s-12:bold" my/default-font)))

(set-face-attribute 'default nil
		    :font my/default-font
		    :height 120
		    :weight 'bold)

(set-face-attribute 'fixed-pitch nil
		    :font my/default-font
		    :height 130
		    :weight 'bold)

(set-face-attribute 'variable-pitch nil
		    :font my/default-font
		    :height 120
		    :weight 'bold)


;; Italics for comments & keywords
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

(setq-default line-spacing 0)

(set-display-table-slot standard-display-table 'truncation (make-glyph-code ?…))
(set-display-table-slot standard-display-table 'wrap (make-glyph-code ?–))


#+END_SRC

** ICONS
All The Icons is an emcas package that provides a collection of icons for use in various Emacs features, such as the mode-line, minibuffer, and other user interfaces.

#+BEGIN_SRC emacs-lisp :tangle lisp/ui-config.el
;; ----------------------------------------------------------------------------
;;; ICONS
;; ----------------------------------------------------------------------------

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

(use-package all-the-icons-completion
  :ensure t
  :defer t
  :hook (marginalia-mode . #'all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

(use-package nerd-icons :defer t
  :custom
  (nerd-icons-color-icons t))


#+END_SRC

** BEACON
Whenever the window scrolls a light will shine on top of your cursor so you know where it is - [[https://github.com/Malabarba/beacon][BEACON]].

#+BEGIN_SRC emacs-lisp :tangle lisp/ui-config.el
;;; BEACON

(use-package beacon
  :ensure t
  :defer t
  :init
  ;;(setq beacon-size 40)
  ;;(setq beacon-color "#ff00ff")
  (beacon-mode 1))


(provide 'ui-config)
;;; ui-config.el ends here
#+END_SRC

-----

* DASHBOARD
[[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/dashboard.el
;;; packages/dashboard.el --- Dashboard Package -*- lexical-binding: t; -*-

;; Load dashboard instead of scratchpad at startup
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;;(use-package page-break-lines :ensure t) ;; enable if you want horizontal lines between sections in dashboard.

(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-banner-logo-title "I'll Walk My Own Path!")
  ;; (setq dashboard-startup-banner 'logo)
  (setq dashboard-startup-banner "~/.emacs.d/assets/emacs.png")
  (setq dashboard-center-content t)
  (setq dashboard-items '((vocabulary)
			  (recents . 5)
			  (agenda . 5)
			  (bookmarks . 10)
			  (projects . 5)))
  (setq dashboard-startupify-list '(dashboard-insert-banner
				    dashboard-insert-newline
				    dashboard-insert-banner-title
				    dashboard-insert-newline
				    dashboard-insert-init-info
				    dashboard-insert-items))
  (setq dashboard-item-generators '(
				    (vocabulary . gopar/dashboard-insert-vocabulary)
				    (recents . dashboard-insert-recents)
				    (bookmarks . dashboard-insert-bookmarks)
				    (agenda . dashboard-insert-agenda)
				    (projects . dashboard-insert-projects)))
  (defun gopar/dashboard-insert-vocabulary (list-size)
    (dashboard-insert-heading " Word of the Day:"
			      nil
			      (all-the-icons-faicon "newspaper-o"
						    :height 1.2
						    :v-adjust 0.0
						    :face 'dashboard-heading))
    (insert "\n")
    (let ((random-line nil)
	  (lines nil))
      (with-temp-buffer
	(insert-file-contents (concat user-emacs-directory "assets/words"))
	(goto-char (point-min))
	(setq lines (split-string (buffer-string) "\n" t))
	(setq random-line (nth (random (length lines)) lines))
	(setq random-line (string-join (split-string random-line) " ")))
      (insert "    " random-line)))
  :config
  (dashboard-setup-startup-hook)
  (add-hook 'dashboard-mode-hook
	    (lambda ()
	      (display-line-numbers-mode -1))))

(setq dashboard-agenda-tags-format 'ignore)

(setq dashboard-agenda-prefix-format  "%i %s  ")

(setq dashboard-agenda-item-icon "󰸗") ;; Nerd Font calendar icon


(provide 'packages/dashboard)
;;; packages/dashboard.el ends here
#+END_SRC

-----

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/doom-modeline.el
;;; packages/doom-modeline.el --- Doom Modeline Package -*- lexical-binding: t; -*-

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (inhibit-compacting-font-caches t)
  (doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-buffer-state-icon nil)
  (doom-modeline-lsp nil)
  :hook (after-init . doom-modeline-mode)
  :config
    (setq doom-modeline-height 25      ;; sets modeline height
	  doom-modeline-bar-width 5    ;; sets right bar width
	  doom-modeline-persp-name t   ;; adds perspective name to modeline
	  doom-modeline-persp-icon t))


(provide 'packages/doom-modeline)
;;; packages/doom-modeline.el ends here
#+END_SRC

-----

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/projectile.el
;;; packages/projectile.el --- Projectile Package -*- lexical-binding: t; -*-

(use-package projectile
  :ensure t
  :init
  ;; Set the search path for Projectile if the directory exists.
  (when (file-directory-p "/mnt/Karna/Git/Project-K")
    (setq projectile-project-search-path '("/mnt/Karna/Git/Project-K/")))
  ;; Define the action to take when switching projects.
  (setq projectile-switch-project-action #'projectile-dired)
  ;; :custom
  ;; Use Ivy for completion within Projectile.
  ;; (projectile-completion-system 'ivy)
  :config
  ;; Now that Projectile is loaded, append the extra directories to ignore.
  (setq projectile-globally-ignored-directories
	(append projectile-globally-ignored-directories
		'("node_modules" "dist" "build" "vendor" ".venv" "tmp" "cache" "log" "bower_components")))
  (projectile-mode 1))


(provide 'packages/projectile)
;;; packages/projectile.el ends here
#+END_SRC

-----

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/perspective.el
;;; packages/perspective.el --- Perspective Package -*- lexical-binding: t; -*-

(use-package perspective
  :ensure t
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :config
  (persp-mode 1)
  ;; Sets a file to write to when we save states
)

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
	  (lambda ()
	    (persp-ibuffer-set-filter-groups)
	    (unless (eq ibuffer-sorting-mode 'alphabetic)
	      (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
;; (add-hook 'kill-emacs-hook #'persp-state-save)

(global-set-key (kbd "C-S-s") #'persp-state-save)


(provide 'packages/perspective)
;;; packages/perspective.el ends here
#+END_SRC

-----

* MINIBUFFER
  Minibuffer settings and packages to make it more effective and productive

** Vertico
Vertico provides an efficient and minimalistic vertical completion UI.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/minibuffer.el
;;; packages/minibuffer.el --- Minibuffer Package -*- lexical-binding: t; -*-

;; ----------------------------------------------------------------------------
;; VERTICO
;; ----------------------------------------------------------------------------

(use-package vertico
  :init
  (vertico-mode)
  :hook
  ;; Tidy paths automatically in the minibuffer.
  (rfn-eshadow-update-overlay-hook . vertico-directory-tidy)
  :config
  ;; Load the directory extension once Vertico is loaded.
  (require 'vertico-directory)
  ;; Show more candidates
  ;(setq vertico-count 20)
  ;; Grow/shrink the minibuffer dynamically.
  (setq vertico-resize nil)
  ;; Enable cycling through candidates.
  (setq vertico-cycle t))


#+END_SRC

** Marginalia
Marginalia enhances minibuffer completions by providing additional context annotations.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/minibuffer.el
;; ----------------------------------------------------------------------------
;; MARGINALIA
;; ----------------------------------------------------------------------------

(use-package marginalia
  :ensure t
  :defer t
  :bind (:map minibuffer-local-map
	 ("M-A" . marginalia-cycle))
  :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init (marginalia-mode))


#+END_SRC

** Embark
Embark allows performing actions on minibuffer candidates dynamically.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/minibuffer.el
;; ----------------------------------------------------------------------------
;; EMBARK
;; ----------------------------------------------------------------------------

(use-package embark
  :ensure t
  :defer t
  :bind (("M-h" . embark-act))
  :commands (embark-act
	       embark-dwim
	       embark-export
	       embark-collect
	       embark-bindings
	       embark-prefix-help-command)

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;;; EMBARK CONSULT

  (use-package embark-consult
     :ensure t
     :after (embark consult)
     :defer t
     :hook
     (embark-collection-mode . consult-preview-at-point-mode))


(provide 'packages/minibuffer)
;;; packages/minibuffer.el ends here
#+END_SRC

** ARCHIVES

*** IVY

#+BEGIN_SRC emacs-lisp :tangle no
;;; IVY

(use-package ivy
  :ensure t
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (ivy-mode))


#+END_SRC

*** IVY RICH

#+BEGIN_SRC emacs-lisp :tangle no

;;; IVY RICH

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1)  ;; Enable Ivy-rich for improved display in Ivy prompts
  :custom
  (ivy-virtual-abbreviate 'full)  ;; Show full path in Ivy buffers
  (ivy-rich-switch-buffer-align-virtual-buffer t)  ;; Align virtual buffers (e.g., project-root buffers)
  (ivy-rich-path-style 'abbrev)  ;; Abbreviate file paths for better display
  :config
  ;; Set default transformers for ivy commands
  (setq ivy-rich-display-transformers-list
	'((ivy-switch-buffer
	   :columns
	   ((ivy-rich-switch-buffer-icon (:width 2))
	    (ivy-rich-candidate (:width 30))
	    (ivy-rich-switch-buffer-size (:width 7))
	    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
	    (ivy-rich-switch-buffer-project (:width 15 :face success))
	    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))))))


#+END_SRC

*** ALL THE ICONS IVY RICH

#+BEGIN_SRC emacs-lisp :tangle no

;;; ALL THE ICONS IVY RICH

(use-package all-the-icons-ivy-rich
  :ensure t
  :init
  (all-the-icons-ivy-rich-mode 1))


#+END_SRC

*** COUNSEL

#+BEGIN_SRC emacs-lisp :tangle no

;;; COUNSEL

(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config
  (counsel-mode)
  (setq ivy-initial-inputs-alist nil))

(use-package counsel-projectile
  :ensure t
  :after (projectile counsel)  ;; Ensure Projectile and Counsel are loaded first.
  :config
  (counsel-projectile-mode 1))


#+END_SRC

*** IVY POSTFRAME

#+BEGIN_SRC emacs-lisp :tangle no
;;; IVY POSTFRAME

 (use-package posframe
   :ensure t)

 (use-package ivy-posframe
   :ensure t
   :after ivy
   :config
   (setq ivy-posframe-parameters '((left . 0) (top . 0)))  ;; Center position
   (setq ivy-posframe-width 80)  ;; Adjust the width as needed
   (setq ivy-posframe-height 20)  ;; Adjust the height as needed
   (setq ivy-posframe-min-width 20)

   ;; Enable ivy-posframe
   (ivy-posframe-mode 1))

 (setq ivy-display-function 'ivy-posframe-display)


#+END_SRC

-----

* Consult
The `consult' package provides lots of commands that are enhanced variants of basic, built-in functionality.  One of the headline features of `consult' is its preview facility, where it shows in another Emacs window the context of what is currently matched in the minibuffer.  Here I define key bindings for some commands you may find useful.  The mnemonic for their prefix is "alternative search" (as opposed to the basic C-s or C-r keys).

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/consult.el
;;; packages/consult.el --- Consult Package -*- lexical-binding: t; -*-

(use-package consult
  :ensure t
  :bind (;; A recursive grep
	 ("M-s M-g" . consult-grep)
	 ;; Search for files names recursively
	 ("M-s M-f" . consult-fd)
	 ;; Search through the outline (headings) of the file
	 ("M-s M-o" . consult-outline)
	 ;; Search the current buffer
	 ("M-s M-l" . consult-line)
	 ;; Switch to another buffer, or bookmarked file, or recently
	 ;; opened file.
	 ("M-s M-b" . consult-buffer)))

;;; CONSULT DIR

(use-package consult-dir
 :ensure t
 :defer t
 :bind (("C-x C-d" . consult-dir)
 :map vertico-map
 ("C-x C-d" . consult-dir)
 ("C-x C-j" . consult-dir-jump-file)))

;; The `wgrep' packages lets us edit the results of a grep search
;; while inside a `grep-mode' buffer.  All we need is to toggle the
;; editable mode, make the changes, and then type C-c C-c to confirm
;; or C-c C-k to abort.
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852

(use-package wgrep
  :ensure t
  :bind ( :map grep-mode-map
	  ("e" . wgrep-change-to-wgrep-mode)
	  ("C-x C-q" . wgrep-change-to-wgrep-mode)
	  ("C-c C-c" . wgrep-finish-edit)))


;; Display a counter showing the number of the current and the other
;; matches.  Place it before the prompt, though it can be after it.
(setq isearch-lazy-count t)
(setq lazy-count-prefix-format "(%s/%s) ")
(setq lazy-count-suffix-format nil)

;; Make regular Isearch interpret the empty space as a regular
;; expression that matches any character between the words you give
;; it.
(setq search-whitespace-regexp ".*?")

(use-package consult-projectile
  :ensure (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))


(provide 'packages/consult)
;; packages/consult.el ends here
#+END_SRC

-----

* COMPLETIONS
  Completion packages such as corfu, cape and some AI packages.

** CORFU

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/corfu.el
;;; packages/corfu.el --- Corfu Package -*- lexical-binding: t; -*-

(use-package corfu
  :ensure t
  :init
  (global-corfu-mode)
  :custom
  (corfu-cycle t)                  ;; Cycle through candidates
  (corfu-auto t)                   ;; Auto-show completions
  (corfu-auto-prefix 3)            ;; Show completions after typing 1 character
  (corfu-auto-delay 0.0)           ;; Instant completions
  (corfu-quit-no-match 'separator) ;; Quit when no match
  (corfu-echo-documentation t)     ;; Show docs in echo area
  (corfu-preview-current nil)      ;; No inline preview
  (corfu-scroll-margin 2)          ;; Start scrolling when 2 candidates remain
  (corfu-count 10)        ;; Show up to 20 completions
  :config
  (corfu-popupinfo-mode 1)         ;; Show docs like VSCode
  :hook
  ;; In eshell, disable auto-completion but keep the quit settings.
  (eshell-mode . (lambda ()
		   (setq-local corfu-quit-at-boundary t
			       corfu-quit-no-match t
			       corfu-auto nil)))
  ;; Customize completion styles for Corfu.
  (corfu-mode . (lambda ()
		  (setq-local completion-styles '(basic)
			      completion-category-overrides nil
			      completion-category-defaults nil)))
  :bind (:map corfu-map
	      ("TAB" . corfu-next)
	      ("S-TAB" . corfu-previous)
	      ("C-h" . corfu-popupinfo-toggle) ;; Show docs
	      ("M-SPC" . corfu-insert-separator)))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  ;; Add the Nerd Icons Corfu formatter to Corfu's margin formatters.
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package eldoc
  :ensure nil
  :custom
  (eldoc-echo-area-use-multiline-p t) ;; Show full docs in echo area
  (eldoc-documentation-strategy 'eldoc-documentation-compose))

 (use-package eldoc-box
  :ensure t
  :hook (eglot-managed-mode . eldoc-box-hover-mode) ;; Enable it for Eglot
  :bind (:map eglot-mode-map
	      ("C-c d" . eldoc-box-help-at-point))) ;; Manually trigger it

(add-hook 'eldoc-box-buffer-setup-hook #'eldoc-box-prettify-ts-errors 0 t)


(provide 'packages/corfu)
;; packages/corfu.el ends here
#+END_SRC

** CAPE

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/cape.el
;;; packages/cape.el --- Cape Package -*- lexical-binding: t; -*-

(use-package cape
  :ensure t
  :init
  ;; (dolist (fn '(cape-file
	;;	cape-keyword
	;;	cape-dabbrev
  ;;	cape-abbrev
	;;	cape-dict
	;;	;; cape-emoji
	;;	cape-sgml))
  ;;  (add-hook 'completion-at-point-functions fn 'append))

  ;; General completion functions for all programming modes
  (add-hook 'prog-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-keyword 'append)
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

  ;; Elisp-specific completions
  (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-elisp-symbol 'append)
	      (add-hook 'completion-at-point-functions #'cape-elisp-block 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

  ;; Org mode completions
  (add-hook 'org-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-keyword 'append)
	      (add-hook 'completion-at-point-functions #'cape-abbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

  ;; LaTeX-specific completions
  (add-hook 'latex-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-tex 'append)
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-keyword 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

   (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-tex 'append)
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-keyword 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

  ;; SGML/HTML/XML modes
  (add-hook 'sgml-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-sgml 'append)
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append)))

  ;; Text mode completions
  (add-hook 'text-mode-hook
	    (lambda ()
	      (add-hook 'completion-at-point-functions #'cape-dabbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-abbrev 'append)
	      (add-hook 'completion-at-point-functions #'cape-file 'append))))

;; ----------------------------------------------------------------
;; CAPF AUTOSUGGEST
;; ----------------------------------------------------------------

(use-package capf-autosuggest
  :ensure t
  :defer t
  :hook ((eshell-mode . capf-autosuggest-mode))
  :custom
  (capf-autosuggest-dwim-next-line nil))


(provide 'packages/cape)
;; packages/cape.el ends here
#+END_SRC

** Orderless (Smart Matching for Completions)
#+BEGIN_SRC emacs-lisp :tangle lisp/packages/orderless.el
;;; packages/orderless.el --- Orderless Package -*- lexical-binding: t; -*-

(use-package orderless
  :ensure t
  :defer t
  :custom
  ;; (orderless-style-dispatchers '(orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(basic substring initials flex orderless))
  (completion-category-defaults nil)

  (setq completion-category-overrides
	;; NOTE 2021-10-25: I am adding `basic' because it works better as a
	;; default for some contexts.  Read:
	;; <https://debbugs.gnu.org/cgi/bugreport.cgi?bug=50387>.
	;;
	;; `partial-completion' is a killer app for files, because it
	;; can expand ~/.l/s/fo to ~/.local/share/fonts.
	;;
	;; If `basic' cannot match my current input, Emacs tries the
	;; next completion style in the given order.  In other words,
	;; `orderless' kicks in as soon as I input a space or one of its
	;; style dispatcher characters.
	'((file (styles . (basic partial-completion orderless)))
	  (bookmark (styles . (basic substring)))
	  (library (styles . (basic substring)))
	  (embark-keybinding (styles . (basic substring)))
	  (imenu (styles . (basic substring orderless)))
	  (consult-location (styles . (basic substring orderless)))
	  (kill-ring (styles . (orderless)))
	  (eglot (styles . (orderless flex))))))

(setq completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
(setq-default case-fold-search t)   ; For general regexp
(setq read-file-name-completion-ignore-case t)


(provide 'packages/orderless)
;; packages/orderless.el ends here
#+END_SRC

** TABNINE
TabNine provides AI-powered autocompletion, enhancing productivity for programming tasks.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/tabnine.el
;;; packages/tabnine.el --- TabNine Package -*- lexical-binding: t; -*-

(use-package tabnine
  :commands (tabnine-start-process tabnine-mode)
  :ensure t
  :diminish "⌬"
  :custom
  (tabnine-wait 1)
  (tabnine-minimum-prefix-length 2)
  ;; :hook
  ;; ((prog-mode . tabnine-mode)
  ;; (org-mode . tabnine-mode)
  ;; (LaTeX-mode . tabnine-mode)
  ;; (text-mode . tabnine-mode)
  ;; (kill-emacs . tabnine-kill-process))
  :config
  (add-to-list 'completion-at-point-functions #'tabnine-completion-at-point)
  (tabnine-start-process)
  :bind
  (:map tabnine-completion-map
    ("<tab>" . tabnine-accept-completion)
    ("M-f" . tabnine-accept-completion-by-word)
    ("M-<return>" . tabnine-accept-completion-by-line)
    ("C-g" . tabnine-clear-overlay)
    ("M-[" . tabnine-previous-completion)
    ("M-]" . tabnine-next-completion)))


(provide 'packages/tabnine)
;; packages/tabnine.el ends here
#+END_SRC


** YASNIPPET
Yasnippet is a snippet manager for Emacs.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/yasnippet.el
;;; packages/yasnippet.el --- Yasnippet Package -*- lexical-binding: t; -*-

(use-package yasnippet
  :ensure t
  :diminish
  :hook
  ((prog-mode . yas-minor-mode)
   (text-mode . yas-minor-mode))
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets/")) ;; Ensure your custom snippet directory is included
  (yas-reload-all))

(add-hook 'LaTeX-mode-hook #'yas-minor-mode)
(setq yas-triggers-in-field t)

(use-package yasnippet-snippets
  :ensure t
  :after yasnippet
  :config
  (yas-reload-all)
  (yasnippet-snippets-initialize))


(provide 'packages/yasnippet)
;; packages/yasnippet.el ends here
#+END_SRC

** CONSULT YASNIPPET
   Consult integration for yasnippet insertion. Copied from [[https://github.com/mohkale/consult-yasnippet][Consult Yasnippet]]

#+BEGIN_SRC emacs-lisp :tangle lisp/consult-yasnippet.el
;;; consult-yasnippet.el --- A consulting-read interface for yasnippet -*- lexical-binding: t; -*-

;; Copyright (C) 2021  mohsin kaleem

;; Author: mohsin kaleem <mohkale@kisara.moe>
;; Package-Requires: ((emacs "27.1") (yasnippet "0.14") (consult "0.16"))
;; Version: 0.2
;; URL: https://github.com/mohkale/consult-yasnippet

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Interactively select a yasnippet snippet through completing-read with in
;; buffer previews.

;;; Code:

(defgroup consult-yasnippet nil
  "Consult interface for yasnippet."
  :group 'consult
  :group 'editing)

(defcustom consult-yasnippet-use-thing-at-point nil
  "Use `thing-at-point' as initial value for `consult-yasnippet'."
  :type 'boolean
  :group 'consult-yasnippet)

(defcustom consult-yasnippet-always-overwrite-thing-at-point nil
  "Always overwrite `thing-at-point' when expanding a snippet.
This option forces `consult-yasnippet' to replace `thing-at-point' with the
expanded snippet even if the expansion doesn't match. This option only
applies when `consult-yasnippet-use-thing-at-point' is t."
  :type 'boolean
  :group 'consult-yasnippet)

(defun consult-yasnippet--expand-template (template region)
  "Expand TEMPLATE at point saving REGION."
  (deactivate-mark)
  (goto-char (car region))

  ;; Restore marked region (when it existed) so that `yas-expand-snippet'
  ;; overwrites it.
  (when (not (string-equal "" (buffer-substring (car region) (cdr region))))
    (push-mark (point))
    (push-mark (cdr region) nil t))

  (cl-letf (((symbol-function 'yas-completing-read)
	     (lambda (&rest _args) ""))
	    ;; yasnippet doesn't have a multiple variant.
	    ((symbol-function 'completing-read-multiple)
	     (lambda (&rest _args) "")))
    (yas-expand-snippet (yas--template-content template)
			nil nil
			(yas--template-expand-env template))))

(defun consult-yasnippet--bounds-of-thing-at-point (template)
  "Check for `thing-at-point' in TEMPLATE.
Returns true if `thing-at-point' is a substring of either `template-key'
or `template-name'. Matches only if `consult-yasnippet-use-thing-at-point'
is t."
  (if consult-yasnippet-use-thing-at-point
      (let* ((thing (or (thing-at-point 'symbol) ""))
	     (use-thing-at-point
	      (or consult-yasnippet-always-overwrite-thing-at-point
		  (when template
		    (or (string-match-p thing (regexp-quote (yas--template-key template)))
			(string-match-p thing (regexp-quote (yas--template-name template))))))))
	(if use-thing-at-point
	    (or (bounds-of-thing-at-point 'symbol)
		(cons (point) (point)))
	  (cons (point) (point))))
    (cons (point) (point))))

(defun consult-yasnippet--preview ()
  "Previewer for `consult--read'.
This function expands TEMPLATE at point in the buffer
`consult-yasnippet--read-template' was started in. This includes
overwriting any region that was active and removing any previous
previews that're already active.

When TEMPLATE is not given, this function essentially just resets
the state of the current buffer to before any snippets were previewed.

If `consult-yasnippet-use-thing-at-point' is t and region is not selected,
this function removes the matching prefix from the preview."
  (let* ((buf (current-buffer))
	 (region-active-initially (use-region-p))
	 (initial-region (if (use-region-p)
			     (cons (region-beginning) (region-end))
			   (cons (point) (point))))
	 (initial-region-contents (buffer-substring (car initial-region) (cdr initial-region)))
	 (region (cons (car initial-region) (cdr initial-region))))
    (lambda (action template)
      (with-current-buffer buf
	(let* ((yas-verbosity 0)
	       (inhibit-redisplay t)
	       (inhibit-read-only t)
	       (orig-offset (- (point-max) (cdr region)))
	       (yas-prompt-functions '(yas-no-prompt)))
	  ;; We always undo any snippet previews before maybe setting up
	  ;; some new previews.
	  (delete-region (car region) (cdr region))
	  (goto-char (car region))
	  (setq region (cons (car initial-region) (cdr initial-region)))
	  (insert initial-region-contents)
	  (when (not region-active-initially)
	    (setq region (consult-yasnippet--bounds-of-thing-at-point template))
	    (setq initial-region region)
	    (setq initial-region-contents (buffer-substring (car region) (cdr region))))

	  ;; Restore the region if it was initially active, so that yasnippet can overwrite
	  (when (and region-active-initially (eq action 'return))
	    (activate-mark)
	    (set-mark (car region))
	    (goto-char (cdr region)))

	  (when (and template (not (eq action 'return)))
	    (unwind-protect
		(consult-yasnippet--expand-template template region)
	      (unwind-protect
		  (mapc #'yas--commit-snippet
			(yas-active-snippets (point-min) (point-max)))
		(setcdr region (- (point-max) orig-offset))
		(deactivate-mark)))
	    (redisplay)))))))

(defun consult-yasnippet--candidates (templates)
  "Convert TEMPLATES into candidates for `completing-read'."
  (mapcar
   (lambda (template)
     (cons (concat
	    (propertize (concat (yas--table-name (yas--template-table template))
				" ")
			'invisible t)
	    (yas--template-name template)
	    " ["
	    (propertize (or (yas--template-key template)
			    (and (functionp 'yas--template-regexp-key)
				 (yas--template-regexp-key template)))
			'face 'consult-key)
	    "]")
	   template))
   templates))

(defun consult-yasnippet--annotate (candidates)
  (lambda (cand)
    (when-let ((template (cdr (assoc cand candidates)))
	       (table-name (yas--table-name (yas--template-table template))))
      (concat
       " "
       (propertize " " 'display `(space :align-to (- right ,(+ 1 (length table-name)))))
       table-name))))

(defun consult-yasnippet--read-template (&optional all-templates)
  "Backend implementation of `consult-yasnippet'.
This starts a `completing-read' session with all the snippets in the current
snippet table with support for previewing the snippet to be expanded and
replacing the active region with the snippet expansion. When ALL-TEMPLATES
is non-nil you get prompted with snippets from all snippet tables, not just
the current one.

This function doesn't actually expand the snippet, it only reads and then
returns a snippet template from the user."
  (unless (bound-and-true-p yas-minor-mode)
    (error "`consult-yasnippet' can only be called while `yas-minor-mode' is active"))

  (barf-if-buffer-read-only)

  (let* ((buffer-undo-list t)                                                  ; Prevent querying user (and showing previews) from updating the undo-history
	 (candidates
	  (consult-yasnippet--candidates
	   (if all-templates
	       (yas--all-templates (map-values yas--tables))
	     (yas--all-templates (yas--get-snippet-tables))))))
    (consult--read
     candidates
     :prompt "Choose a snippet: "
     :annotate (consult-yasnippet--annotate candidates)
     :initial
     (when consult-yasnippet-use-thing-at-point
       (thing-at-point 'symbol))
     :lookup 'consult--lookup-cdr
     :require-match t
     :state (consult-yasnippet--preview)
     :category 'yasnippet)))

;;;###autoload
(defun consult-yasnippet-visit-snippet-file (template)
  "Visit the snippet file associated with TEMPLATE.
When called interactively this command previews snippet completions in
the current buffer, and then opens the selected snippets template file
using `yas--visit-snippet-file-1'."
  (interactive (list (consult-yasnippet--read-template t)))
  (yas--visit-snippet-file-1 template))

;;;###autoload
(defun consult-yasnippet (arg)
  "Interactively select and expand a yasnippet template.
This command presents a completing read interface containing all currently
available snippet expansions, with live previews for each snippet. Once
selected a chosen snippet will be expanded at point using
`yas-expand-snippet'.

With ARG select snippets from all snippet tables, not just the current one."
  (interactive "P")
  (when-let ((template (consult-yasnippet--read-template arg)))
    (let* ((thing-bounds (if (region-active-p)
			     (cons nil nil)
			   (consult-yasnippet--bounds-of-thing-at-point template)))
	   (thing-start (car thing-bounds))
	   (thing-end (cdr thing-bounds)))
      (yas-expand-snippet (yas--template-content template)
			  thing-start thing-end
			  (yas--template-expand-env template)))))

(provide 'consult-yasnippet)
;;; consult-yasnippet.el ends here
#+END_SRC

** ARCHIVES

*** COMPANY

#+BEGIN_SRC emacs-lisp :tangle no
;;; COMPANY

(use-package company
  :ensure t
  :defer t
  :bind
  (:map company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous)
    ("M-<" . company-select-first)
    ("M->" . company-select-last)
    ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-require-match nil)
  (company-idle-delay 0)
  (company-show-numbers t)
  (company-tooltip-offset-display 'lines)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend-with-delay
		       company-preview-frontend
		       company-echo-metadata-frontend))
  :config
  (global-company-mode t))

(setq company-tooltip-limit 10)
(setq company-tooltip-minimum 4) ;; Ensure at least 4 candidates are visible
(setq company-tooltip-flip-when-above t) ;; Keep candidates visually consistent
(setq company-text-face-extra-attributes '(:weight bold :slant italic))


#+END_SRC

*** COMPANY BOX

#+BEGIN_SRC emacs-lisp :tangle no
;;; COMPANY BOX

(use-package company-box
  :after company
  :ensure t
  :defer t
  :diminish
  :hook (company-mode . company-box-mode))


#+END_SRC

-----

* GIT PROGRAMS
  Git Programs that I personally love with Emacs.

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+BEGIN_SRC emacs-lisp :tangle lisp/git.el
;;; git.el --- Git Package -*- lexical-binding: t; -*-

;; ----------------------------------------------------------------------------
;; Git Timemachine
;; ----------------------------------------------------------------------------

(use-package git-timemachine
  :after git-timemachine
  :defer t
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)


#+END_SRC

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+BEGIN_SRC emacs-lisp :tangle lisp/git.el
;; ----------------------------------------------------------------------------
;; Magit
;; ----------------------------------------------------------------------------

;; Transient is required by Magit for handling popups and keybindings
(use-package transient
  :defer t)

;; Magit - A Git porcelain inside Emacs
(use-package magit
  :after transient  ;; Ensure transient is loaded first
  :defer t          ;; Load Magit when needed
  :custom
  (magit-show-long-lines-warning nil))  ;; Disable long lines warning in Magit


#+END_SRC

** EDIFF
'ediff' is a diff program that is built into Emacs.  By default, 'ediff' splits files vertically and places the 'help' frame in its own window.  I have changed this so the two files are split horizontally and the 'help' frame appears as a lower split within the existing window.  Also, I create my own 'karna-ediff-hook' where I add 'j/k' for moving to next/prev diffs.  By default, this is set to 'n/p'.

#+BEGIN_SRC emacs-lisp :tangle lisp/git.el
;; ----------------------------------------------------------------------------
;; EDIFF SETUP
;; ----------------------------------------------------------------------------

(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun karna-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'karna-ediff-hook)


(provide 'git)
;; git.el ends here
#+END_SRC

-----

* GPTEL
GPTEL is an excellent package written by karthink and the document is written [[https://github.com/karthink/gptel?tab=readme-ov-file#installation][here]]. And a detailed demo is available on [[https://youtu.be/bsRnh_brggM?si=t65KN0WiKe9e7OMY][YouTube]].

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/gptel.el
;;; packages/gptel.el --- GPTel Package -*- lexical-binding: t; -*-

(use-package gptel
  :ensure t
  :defer t
  :config

  ;;; KAGI Backend
  ;(gptel-make-kagi "Kagi"
  ;  :key (lambda () (auth-source-pick-first-password :host "kagi.com" :login "apikey")))

  (setq gptel-default-mode 'org-mode)
  (setq gptel-expert-commands t)

  ;; Define and Set Ollama as Default Backend
  (setq gptel-backend
	(gptel-make-ollama "Ollama"
			   :host "localhost:11434"
			   :stream t
			   :models '("llama3:latest"
				     "deepseek-coder:6.7b"
				     "mistral"
				     "zephyr"
				     "llama3:8b-instruct-q6_K"
				     "deepseek-r1:8b"
				     "qwen2.5:3b"))))
  ;; Set up keybinding for sending messages
(define-key global-map (kbd "C-c RET") 'gptel-send)


(provide 'packages/gptel)
;; packages/gptel.el ends here
#+END_SRC

-----

* ELLAMA
[[https://github.com/s-kostyaev/ellama][Ellama]] is a tool for interacting with large language models from Emacs.  You need to have 'ollama' installed on your computer to use 'ellama' in Emacs.  You need to pull in any LLMs that you want to have available for use.  For example, if you want to be able to use Llama 3.1, then you need to run 'ollama pull llama3.1'.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/ellama.el
;;; packages/ellama.el --- Ellama Package -*- lexical-binding: t; -*-

(use-package ellama
  :init
  (setopt ellama-keymap-prefix "C-c e")  ;; keymap for all ellama functions
  (setopt ellama-language "English")     ;; language ellama should translate to
  (require 'llm-ollama)
  (setopt ellama-provider
    (make-llm-ollama
     ;; this model should be pulled to use it
     ;; value should be the same as you print in terminal during pull
     :chat-model "llama3.1"
     :embedding-model "nomic-embed-text"
     :default-chat-non-standard-params '(("num_ctx" . 8192))))
  ;; Predefined llm providers for interactive switching.
  (setopt ellama-providers
	'(("zephyr" . (make-llm-ollama
	   :chat-model "zephyr"
	   :embedding-model "zephyr"))
	  ("deepseek-r1:8b" . (make-llm-ollama
	   :chat-model "deepseek-r1:8b"
	   :embedding-model "deepseek-r1:8b"))
	  ("llama3" . (make-llm-ollama
	   :chat-model "llama3"
	   :embedding-model "llama3"))
	  ("mistral" . (make-llm-ollama
	    :chat-model "mistral"
	    :embedding-model "mistral"))))
  (setopt ellama-coding-provider
	(make-llm-ollama
	 ;; :chat-model "qwen2.5-coder:3b"
	 :chat-model "deepseek-coder:6.7b"
	 :embedding-model "deepseek-coder:6.7b"
	 ;; :default-chat-non-standard-params '(("num_ctx" . 32768))
))
  (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
  ;; Translation llm provider
  (setopt ellama-translation-provider (make-llm-ollama
	       :chat-model "qwen2.5:3b"
	       :embedding-model "nomic-embed-text"))
  ;; customize display buffer behaviour
  ;; see ~(info "(elisp) Buffer Display Action Functions")~
  (setopt ellama-chat-display-action-function #'display-buffer-full-frame)
  (setopt ellama-instant-display-action-function #'display-buffer-at-bottom)
  :config
  (setq ellama-sessions-directory "~/.cache/emacs/ellama-sessions/"
	ellama-sessions-auto-save t))


(provide 'packages/ellama)
;; packages/ellama.el ends here
#+END_SRC

-----

* CALC

#+BEGIN_SRC emacs-lisp :tangle lisp/calcc.el
;;; calcc.el --- Calc Package -*- lexical-binding: t; -*-

(use-package calc
  :ensure nil  ;; tells Elpaca not to manage calc because it's built-in
  :bind (("C-x c" . calc)
	 ("C-S-e" . latex-math-from-calc)
	 ("C-c e" . calc-embedded))
  :config
  (use-package calc-embed
    :ensure nil
    :bind (:map calc-override-minor-modes-map
	   ("'" . calc-algebraic-entry)))
  (use-package calc-yank
    :ensure nil
    :defer t
    :config
    (define-advice calc-finish-stack-edit (:around (orig-fn &rest args) pop-to-buffer)
      (cl-letf (((symbol-function 'switch-to-buffer)
		 #'pop-to-buffer))
	(apply orig-fn args))))
  (setq calc-make-windows-dedicated t)
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (let ((lang (if (memq major-mode '(org-mode latex-mode LaTeX-mode))
		    'latex 'normal)))
      (cond ((region-active-p)
	     (let* ((beg (region-beginning))
		    (end (region-end))
		    (string (buffer-substring-no-properties beg end)))
	       (kill-region beg end)
	       (insert (calc-eval `(,string calc-language ,lang
					    calc-prefer-frac t
					    calc-angle-mode rad)))))
	    (t (let ((l (thing-at-point 'line)))
		 (end-of-line 1)
		 (kill-line 0)
		 (insert (calc-eval `(,l
				      calc-language ,lang
				      calc-prefer-frac t
				      calc-angle-mode rad)))))))))

;; If you need additional settings for calc after org-latex-preview, combine them into the same declaration:
(use-package calc
  :ensure nil
  :after org-latex-preview
  :hook (calc-mode . my/olp-calc-settings)
  :config
  (defun my/olp-calc-settings ()
    (setq-local org-latex-preview-numbered nil
		org-latex-preview-auto-ignored-commands
		'(mwheel-scroll pixel-scroll-precision
		  scroll-up-command scroll-down-command
		  scroll-other-window scroll-other-window-down))))


(provide 'calcc)
;; calcc.el ends here
#+END_SRC

-----

* FILE MANAGER AND BUFFERS SETUP
I use TREEMACS as file manager with the dired setting and also peep dired for better icons and stuff..

** TREEMACS
Treemacs is a cool alternative to Neotree

#+BEGIN_SRC emacs-lisp :tangle lisp/file-manager.el
;;; file-manager.el --- File Manager Setup -*- lexical-binding: t; -*-

;; ----------------------------------------------------------------------------
;; TREEMACS
;; ----------------------------------------------------------------------------

(use-package treemacs
  :ensure t
  :defer t
  :config
  (setq treemacs-width 30))

(setq treemacs-persist-file (concat user-cache-directory "treemacs-persist"))

;; Mouse single-click expands nodes in Treemacs
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))


#+END_SRC

** DIRED
Enhancing Emacs' built-in Dired file manager with additional functionality.

#+BEGIN_SRC emacs-lisp :tangle lisp/file-manager.el
;; ----------------------------------------------------------------------------
;; DIRED OPEN
;; ----------------------------------------------------------------------------

(use-package dired-open
  :ensure t
  :defer t
  :config
  ;; Define applications to open specific file types
  (setq dired-open-extensions '(("gif" . "sxiv")   ;; Open GIFs with sxiv
				("jpg" . "sxiv")   ;; Open JPEGs with sxiv
				("png" . "sxiv")   ;; Open PNGs with sxiv
				("mkv" . "mpv")    ;; Open MKVs with mpv
				("mp4" . "mpv")))) ;; Open MP4s with mpv

;; Auto Create Directory if it doesn't exist
(advice-add 'read-file-name :around
	    (lambda (orig-fun &rest args)
	      (let ((result (apply orig-fun args)))
		(when (and (stringp result)
			   (not (file-exists-p (file-name-directory result))))
		  (make-directory (file-name-directory result) t))
		result)))


#+END_SRC

** PEEP DIRED
peep-dired: Quick file previews within Dired

#+BEGIN_SRC emacs-lisp :tangle lisp/file-manager.el
;; ----------------------------------------------------------------------------
;; PEEP DIRED
;; ----------------------------------------------------------------------------

(use-package peep-dired
  :after dired
  :ensure t
  :hook (evil-normalize-keymaps . peep-dired-hook) ;; Ensure peep-dired works with Evil mode
  :config
  ;; Define keybindings for navigation in Dired mode
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)   ;; Go up one directory
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)      ;; Open file (use `dired-find-file` if not using `dired-open`)

  ;; Keybindings for navigating files in peep-dired preview mode
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)  ;; Next file preview
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)) ;; Previous file preview


#+END_SRC

** SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+BEGIN_SRC emacs-lisp :tangle lisp/file-manager.el
;; ----------------------------------------------------------------------------
;; SUDO EDIT
;; ----------------------------------------------------------------------------

(use-package sudo-edit :ensure t :defer t)


(provide 'file-manager)
;; file-manager.el ends here
#+END_SRC

-----

* DEVELOPMENT
  Development setup using eglot, treesit etc..,

** TREESITTER

#+BEGIN_SRC emacs-lisp :tangle lisp/treesitter.el
;;; treesitter.el --- Treesitter Setup -*- lexical-binding: t; -*-

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  (c-ts-mode-indent-offset 4)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package treesit
  :ensure nil
  :config
  (setq major-mode-remap-alist
	'((python-mode . python-ts-mode)
	  (javascript-mode . javascript-ts-mode)
	  (typescript-mode . typescript-ts-mode)
	  (json-mode . json-ts-mode)
	  (go-mode . go-ts-mode)
	  (yaml-mode . yaml-ts-mode)
	  (css-mode . css-ts-mode)
	  (html-mode . html-ts-mode)
	  (dockerfile-mode . dockerfile-ts-mode)))

  (setq treesit-language-source-alist
	'((templ      "https://github.com/vrischmann/tree-sitter-templ")
	  (bash       "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake      "https://github.com/uyha/tree-sitter-cmake")
	  (css        "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp      "https://github.com/Wilfred/tree-sitter-elisp")
	  (go         "https://github.com/tree-sitter/tree-sitter-go")
	  (gomod      "https://github.com/camdencheek/tree-sitter-go-mod")
	  (html       "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (cpp        "https://github.com/tree-sitter/tree-sitter-cpp")
	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
	  (json       "https://github.com/tree-sitter/tree-sitter-json")
	  (make       "https://github.com/alemuller/tree-sitter-make")
	  (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
	  (python     "https://github.com/tree-sitter/tree-sitter-python")
	  (toml       "https://github.com/tree-sitter/tree-sitter-toml")
	  (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (yaml       "https://github.com/ikatyang/tree-sitter-yaml")
	  (haskell    "https://github.com/tree-sitter/tree-sitter-haskell")
	  (typst      "https://github.com/uben0/tree-sitter-typst")
	  (java       "https://github.com/tree-sitter/tree-sitter-java")
	  (ruby       "https://github.com/tree-sitter/tree-sitter-ruby")
	  (rust       "https://github.com/tree-sitter/tree-sitter-rust"))))


(provide 'treesitter)
;; treesitter.el ends here
#+END_SRC

** EGLOT

#+BEGIN_SRC emacs-lisp :tangle lisp/dev.el
;;; dev.el --- Development Package -*- lexical-binding: t; -*-

(use-package eglot
  :ensure nil
  :custom
  (eglot-autoshutdown t)
  (eglot-sync-connect 1)
  (eglot-events-buffer-size 0)
  (eldoc-echo-area-use-multiline-p nil)
  :bind (:map eglot-mode-map
	      ("C-c a" . eglot-code-actions)
	      ("C-c f" . eglot-format-buffer)
	      ("C-c r" . eglot-rename)
	      ("C-c i" . consult-imenu)
	      ("C-c o" . eglot-code-action-organize-imports))
  :hook ((python-ts-mode . eglot-ensure)
	 (go-ts-mode . eglot-ensure)
	 (yaml-mode . eglot-ensure)
	 (dockerfile-mode . eglot-ensure)
	 (web-mode . eglot-ensure)
	 (css-mode . eglot-ensure)
	 (html-mode . eglot-ensure)
	 (typescript-ts-mode . eglot-ensure)
	 (javascript-ts-mode . eglot-ensure)
	 (json-ts-mode . eglot-ensure)
	 (eglot-managed-mode . my/eglot-setup))
  :config
  (dolist (server '((python-ts-mode   . ("pyright-langserver" "--stdio"))
		    (go-ts-mode       . ("gopls"))
		    (yaml-mode        . ("yaml-language-server" "--stdio"))
		    (dockerfile-mode  . ("docker-langserver" "--stdio"))
		    (web-mode         . ("vscode-html-language-server" "--stdio"))
		    (html-mode        . ("vscode-html-language-server" "--stdio"))
		    (css-mode         . ("vscode-css-language-server" "--stdio"))
		    (javascript-ts-mode . ("typescript-language-server" "--stdio"))
		    (typescript-ts-mode . ("typescript-language-server" "--stdio"))
		    (json-ts-mode     . ("vscode-json-language-server" "--stdio"))))
    (add-to-list 'eglot-server-programs server)))

;; --------------------------------------------------------------
;; 🛠️ Custom Eglot Setup (Auto-format & Keybindings)
;; --------------------------------------------------------------
(defun my/eglot-setup ()
  "Custom configuration for eglot-managed buffers."
  (electric-indent-local-mode t)
  (setq-local completion-category-defaults nil)

  (cond
   ;; Python Setup
   ((derived-mode-p 'python-ts-mode)
    (setq-local indent-tabs-mode nil
		python-indent-offset 4
		python-indent-guess-indent-offset nil)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))

   ;; Golang Setup
   ((derived-mode-p 'go-ts-mode)
    (setq-local tab-width 4
		indent-tabs-mode t)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))

   ;; YAML (Kubernetes, Helm)
   ((derived-mode-p 'yaml-mode)
    (setq-local yaml-indent-offset 2)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))

   ;; Web Development
   ((derived-mode-p 'web-mode)
    (setq-local web-mode-markup-indent-offset 2
		web-mode-css-indent-offset 2
		web-mode-code-indent-offset 2)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))

   ((derived-mode-p 'css-mode)
    (setq-local css-indent-offset 2)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))

   ((derived-mode-p 'javascript-ts-mode 'typescript-ts-mode)
    (setq-local js-indent-level 2)
    (local-set-key (kbd "<f6>") #'eglot-format-buffer))))

;; --------------------------------------------------------------
;; 🚀 Emmet for Fast HTML/CSS Writing
;; --------------------------------------------------------------
(use-package emmet-mode
  :hook ((web-mode . emmet-mode)
	 (css-mode . emmet-mode)
	 (html-mode . emmet-mode))
  :config
  (setq emmet-expand-jsx-className? t))

;; --------------------------------------------------------------
;; 🔥 Web-Mode for JSX, HTML, Vue, etc.
;; --------------------------------------------------------------
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.jsx\\'" "\\.ts\\'" "\\.tsx\\'" "\\.vue\\'")
  :config
  (setq web-mode-enable-auto-quoting nil
	web-mode-enable-current-element-highlight t
	web-mode-markup-indent-offset 2
	web-mode-css-indent-offset 2
	web-mode-code-indent-offset 2
	web-mode-style-padding 2
	web-mode-script-padding 2
	web-mode-enable-auto-opening t
	web-mode-enable-auto-pairing t
	web-mode-enable-auto-indentation t
	web-mode-enable-auto-closing t))

;; --------------------------------------------------------------
;; 🐍 Python Development (Linter + Formatter)
;; --------------------------------------------------------------
(use-package python-black
  :demand t
  :after python
  :hook (python-ts-mode . python-black-on-save-mode))

;; --------------------------------------------------------------
;; 🏗️ Docker & Kubernetes Support
;; --------------------------------------------------------------
(use-package dockerfile-mode
  :mode "Dockerfile\\'")

(use-package k8s-mode
  :hook (k8s-mode . eglot-ensure))

;; --------------------------------------------------------------
;; 🚀 Golang Setup
;; --------------------------------------------------------------
(use-package go-mode
  :mode "\\.go\\'"
  :hook ((go-mode . eglot-ensure)
	 (before-save . gofmt-before-save)))

;; --------------------------------------------------------------
;; 📜 JSON & YAML Formatting
;; --------------------------------------------------------------
(use-package json-mode
  :mode "\\.json\\'")

(use-package yaml-mode
  :mode "\\.yml\\'" "\\.yaml\\'")

;; --------------------------------------------------------------
;; MATLAB Support using Octave (for now 😅)
;; --------------------------------------------------------------

;; Use Octave mode for .m files
(setq auto-mode-alist
      (cons '("\\.m\\'" . octave-mode) auto-mode-alist))

;; Set Octave as the default interpreter in Emacs
(setq inferior-octave-startup-args '("-f"))
(setq inferior-octave-program "/usr/bin/octave")

;; Enable syntax highlighting and indentation
(add-hook 'octave-mode-hook
	  (lambda ()
	    (setq octave-comment-char ?%)
	    (abbrev-mode 1)
	    (auto-fill-mode 1)
	    (electric-indent-mode 1)
	    (setq indent-tabs-mode nil)
	    (setq octave-block-offset 4)
	    (if (eq window-system 'x)
		(font-lock-mode 1))))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((octave . t)))

(add-hook 'inferior-octave-mode-hook
	  (lambda ()
	    (turn-on-font-lock)
	    (define-key inferior-octave-mode-map [up]
	      'comint-previous-input)
	    (define-key inferior-octave-mode-map [down]
	      'comint-next-input)))

(with-eval-after-load 'octave
  (define-key octave-mode-map (kbd "C-c C-l") 'octave-send-line)
  (define-key octave-mode-map (kbd "C-c C-r") 'octave-send-region)
  (define-key octave-mode-map (kbd "C-c C-b") 'octave-send-buffer)
  (define-key octave-mode-map (kbd "C-c C-f") 'octave-send-defun)
  (define-key octave-mode-map (kbd "C-c C-c") 'octave-send-block))

;; (use-package matlab-mode
;;   :ensure t
;;   :mode ("\\.m\\'" . matlab-mode)
;;   :config
;;   (setq matlab-indent-function t)  ;; Smart indentation
;;   (setq matlab-show-mlint-warnings t)  ;; Show MLint warnings
;;   (setq matlab-shell-command "matlab")  ;; MATLAB command
;;   (setq matlab-shell-command-switches '("-nodesktop" "-nosplash"))) ;; No GUI

;; (add-hook 'matlab-mode-hook 'semantic-mode)
;; (require 'ob-matlab)
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((matlab . t)))

;; Custom function to toggle an Octave REPL
(defun open-octave-right-side ()
  "Toggle an Octave REPL in a vertical split on the right side."
  (interactive)
  (let ((octave-buffer (get-buffer "*Inferior Octave*"))
	(octave-window (get-buffer-window "*Inferior Octave*")))
    (if octave-buffer
	(if octave-window
	    (delete-window octave-window)
	  (progn
	    (split-window-right)
	    (other-window 1)
	    (switch-to-buffer octave-buffer)
	    (other-window 1)))
      (progn
	(split-window-right)
	(other-window 1)
	(run-octave)
	(when (get-buffer "*Inferior Octave*")
	  (switch-to-buffer "*Inferior Octave*"))
	(other-window 1)))))

;; --------------------------------------------------------------


(provide 'dev)
;; dev.el ends here
#+END_SRC

** CONDA
   Conda env in emacs

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/conda.el
;;; packages/conda.el --- Conda Integration -*- lexical-binding: t; -*-

(use-package conda
  :ensure t
  :defer t
  :init
  ;; Set base directories (this is lightweight and safe to run on startup)
  (setq conda-anaconda-home (expand-file-name "~/miniconda"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda"))
  :config
  ;; Initialize shells and modeline updates only when Conda is loaded.
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode nil)   ;; Disable global autoactivation.
  (conda-mode-line-setup)              ;; Update modeline when Conda env changes.
  :hook ((python-mode . conda-env-autoactivate-mode)
	 (conda-postactivate-hook . restart-python-shell-with-conda)))


(defun restart-python-shell-with-conda ()
  "Restart Python shell using the currently activated Conda environment."
  (interactive)
  (when (bound-and-true-p conda-env-current-name)
    (let* ((conda-base-path (or (getenv "CONDA_PREFIX") "~/miniconda"))
	   (env-path (if (string= conda-env-current-name "base")
			 conda-base-path
		       (concat conda-base-path "/envs/" conda-env-current-name)))
	   (env-bin (concat env-path "/bin/python"))
	   (python-buffer (get-buffer "*Python*")))
      ;; Kill existing Python shell if running.
      (when (get-process "Python")
	(delete-process "Python"))
      (when python-buffer
	(kill-buffer python-buffer))
      (delete-other-windows)
      (if (file-executable-p env-bin)
	  (progn
	    (setq-local python-shell-interpreter env-bin)
	    (setq-local python-shell-interpreter-args "-i")
	    (setq-local pythonic-interpreter env-bin)  ;; If using pythonic.el.
	    (run-python (concat env-bin " -i") nil nil)
	    (message "Switched Python shell to Conda environment: %s"
		     conda-env-current-name))
	(message "Error: Could not find Python executable at %s" env-bin)))))


(defun open-python-right-side ()
  "Toggle a Python REPL in a vertical split on the right side."
  (interactive)
  (let ((python-buffer (get-buffer "*Python*"))
	(python-window (get-buffer-window "*Python*")))
    (if python-buffer
	(if python-window
	    (progn
	      (delete-window python-window)
	      (other-window 1))
	  (progn
	    (split-window-right)
	    (other-window 1)
	    (run-python)
	    (when (get-buffer "*Python*")
	      (switch-to-buffer "*Python*"))
	    (other-window 1)))
      (progn
	(split-window-right)
	(other-window 1)
	(run-python)
	(when (get-buffer "*Python*")
	  (switch-to-buffer "*Python*"))
	(other-window 1)))))

(setq display-buffer-alist
      '(("\\*compilation\\*"
	 (display-buffer-reuse-window display-buffer-at-bottom)
	 (window-height . 0.3))))


(provide 'packages/conda)
;; packages/conda.el ends here
#+END_SRC

** PYENV

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/pyenv.el
;;; packages/pyenv.el --- Pyenv Integration -*- lexical-binding: t; -*-

(use-package pyvenv
  :ensure t
  :defer t)

(defun pyvenv-autoload ()
  (require 'pyvenv)
  (require 'projectile)
  (interactive)
  "auto activate venv directory if exists"
  (f-traverse-upwards (lambda (path)
	(let ((venv-path (f-expand "env" path)))
	  (when (f-exists? venv-path)
	    (pyvenv-activate venv-path))))))
(add-hook 'python-mode 'pyvenv-autoload)


(provide 'packages/pyenv)
;; packages/pyenv.el ends here
#+END_SRC

-----

* LATEX SETUP
This configuration sets up AUCTeX with RefTeX, citation management, LaTeX preview, and integration with PDF viewers.

** PDF TOOLS
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;;; packages/latex.el --- LaTeX Package -*- lexical-binding: t; -*-

;; ----------------------------------------------------------------------------
;; PDF TOOLS
;; ----------------------------------------------------------------------------

(use-package pdf-tools
  :ensure t
  :defer t
  :commands (pdf-loader-install)
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :custom
  (pdf-view-display-size 'fit-width)
  (pdf-annot-activate-created-annotations t)
  :bind (:map pdf-view-mode-map
	      ("j" . pdf-view-next-line-or-next-page)
	      ("k" . pdf-view-previous-line-or-previous-page)
	      ("C-=" . pdf-view-enlarge)
	      ("C--" . pdf-view-shrink)
	      ("C-s" . isearch-forward)
	      ("C-r" . isearch-backward))
  :init
  (pdf-loader-install)
  :hook (pdf-view-mode . (lambda ()
			   (display-line-numbers-mode -1)
			   (blink-cursor-mode -1)
			   (doom-modeline-mode -1)))
  :config
  (add-to-list 'revert-without-query ".pdf"))


#+END_SRC

** EPUB READER
I am using NOV to read EPUB files.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; EPUB
;; ----------------------------------------------------------------------------

(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-variable-pitch nil) ;; Use fixed-width font
  (setq nov-text-width t)) ;; Adjust text width dynamically


#+END_SRC

** LATEX PREVIW SETUP & SETTINGS

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; LATEX PREVIEW SETTINGS
;; ----------------------------------------------------------------------------

(use-package tex
  :ensure auctex
  :defer t
  :mode ("\\.tex\\'" . LaTeX-mode)
  :hook
  ((LaTeX-mode . LaTeX-math-mode)
   (LaTeX-mode . visual-line-mode)
   (LaTeX-mode . prettify-symbols-mode)
   (LaTeX-mode . rainbow-delimiters-mode)
   (LaTeX-mode . TeX-fold-mode))
  :config
  ;; Basic AUCTeX settings.
  (setq TeX-auto-save t
	TeX-parse-self t
	TeX-PDF-mode t
	TeX-save-query nil)
  ;; Integration with RefTeX.
  (setq reftex-plug-into-AUCTeX t)
  ;; Master file setup: default to main.tex if it exists; otherwise prompt.
  (setq-default TeX-master
		(lambda ()
		  (let ((default-master (concat (file-name-directory (or (buffer-file-name) default-directory))
						"main.tex")))
		    (if (file-exists-p default-master)
			"main.tex"
		      (progn
			(message "main.tex not found, please select a master file")
			(read-file-name "Choose master file: " nil nil t))))))
  ;; LaTeX indentation and electric settings.
  (setq LaTeX-indent-level 2
	LaTeX-item-indent 2
	TeX-electric-math '("$" . "$"))
  ;; LaTeX preview settings.
  (setq preview-auto-cache-preamble t
  ;; preview-default-option-list '("floats" "graphics")
  preview-default-option-list '("displaymath" "graphics" "textmath" "footnotes" "sections" "showlabels" "psfixbb" "floats")
	TeX-show-compilation nil))

(defun clear-latex-build ()
  "Remove all LaTeX compilation files except .tex and .pdf."
  (interactive)
  (when (y-or-n-p "Delete all LaTeX build files except .tex and .pdf? (y/n) ")
    (call-process "/bin/sh" nil nil nil "-c"
		  "rm -rf auto *.prv *.fmt *.aux *.bbl *.blg *.log *.out *.toc *.lof *.lot *.synctex.gz *.fls *.fdb_latexmk _region_.tex")
    (message "LaTeX build files deleted.")))

;;; LATEX FRAGMENT SCALE

(setq preview-scale-function 1.2)


#+END_SRC

** REFTEX

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; REFTEX
;; ----------------------------------------------------------------------------

(use-package reftex
  :ensure nil  ;; RefTeX is built-in
  :defer t
  :preface
  ;; Explicit autoloads if desired (usually not needed)
  (autoload 'reftex-mode "reftex" "RefTeX Minor Mode" t)
  (autoload 'turn-on-reftex "reftex" "RefTeX Minor Mode" nil)
  (autoload 'reftex-citation "reftex-cite" "Make citation" nil)
  (autoload 'reftex-index-phrase-mode "reftex-index" "Phrase mode" t)
  :hook (LaTeX-mode . turn-on-reftex)
  :config
  (setq reftex-plug-into-AUCTeX t
	reftex-enable-partial-scans t
	reftex-save-parse-info t
	reftex-use-multiple-selection-buffers t
	reftex-toc-split-windows-horizontally t
	reftex-toc-split-windows-fraction 0.2))


#+END_SRC

** PREVIEW (ZATHURA)

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; ZATHURA PREVIEW
;; ----------------------------------------------------------------------------

(with-eval-after-load 'tex
  (add-to-list 'TeX-view-program-list
	       `("Zathura"
		 (,(concat (expand-file-name "~/.local/bin/zathura")
			   " --synctex-forward %n:0:%b -x \"emacsclient +%{line} %{input}\" %o"))
		 "zathura"))
  (setq TeX-view-program-selection '((output-pdf "Zathura"))
	TeX-source-correlate-start-server t
	TeX-source-correlate-mode t
	TeX-source-correlate-method 'synctex))


#+END_SRC

** CITAR

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; CITAR
;; ----------------------------------------------------------------------------

(use-package citar
  :ensure t
  :defer t
  :init
  (setq org-cite-insert-processor 'citar
	org-cite-follow-processor 'citar
	org-cite-activate-processor 'citar
	citar-bibliography org-cite-global-bibliography)
	;; citar-notes-paths '("~/Path/To/NotesDir")
	)

(use-package citar-embark
  :after (citar embark)
  :ensure t
  :defer t
  :init
  (setq citar-at-point-function 'embark-act)
  :config
  (citar-embark-mode 1))


#+END_SRC

** AUCTEX-LATEXMK

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; AUCTEX-LATEXMK
;; ----------------------------------------------------------------------------

(use-package auctex-latexmk
  :ensure t
  :defer t
  :config
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))

;; ----------------------------------------------------------------------------
;; CDLATEX
;; ----------------------------------------------------------------------------

(use-package cdlatex
  :ensure t
  :defer t
  :hook (LaTeX-mode . turn-on-cdlatex))


#+END_SRC

** MAGIC LATEX BUFFER

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;; ----------------------------------------------------------------------------
;; MAGIC LATEX BUFFER
;; ----------------------------------------------------------------------------

(use-package magic-latex-buffer
  :ensure t
  :hook (LaTeX-mode . magic-latex-buffer)
  :config
  ;; Enable syntax highlighting and custom styles
  (setq magic-latex-enable-block-highlight t) ;; Highlight environments
  (setq magic-latex-enable-suscript t)        ;; Subscript/Superscript rendering
  (setq magic-latex-enable-inline-image t)    ;; Inline images (e.g., `\includegraphics`)
  (setq magic-latex-enable-minibuffer-echo t) ;; Show formula info in minibuffer

  ;; Define how often it updates (adjust for performance)
  (setq magic-latex-buffer-refresh-delay 0.5)) ;; 0.5s delay for updates


#+END_SRC

** PREVIEW AUTO
Previews latex preview automatically

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/latex.el
;;; PREVIEW AUTO
(use-package preview-auto
  :after latex
  ;; :hook (LaTeX-mode . preview-auto-mode)
  :config
  (setq preview-protect-point t)
  (setq preview-locating-previews-message nil)
  (setq preview-leave-open-previews-visible t)
  :custom
  (preview-auto-interval 0.1)

  ;; Uncomment the following only if you have followed the above
  ;; instructions concerning, e.g., hyperref:

  (preview-LaTeX-command-replacements '(preview-LaTeX-disable-pdfoutput)))


(provide 'packages/latex)
;; packages/latex.el ends here
#+END_SRC

** Xenops
- TANGLE it if you want to use `xenops` (Alternative to Preview-Latex) for real-time LaTeX rendering.

#+BEGIN_SRC emacs-lisp :tangle no
;;; XENOPS

(use-package xenops
  :ensure t
  :hook ((LaTeX-mode . xenops-mode)  ;; Enable Xenops for LaTeX-mode
	 ;; (org-mode . xenops-mode) ;; Uncomment if needed for Org
	 )
  :config

  ;; Ensure cache directory exists
  (setq xenops-cache-directory (expand-file-name "xenops-cache"
						 (or (getenv "XDG_CACHE_HOME") "~/.cache/")))

  ;; Customize LaTeX preview appearance
  (setq xenops-math-image-scale-factor 1.2) ;; Adjust image size
  (setq xenops-math-latex-process 'dvisvgm) ;; Use dvisvgm for better rendering

  ;; Ensure bold math symbols
  (setq xenops-math-latex-packages '("amsmath" "amssymb" "bm"))
  (setq xenops-math-latex-macros '("\\renewcommand{\\mathbf}[1]{\\bm{#1}}")))


(provide 'packages/latex)
;; packages/latex.el ends here
#+END_SRC

** ARCHIVES

*** CUSTOM FUNCTION FOR PREVIEW

#+BEGIN_SRC emacs-lisp :tangle no
;;; ============================================================
;;; Additional Preview Hooks (Optional)
;;; ============================================================
;; These hooks allow LaTeX fragment previews to be generated on file open
;; and automatically when saving the buffer. (Enable only if desired.)
(defun my-initial-preview ()
  "Generate preview for the current document.
This function is intended to be called on file open."
  (save-excursion
    (preview-document)))

(define-minor-mode my-preview-at-save-mode
  "Minor mode to preview LaTeX fragments on save."
  :init-value nil
  :global nil
  (if my-preview-at-save-mode
      (add-hook 'after-save-hook #'my-initial-preview nil t)
    (remove-hook 'after-save-hook #'my-initial-preview t)))

(with-eval-after-load 'preview
  ;; Add the preview functions to LaTeX-mode if the preview package is loaded.
  ;; (add-hook 'LaTeX-mode-hook #'my-initial-preview t)
  (add-hook 'LaTeX-mode-hook #'my-preview-at-save-mode))

;;; PDF TOOLS FOR LATEX PREVIEW (ALTERNATIVE)

;;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
;;       TeX-source-correlate-start-server t)


#+END_SRC

-----

* ORG LATEX
  Org to latex and preview settings.

** LATEX COMPILER & BASIC PREVIEW SETTINGS
- Sets the LaTeX compiler to use xelatex.
- Enables the use of listings.
- Configures the default LaTeX preview process to use dvisvgm.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/org-latex.el
;;; packages/org-latex.el --- Org LaTeX Setup -*- lexical-binding: t; -*-

;; ------------------------------------------------------------
;; LATEX COMPILER & BASIC PREVIEW SETTINGS
;; ------------------------------------------------------------

(setq org-latex-compiler "xelatex")
(setq org-latex-pdf-process '("xelatex %f"))
(setq org-latex-listings t)
(setq org-preview-latex-image-directory "~/.cache/emacs/lxtimg/")
(setq org-latex-preview-lxtpng-directory "~/.cache/emacs/lxtimg/")

(define-key org-mode-map (kbd "M-p") 'org-latex-export-to-pdf)


#+END_SRC

** CUSTOM LATEX CLASSES
- Adds a custom LaTeX class ("org-plain-latex") for exporting Org documents.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/org-latex.el
;; ------------------------------------------------------------
;; CUSTOM LATEX CLASSES FOR ORG EXPORT
;; ------------------------------------------------------------

(with-eval-after-load 'ox-latex
  (dolist (class
	   '(("IEEEtran" "\\documentclass[conference]{IEEEtran}"
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     ("article" "\\documentclass[11pt]{article}"
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	     ("report" "\\documentclass[11pt]{report}"
	      ("\\part{%s}" . "\\part*{%s}")
	      ("\\chapter{%s}" . "\\chapter*{%s}")
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     ("book" "\\documentclass[11pt]{book}"
	      ("\\part{%s}" . "\\part*{%s}")
	      ("\\chapter{%s}" . "\\chapter*{%s}")
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     ("org-plain-latex" "\\documentclass{article}
	       [NO-DEFAULT-PACKAGES]
	       [PACKAGES]
	       [EXTRA]"
	      ("\\section{%s}" . "\\section*{%s}")
	      ("\\subsection{%s}" . "\\subsection*{%s}")
	      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	      ("\\paragraph{%s}" . "\\paragraph*{%s}")
	      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    (add-to-list 'org-latex-classes class)))


#+END_SRC

** ORG LATEX PREVIEW

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/org-latex.el
;; ------------------------------------------------------------
;; ORG LATEX PREVIEW
;; ------------------------------------------------------------

;; Increase LaTeX preview size
(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 2.0)) ;; Adjust as needed

;; Use dvisvgm for SVG-based previews (default)
(setq org-latex-create-formula-image-program 'dvisvgm) ;; Use dvisvgm for better compatibility
(setq org-preview-latex-default-process 'dvisvgm) ;; Default to dvisvgm

(setq org-startup-with-latex-preview t)


;; Prevent navigation commands from triggering LaTeX previews
(setq org-latex-preview-auto-ignored-commands
      '(next-line previous-line mwheel-scroll
	scroll-up-command scroll-down-command))

;; Enable consistent equation numbering
(setq org-latex-preview-numbered t)

;; Enable live previews for real-time LaTeX updates
(setq org-latex-preview-live t)

;; Reduce delay for faster live previews
(setq org-latex-preview-live-debounce 0.25)

;; ;; Stolen from the package ov (Center Previews)

;; (defun ov-at (&optional point)
;;   "Get an overlay at POINT.
;; POINT defaults to the current `point'."
;;   (or point (setq point (point)))
;;   (car (overlays-at point)))
;; ;; https://www.reddit.com/r/emacs/comments/169keg7/comment/jzierha/?utm_source=share&utm_medium=web2x&context=3
;; (defun org-justify-fragment-overlay (beg end image &optional imagetype)
;;   "Only equations at the beginning and also end of a line are justified."
;;   (if
;;    (and (= beg (line-beginning-position)) (= end (line-end-position)))
;;    (let* ((ov (ov-at))
;;   (disp (overlay-get ov 'display)))
;;      (overlay-put ov 'line-prefix `(space :align-to (- center (0.5 . ,disp)))))))
;; (advice-add 'org--make-preview-overlay :after 'org-justify-fragment-overlay)

;; ;; Automatically refresh LaTeX previews on save or edits

;; (add-hook 'org-mode-hook
;;	  (lambda ()
;;	    (add-hook 'after-save-hook 'org-latex-preview nil 'local)
;;	    (add-hook 'after-change-functions
;;		      (lambda (&rest _) (org-latex-preview)) nil 'local)))

#+END_SRC

#+RESULTS:
: 0.25

** CITATION AND BIBLIOGRAPHY INTEGRATION
- Loads citeproc for citation formatting.
- Requires additional citation backends (oc-csl, oc-biblatex, oc-natbib).
- Uncomment and adjust the bibliography path if needed.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/org-latex.el
;; ------------------------------------------------------------
;; CITATION
;; ------------------------------------------------------------

(use-package citeproc
  :ensure t
  :defer t)


(with-eval-after-load 'org
  (require 'oc-csl)
(require 'oc-biblatex)
(require 'oc-natbib))
;; (setq org-cite-global-bibliography '("~/Path/To/bibliographyFile"))


#+END_SRC

** ARCHIVES

*** ORG FRAGTOP
- Automatically toggles LaTeX fragment previews when editing Org files.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/org-latex.el
;;; ORG FRAGTOP

(use-package org-fragtog
  :ensure t
  :defer t)
(add-hook 'org-mode-hook 'org-fragtog-mode)


(provide 'packages/org-latex)
;; packages/org-latex.el ends here
#+END_SRC

-----

* MARKDOWN

** MARKDOWN SETUP
Markdown Preview in both Markdown buffers and Org preview in md formats using browser.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/markdown.el
;;; packages/markdown.el --- Markdown Setup -*- lexical-binding: t; -*-

;;; ============================================================
;;; MARKDOWN SETUP
;;; ============================================================

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode))

(eval-after-load "org"
  '(require 'ox-md nil t))

;; -----------------------------------------------------------
;; OX-GFM FOR GITHUB-FLAVORED MARKDOWN EXPORT
;; -----------------------------------------------------------
(use-package ox-gfm
  :ensure t
  :after org
  :defer t)

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist
	     '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))


#+END_SRC

** OX-HUGO
OX-HUGO is to convert org files into hugo supported markdown file

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/markdown.el
;; ----------------------------------------------------------------
;; OX-HUGO
;; ----------------------------------------------------------------

(use-package ox-hugo
  :ensure ( :host github
	      :repo "kaushalmodi/ox-hugo"
	      :branch "main")
  :after ox)

;; Function to insert the current date
(defun insert-current-date ()
  "Insert the current date in the format YYYY-MM-DD at the point."
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

;; Bind the function to C-c d in Org mode
(add-hook 'org-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c d") 'insert-current-date)))

;; Function to insert the current time in 24-hour format
(defun insert-current-time ()
  "Insert the current time in the format HH:MM at the point."
  (interactive)
  (insert (format-time-string "%H:%M")))

;; Bind the function to C-c t in Org mode
(add-hook 'org-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c t") 'insert-current-time)))



#+END_SRC

** MARKDOWN PREVIEW MODE

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/markdown.el
;; ------------------------------------------------------------
;; MARKDOWN PREVIEW MODE
;; ------------------------------------------------------------

(use-package markdown-preview-mode
  :ensure t
  :commands (markdown-preview-mode
	     markdown-preview-open-browser
	     markdown-preview-cleanup)
  :init
  ;; Set your Markdown processor (by default it uses "markdown")
  ;; If you want to use multimarkdown, make sure it's installed and in your PATH.
  ;(setq markdown-command "multimarkdown")
  :config
  ;; Optional: add extra JavaScript (e.g., MathJax)
  (add-to-list 'markdown-preview-javascript
	       "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"))

;; Additional CSS
;; (setq markdown-preview-stylesheets
;;       (list "http://thomasf.github.io/solarized-css/solarized-light.min.css"))


#+END_SRC

** MARKDOWN LATEX PREVIEW
   Latex preview in Markdown file itsef

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/markdown.el
;; ------------------------------------------------------------
;; MARKDOWN LATEX PREVIEW
;; ------------------------------------------------------------

(use-package preview-tailor
  :ensure t
  :after preview
  :config
  (preview-tailor-init)
  :hook
  (kill-emacs . preview-tailor-save))

;; Preview Latex in markdown buffer as well using a temporary TeX file with preview auto mode.

(defun my-markdown-preview-hook ()
  "Setup LaTeX preview for Markdown mode with a fresh temporary TeX file."
  (setq-local preview-tailor-local-multiplier 0.7)

  ;; Always create a new temporary LaTeX file
  (setq-local my-preview-master (make-temp-file "preview-master" nil ".tex"))
  (with-temp-file my-preview-master
    (insert "\\documentclass{article}\n"
	    "\\usepackage{amsmath, amssymb}\n"
	    "\\begin{document}\n"
	    "% Your LaTeX preview content will be inserted here\n"
	    "\\end{document}\n"))

  (setq-local TeX-master my-preview-master)
  (preview-auto-mode))

(add-hook 'markdown-mode-hook 'my-markdown-preview-hook)


(provide 'packages/markdown)
;; packages/markdown.el ends here
#+END_SRC

** ARCHIVES

** IMPATIENT MODE

#+BEGIN_SRC emacs-lisp :tangle no
;;; IMPATIENT MODE

(use-package impatient-mode
  :ensure t
  :hook (web-mode . impatient-mode))


#+END_SRC

*** CUSTOM FUNCTION FOR MARKDOWN LIVE PREVIEW

#+BEGIN_SRC emacs-lisp :tangle no
;;; MARKDOWN LIVE PREVIEW

;; --------------------------------
;; CUSTOM PACKAGE FOR MARKDOWN PREVIEW FUNCTIONS
;; - This dummy package holds our custom Markdown preview functions.
;; - It is deferred (i.e. not loaded at startup) and provides commands for
;;   live Markdown preview and Org Markdown preview.
;; --------------------------------

(defun markdown-html (buffer)
  "Render Markdown from BUFFER into GitHub-styled HTML with scroll preservation."
  (princ (with-current-buffer buffer
	   (format "<!DOCTYPE html>
<html>
<head>
  <meta charset=\"UTF-8\">
  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/he/1.1.1/he.js\"></script>
  <link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/github-e6bb18b320358b77abe040d2eb46b547.css\">
  <link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/frameworks-95aff0b550d3fe338b645a4deebdcb1b.css\">
  <script type=\"text/javascript\" async src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>
  <script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js\"></script>
  <title>Impatient Markdown</title>
  <script>
    // Restore scroll position on load
    document.addEventListener('DOMContentLoaded', function() {
      var saved = sessionStorage.getItem('imp-scroll');
      if (saved) {
	window.scrollTo(0, parseInt(saved, 10));
      }
      // Observe mutations and try to restore scroll if needed
      new MutationObserver(function() {
	var saved = sessionStorage.getItem('imp-scroll');
	if (saved) { window.scrollTo(0, parseInt(saved, 10)); }
      }).observe(document.body, {childList: true, subtree: true});
    });
    // Save scroll position on scroll
    window.addEventListener('scroll', function() {
      sessionStorage.setItem('imp-scroll', window.pageYOffset);
    });
  </script>
</head>
<body>
  <div id=\"markdown-content\" style=\"display:none\">%s</div>
  <div class=\"markdown-body\" style=\"max-width:968px;margin:0 auto;\"></div>
  <script>
    fetch('https://api.github.com/markdown', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ \"text\": document.getElementById('markdown-content').innerHTML, \"mode\": \"gfm\", \"context\": \"knit-pk/homepage-nuxtjs\" })
    }).then(response => response.text()).then(response => {
      document.querySelector('.markdown-body').innerHTML = he.decode(response);
      MathJax.typesetPromise();
    }).then(() => {
      fetch(\"https://gist.githubusercontent.com/FieryCod/b6938b29531b6ec72de25c76fa978b2c/raw/\")
      .then(response => response.text()).then(eval);
    });
  </script>
</body>
</html>"
		   (buffer-substring-no-properties (point-min) (point-max))))
	 (current-buffer)))


(defun markdown-preview-auto ()
  "Start HTTP server, enable `impatient-mode`, set user filter to `markdown-html`, and open preview."
  (interactive)
  ;; Start the HTTP server if not already running
  (unless (process-status "httpd")
    (httpd-start))
  ;; Enable impatient mode
  (impatient-mode 1)
  ;; Set the user filter function to render Markdown like GitHub
  (setq imp-user-filter #'markdown-html)
  ;; Refresh the impatient mode state
  (cl-incf imp-last-state)
  (imp--notify-clients)
  ;; Open the preview in the browser
  (browse-url "http://localhost:8080/imp"))


#+END_SRC

-----

* ORG MODE
This configuration sets up Org Agenda, auto-tangling, visual enhancements (bullets, centering, fonts), definitions, and advanced features such as Org Roam, Org-Tempo, and more. This also contains some of the programming modes using org mode such as latex and markdown.

** SETTINGS
Some settings that will make the UI look and feel more appealing(Personal) and also enhancing features in org mode.

*** TOC & INDENTATION
Allows us to create a Table of Contents in our Org docs. And also preserving Indentation on Org Bable Tangle

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;;; org-config.el --- Org Config -*- lexical-binding: t; -*-

;; ------------------------------------------------
;; TOC & INDENTATION
;; ------------------------------------------------

(use-package toc-org
    :ensure t
    :defer t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

(setq org-src-preserve-indentation t
      org-src-fontify-nativelt t
      org-src-window-setup 'current-window
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)

;; Prevent '<>' from auto-pairing in Org mode (fix for org-tempo)
(add-hook 'org-mode-hook
	  (lambda ()
	    (setq-local electric-pair-inhibit-predicate
			`(lambda (c)
			   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(eval-after-load 'org-indent '(diminish 'org-indent-mode)) ;; Removes "Ind" from showing in the modeline.
(setq org-insert-heading-respect-content t) ;; M-RET will enter heading after the text w.r.t the previous heading


#+END_SRC

*** UI
Some UI Settings

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;;; ORG UI SETTINGS
;; ------------------------------------------------

(use-package org-modern
  :ensure t
  :hook ((org-mode . org-modern-mode)
	 (org-agenda-finalize-hook . org-modern-agenda))
  :custom ((org-modern-todo t)
	   (org-modern-table t)
	   (org-modern-variable-pitch t) ;; Enables proportional fonts for text
	   (org-modern-block-fringe t))
  :commands (org-modern-mode org-modern-agenda)
  :config (setq org-modern-star '("◉" "○" "◆" "◇" "▶")
     org-modern-list '((?- . "•") (?+ . "➤") (?* . "▹")))
  :init (global-org-modern-mode))

;; --------------------------------------------------
;; ORG TRANSCLUSION
;; --------------------------------------------------

(use-package org-transclusion
  :after org
  :bind ("C-c M-t" . org-transclusion-add))

;; --------------------------------------------------
;; ORG CUSTOM HEADER FACES
;; --------------------------------------------------

(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.05))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.00))))
 '(org-document-title ((t (:height 1.6 :weight bold))))
 '(org-block ((t (:inherit fixed-pitch :background "#282c34"))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#98be65")))))

;; --------------------------------------------------
;; ORG SUPERSTAR (ALTERNATIVE TO ORG BULLETS)
;; --------------------------------------------------

(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
	org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦))))

(setq org-checkbox-hierarchical-statistics nil
      org-checkbox-image "\\([%])\\")

;; Prettify Org mode with `org-appear`
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode))


#+END_SRC

** ORG REMARKS
Lets you highlight text in org mode.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG REMARKS
;; ------------------------------------------------

(use-package org-remark
  :ensure t
  :bind (("C-c n m" . org-remark-mark)
	 ("C-c n l" . org-remark-mark-line)
	 :map org-remark-mode-map
	 ("C-c n o" . org-remark-open)
	 ("C-c n ]" . org-remark-view-next)
	 ("C-c n [" . org-remark-view-prev)
	 ("C-c n r" . org-remark-remove)
	 ("C-c n d" . org-remark-delete))
  :config
  (org-remark-global-tracking-mode +1)  ;; Moved inside :config to ensure `org-remark` is loaded
  ;; Optional modes
  (with-eval-after-load 'nov
    (org-remark-nov-mode +1))
  (with-eval-after-load 'info
    (org-remark-info-mode +1)))


#+END_SRC

** HIGHLIGHT TODO
Highlights the TODO keywords with different colors.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; HIGHLIGHT TODO
;; ------------------------------------------------

(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
	 (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
	hl-todo-keyword-faces
	`(("TODO" warning bold)
	  ("FIXME" error bold)
	  ("HACK" font-lock-constant-face bold)
	  ("REVIEW" font-lock-keyword-face bold)
	  ("NOTE" success bold)
	  ("DEPRECATED" font-lock-doc-face bold))))


#+END_SRC

** Org-Tempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+BEGIN_SRC emacs-lisp
;;; ORG TEMPO

(require 'org-tempo)


#+END_SRC

** CENTER ORG MODE
Centering Org Mode to get ZEN mode feel.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; --------------------------------------------------
;; CENTER ORG MODE
;; --------------------------------------------------

(defun karna/org-mode-visual-fill ()
  (setq visual-fill-column-width 180
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . karna/org-mode-visual-fill))


#+END_SRC

** ORG AUTO TANGLE
org-auto-tangle allows you to add the option #+auto_tangle: t in your Org file so that it automatically tangles when you save the document.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG AUTO TANGLE
;; ------------------------------------------------

(use-package org-auto-tangle
  :defer t
  :diminish
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun karna/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (org-end-of-line)
  (newline)
  (insert "#+auto_tangle: t")
  (evil-force-normal-state))


#+END_SRC

** ORG MERMAID
Evaluate Mermaid code in org mode

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG MERMAID
;; ------------------------------------------------

(use-package mermaid-mode
  :ensure t)

;; Install Mermaid CLI using - sudo npm install -g @mermaid-js/mermaid-cli
(use-package ob-mermaid
  :ensure t
  :config
  (setq ob-mermaid-cli-path "/usr/bin/mmdc") ;; Adjust this path to your mermaid-cli
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((mermaid . t))))


#+END_SRC

** ORG EVAL

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG EVAL
;; ------------------------------------------------

(setq org-confirm-babel-evaluate nil
      org-babel-clojure-backend 'cider
      org-babel-lisp-eval-fn #'sly-eval)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sqlite . t) (haskell . t) (emacs-lisp . t) (shell . t) (python . t)
   (C . t) (lua . t) (dot . t) (java . t)
   (lisp . t) (clojure . t) (scheme . t)
   (forth . t) (R . t)))


#+END_SRC

** ORG DEFINITIONS
Defining some of the org variable settings

*** Org Mode Core Settings
This section sets up basic Org mode options such as the Org directory, default notes file, ellipsis, heading bullets, log settings, link abbreviations, table conversion limits, and todo keywords.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG MODE CORE SETTINGS
;; ------------------------------------------------

(setq org-directory "/mnt/Karna/Git/Project-K/Org/"
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ⬎ "
      org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
      org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
      org-hide-emphasis-markers t
      ;; ex. of org-link-abbrev-alist in action
      ;; [[arch-wiki:Name_of_Page][Description]]
      org-link-abbrev-alist
	'(("google" . "http://www.google.com/search?q=")
	  ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
	  ("ddg" . "https://duckduckgo.com/?q=")
	  ("wiki" . "https://en.wikipedia.org/wiki/"))
      org-table-convert-region-max-lines 20000)


(setq org-todo-keywords
      '((sequence "IDEA(i)"      ; Generate research ideas
		  "LIT(l)"       ; Conduct literature review
		  "CODE(c)"      ; Develop code/algorithms
		  "TEST(t)"      ; Test implementations or experiments
		  "WRITE(w)"     ; Document findings or draft manuscripts
		  "REVIEW(r)"    ; Revise based on feedback
		  "|"
		  "SUBMITTED(s)" ; Work submitted for review/publication
		  "PUBLISHED(p)" ; Work published (or defended)
		  "ABANDONED(x)") ; Project discontinued
	(sequence "TODO(T)"       ; Basic task: not yet started
		  "NEXT(n)"       ; Basic task: immediate next action
		  "|"
		  "DONE(d!)"))) ; Basic task: completed

;; --------------------------------------------------
;; ORG EXPORT
;; --------------------------------------------------

(setq org-export-backends '(md org ascii html icalendar latex odt)
      org-export-with-toc nil)

;; Load export backends
(require 'ox-md)
(require 'ox-org)


#+END_SRC

*** Org Refiler Settings
This section configures the refile targets and ensures that Org buffers are saved after refile operations.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-config.el
;; ------------------------------------------------
;; ORG REFILE SETTINGS
;; ------------------------------------------------

(setq org-bookmark-names-plist nil) ;; Stop bookmarking on org captures and refiling

(setq org-refile-targets
      '(("Tasks.org" :maxlevel . 1)))

(setq org-hide-drawers '("PROPERTIES"))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)


(provide 'org-config)
;; org-config.el ends here
#+END_SRC

** AGENDA
This section configures Org Agenda by specifying agenda files, enabling log mode, setting logging behavior, and customizing agenda views.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-agenda-config.el
;;; org-agenda-config.el --- ORG Agenda Config -*- lexical-binding: t; -*-

(require 'org-habit)

(use-package org-super-agenda
  :ensure t
  :config
  (setq org-super-agenda-groups
	'((:name "🔥 Urgent" :priority "A" :order 1) ; High-priority tasks
	  (:name "📅 Today" :time-grid t :order 2) ; Tasks for today
	  (:name "📚 Research" :tag "research" :order 3) ; Research group
	  (:name "📖 Study" :tag "study" :order 4) ; Study tasks
	  (:name "🏡 Home" :tag "home" :order 5) ; Home tasks
	  (:name "🔔 Remainder" :tag "remainder" :order 6) ; Remainders
	  (:name "💪 Gym" :tag "gym" :order 7) ; Gym/habits
	  (:name "❌ Quit" :tag "quit" :order 99) ; Abandoned tasks
	  (:name "Other" :auto-group t :order 100))) ; Catch-all group

  (setq org-tag-alist
	'((:startgroup)
	  ("study"    . ?s) ; Study tasks
	  ("home"     . ?h) ; Home tasks
	  ("remainder". ?r) ; Remainders
	  ("gym"      . ?g) ; Gym/habits
	  ("research" . ?R) ; Research tasks
	  (:endgroup)
	  ("litreview" . ?l) ; Literature review (sub-step of research)
	  ("experiment". ?e) ; Experiments (sub-step of research)
	  ("writing"   . ?w) ; Writing (sub-step of research)
	  ("quit" . ?x))) ; Abandoned tasks

  (org-super-agenda-mode))

(advice-add 'org-agenda-todo :after #'org-save-all-org-buffers)

(setq org-agenda-files (directory-files-recursively org-directory "\\.org$") )
(setq org-agenda-start-on-weekday nil) ; - to see from current day instead of from Monday
(setq org-agenda-start-day "-1d") ; - that's only for seeing week from yesterday, not from today

(setq org-agenda-start-with-log-mode t
      org-log-done 'time
      org-log-into-drawer t)

;; Fancy Priorities Settings
(setq org-fancy-priorities-list '("🟥" "🟧" "🟨")
      org-priority-faces
      '((?A :foreground "#ff6c6b" :weight bold)  ; High priority (🟥)
	(?B :foreground "#98be65" :weight bold)  ; Medium priority (🟧)
	(?C :foreground "#c678dd" :weight bold)) ; Low priority (🟨)
      org-agenda-block-separator 8411)

;; Org Agenda Custom Commands
(setq org-agenda-custom-commands
      '(
	;; Dashboard: Agenda view + Next Tasks + Active Projects
	("d" "Dashboard"
	 ((agenda "" ((org-deadline-warning-days 7)))
	  (todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))
	  (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	;; Next Tasks: Focused view on tasks marked as NEXT
	("n" "Next Tasks"
	 ((todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))))

	;; Work & Location-Based Tasks: Filter tasks by location tags
	("w" "Work & Location Tasks"
	 ((tags-todo "+@lab")
	  (tags-todo "+@office")
	  (tags-todo "+@errand")
	  (tags-todo "+@home")))

	;; Low-Effort Tasks: Show NEXT tasks with low estimated effort
	("e" "Low-Effort Tasks"
	 ((tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
		     ((org-agenda-overriding-header "Low Effort Tasks")
		      (org-agenda-max-todos 20)
		      (org-agenda-files org-agenda-files)))))

	;; Unified Research Workflow
	("r" "Unified Research Workflow"
	 ((todo "IDEA"      ((org-agenda-overriding-header "Research Ideas")))
	  (todo "LIT"       ((org-agenda-overriding-header "Literature Review")))
	  (todo "CODE"      ((org-agenda-overriding-header "Development / Coding")))
	  (todo "TEST"      ((org-agenda-overriding-header "Testing / Experiments")))
	  (todo "WRITE"     ((org-agenda-overriding-header "Writing / Documentation")))
	  (todo "REVIEW"    ((org-agenda-overriding-header "Revision / Feedback")))
	  (todo "SUBMITTED" ((org-agenda-overriding-header "Submitted Work")))
	  (todo "PUBLISHED" ((org-agenda-overriding-header "Published Work")))
	  (todo "ABANDONED" ((org-agenda-overriding-header "Discontinued Projects")))))

	;; Priority-Based View: Unfinished tasks by custom priority tags
	("v" "Priority View"
	 ((tags "PRIORITY=\"A\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "High-Priority Tasks")))
	  (tags "PRIORITY=\"B\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "Medium-Priority Tasks")))
	  (tags "PRIORITY=\"C\""
		((org-agenda-skip-function
		  '(org-agenda-skip-entry-if 'todo 'done))
		 (org-agenda-overriding-header "Low-Priority Tasks")))
	  (agenda "")
	  (alltodo "")))))


(provide 'org-agenda-config)
;; org-agenda-config.el ends here
#+END_SRC

** ORG ROAM & JOURNAL CONFIGURATION
This section sets up Org Roam for advanced note-taking and integrates Org Journal and dailies. The configuration includes custom capture templates for different note types.

*** Org Roam Setup
This part uses `use-package` to load Org Roam, enables v2 features, auto-sync, and completion everywhere.
The custom capture templates allow you to quickly create new notes for default entries, programming languages, book notes, and projects.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-roam-config.el
;;; org-roam-config.el --- Org Roam Config -*- lexical-binding: t; -*-

(use-package org-roam
  :ensure t
  :defer t
  :init
  (setq org-roam-v2-ack t)   ; Acknowledge the v2 upgrade message
  :custom
  (org-roam-db-autosync-mode)           ; Automatically sync the Org Roam database
  (org-roam-completion-everywhere t)     ; Enable completion everywhere
  ;; (org-roam-dailies-capture-templates
  ;;     '(("d" "default" entry "* %<%I:%M %p>: %?"
  ;;        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     ("l" "programming language" plain
      "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n")
      :unnarrowed t)
     ("b" "book notes" plain
      (file "/mnt/Karna/Git/Project-K/Org/Templates/BooknoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			  "#+title: ${title}\n#+filetags: Project")
      :unnarrowed t)))
  :config
  (org-roam-setup))

;;; ORG ROAM DIRECTORIES & GRAPH VIEWER

(with-eval-after-load 'org
  (setq org-roam-directory "/mnt/Karna/Git/Project-K/Org/Roam/"
	org-roam-graph-viewer "/usr/bin/zen-browser"))

(setq org-roam-dailies-directory "/mnt/Karna/Git/Project-K/Org/Journal/")

;; Org Roam UI for Knowledge Graph Visualization

(use-package simple-httpd)

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
	org-roam-ui-follow t
	org-roam-ui-update-on-save t
	org-roam-ui-open-on-start t))


#+END_SRC

*** Org Journal Setup
This configuration sets up Org Journal with custom date/time prefixes, file format, and directory.

#+BEGIN_SRC emacs-lisp :tangle lisp/org-roam-config.el
;;; ORG JOURNAL SETUP

(setq org-journal-dir "/mnt/Karna/Git/Project-K/Org/Journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")


(provide 'org-roam-config)
;; org-roam-config.el ends here
#+END_SRC

-----

* SHELLS AND TERMINALS
I use ESHELL and VTERM as default terminal and shell in Emacs.

** ESHELL
Eshell is an Emacs 'shell' that is written in Elisp.

#+BEGIN_SRC emacs-lisp :tangle lisp/shells.el
;;; shells.el --- Shell Configuration -*- lexical-binding: t; -*-

;; -------------------------------------------------------------------------
;; ESHELL CONFIGURATION
;; -------------------------------------------------------------------------

(setopt eshell-prompt-function 'fancy-shell)
(setopt eshell-prompt-regexp "^[^#$\n]* [$#] ")
(setopt eshell-highlight-prompt nil)

;; Disabling company mode in eshell, because it's annoying.
(setq company-global-modes '(not eshell-mode))

;; Adding a keybinding for 'pcomplete-list' on F9 key.
(add-hook 'eshell-mode-hook
	  (lambda ()
	    (define-key eshell-mode-map (kbd "<f9>") #'pcomplete-list)))


;; A function for easily creating multiple buffers of 'eshell'.
;; NOTE: `C-u M-x eshell` would also create new 'eshell' buffers.
(defun eshell-new (name)
  "Create new eshell buffer named NAME."
  (interactive "sName: ")
  (setq name (concat "$" name))
  (eshell)
  (rename-buffer name))

(use-package eshell-toggle
  :ensure t
  :defer t
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
	eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
	eshell-history-size 5000
	eshell-buffer-maximum-lines 5000
	eshell-hist-ignoredups t
	eshell-scroll-to-bottom-on-input t
	eshell-destroy-buffer-when-process-dies t
	eshell-visual-commands'("bash" "zsh" "htop" "ssh" "top" "fish"))


#+END_SRC

** VTERM
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+BEGIN_SRC emacs-lisp :tangle lisp/shells.el
;; -------------------------------------------------------------------------
;; VTERM
;; -------------------------------------------------------------------------

(use-package vterm
:ensure t
:defer t
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))


#+END_SRC

** VTERM TOGGLE
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+BEGIN_SRC emacs-lisp :tangle lisp/shells.el
;; -------------------------------------------------------------------------
;;; VTERM TOGGLE
;; -------------------------------------------------------------------------

(use-package vterm-toggle
  :after vterm
  :ensure t
  :defer t
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		  (display-buffer-reuse-window display-buffer-at-bottom)
		  ;;(display-buffer-reuse-window display-buffer-in-direction)
		  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		  ;;(direction . bottom)
		  ;;(dedicated . t) ;dedicated is supported in emacs27
		  (reusable-frames . visible)
		  (window-height . 0.4))))


#+END_SRC

** VTERM MULTI

#+BEGIN_SRC emacs-lisp :tangle lisp/shells.el
;; -------------------------------------------------------------------------
;; VTERM MULTI
;; -------------------------------------------------------------------------

(use-package multi-vterm
	:config
	(add-hook 'vterm-mode-hook
			(lambda ()
			(setq-local evil-insert-state-cursor 'box)
			(evil-insert-state)))
	(define-key vterm-mode-map [return]                      #'vterm-send-return)

	(setq vterm-keymap-exceptions nil)
	(evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
	(evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	(evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
	(evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
	(evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
	(evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
	(evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
	(evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))


(provide 'shells)
;; shells.el ends here
#+END_SRC

-----

* CALENDAR
Let’s make a 12-month calendar available so we can have a calendar app that, we get a nice 12-month calendar to view.
This is a modification of: http://homepage3.nifty.com/oatu/emacs/calendar.html
  See also: https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months - Copied from DISTROTUBE

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/calendar.el
;;; packages/calendar.el --- Calendar Package -*- lexical-binding: t; -*-

;; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months

(use-package calfw :ensure t :defer t)
(use-package calfw-org :ensure t :defer t)
;;(use-package calendar)

(defun karna/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
	(calendar-generate-month
	  (setq month (+ month 1))
	  year
	  ;; indentation / spacing between months
	  (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun karna/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
	      (year (+ displayed-year arg)))
	(karna/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun karna/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		     last-nonmenu-event))
  (karna/scroll-year-calendar-forward (- (or arg 1)) event))

(defalias 'year-calendar 'karna/year-calendar)


(provide 'packages/calendar)
;; packages/calendar.el ends here
#+END_SRC

-----

* CENTAUR TABS
[[https://github.com/ema2159/centaur-tabs][Centaur Tabs]] is an Emacs package that enhances the tab bar functionality, providing a more visually appealing and user-friendly way to manage multiple open buffers (files) within the editor.

#+BEGIN_SRC emacs-lisp :tangle lisp/packages/centaur-tabs.el
;;; packages/centaur-tabs.el --- Centaur Tabs Package -*- lexical-binding: t; -*-

(use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)

:config
;; Appearance settings
(setq centaur-tabs-style "bar"
      centaur-tabs-height 25
      centaur-tabs-set-icons t
      centaur-tabs-show-new-tab-button t
      centaur-tabs-set-modified-marker t
      centaur-tabs-modified-marker "•"
      centaur-tabs-show-navigation-buttons t
      centaur-tabs-set-bar 'over
      centaur-tabs-show-count nil
      centaur-tabs-label-fixed-length 15
      centaur-tabs-gray-out-icons 'buffer
      x-underline-at-descent-line t
      centaur-tabs-left-edge-margin nil)

;; Hide specific buffers
(setq centaur-tab-buffer-local-list '(("\*scratch\*" :hide t)
				      ("\*Warnings\*" :hide t)
				      ("\*straight-process\*" :hide t)
				      ("\*Messages\*" :hide t)
				      ("Tasks.org" :hide t)))

;; Font and style adjustments
(centaur-tabs-change-fonts (face-attribute 'default :font) 110)
(centaur-tabs-headline-match)

;; Buffer naming behavior
(setq uniquify-separator "/"
      uniquify-buffer-name-style 'forward)

;; Custom buffer grouping
(defun my/centaur-tabs-buffer-groups ()
  "Define custom buffer groups for Centaur Tabs."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
	 (memq major-mode '(magit-process-mode
			    magit-status-mode
			    magit-diff-mode
			    magit-log-mode
			    magit-file-mode
			    magit-blob-mode
			    magit-blame-mode)))
     "Emacs")
    ((derived-mode-p 'prog-mode)
     "Editing")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(helpful-mode
			help-mode))
     "Help")
    ((memq major-mode '(org-mode
			org-agenda-clockreport-mode
			org-src-mode
			org-agenda-mode
			org-beamer-mode
			org-indent-mode
			org-bullets-mode
			org-cdlatex-mode
			org-agenda-log-mode
			diary-mode))
     "OrgMode")
    ;; ((member (buffer-name) '("*scratch*" "*Messages*" "*dashboard*" "*eww*")) "All")
    ((string-equal "newsrc-dribble" (buffer-name)) "Others")
    ((derived-mode-p 'gnus-mode) "All")
    ((eq major-mode 'message-mode) "All")
    ((string-match "org.*sidebar" (buffer-name)) "Others")
    ((string-match "<tree>" (buffer-name)) "Others")
    ((string-match "^TAGS.*" (buffer-name)) "Others")
    ((eq major-mode 'dired-mode) "Dired")
    (t "All"))))
(setq centaur-tabs-buffer-groups-function #'my/centaur-tabs-buffer-groups)

;; Enable centaur-tabs-mode
(centaur-tabs-mode t)

;; Keybindings
:bind
("C-<prior>" . centaur-tabs-backward)
("C-<next>" . centaur-tabs-forward)
("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
("C-S-<next>" . centaur-tabs-move-current-tab-to-right)
(:map evil-normal-state-map
      ("g t" . centaur-tabs-forward)
      ("g T" . centaur-tabs-backward))

;; Hooks
:hook
(dashboard-mode . centaur-tabs-local-mode)
(term-mode . centaur-tabs-local-mode)
(calendar-mode . centaur-tabs-local-mode)
(org-agenda-mode . centaur-tabs-local-mode))

;; Custom tab switching function
(defun my/switch-tabs (&optional direction cycle-group)
  "Change tabs in the given direction (left or right). Cycle within the same group unless cycle-group is non-nil."
  (interactive)
  (let* ((keys (mapcar #'event-basic-type (this-command-keys-vector)))
	 (direction (or direction (if (or (member 'left keys) (member 'home keys)) 'left 'right)))
	 (centaur-tabs-cycle-scope (if cycle-group 'groups (if (> (length keys) 1) 'groups 'tabs))))
    (if (eq window-system 'mac)
	(mac-start-animation (selected-window) :type 'swipe :direction direction))
    (centaur-tabs-cycle (eq direction 'left))))

;; Keybindings for tab switching
(keymap-global-set "C-M-<right>" #'my/switch-tabs)
(keymap-global-set "C-M-<left>" #'my/switch-tabs)


(provide 'packages/centaur-tabs)
;; packages/centaur-tabs.el ends here
#+END_SRC

-----

* GENERAL KEYBINDINGS
List of all the keybinds that are used in my Emacs Config.

#+BEGIN_SRC emacs-lisp :tangle lisp/keybindings.el
;;; keybindings.el --- Keybindings for Emacs Config -*- lexical-binding: t; -*-

(use-package evil-nerd-commenter
  :ensure t
  :defer t)

(use-package general
  :ensure t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer karna/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (karna/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "," '(scratch-buffer :wk "Scratch buffer")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "/" '(evilnc-comment-or-uncomment-lines :wk "Toggle Comments")
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument")
    "<left>" '(evil-window-left :wk "Window left")
    "<right>" '(evil-window-right :wk "Window right")
    "<up>" '(evil-window-up :wk "Window up")
    "<down>" '(evil-window-down :wk "Window down"))

   (karna/leader-keys
    "a" '(:ignore t :wk "A.I.")
    "a a" '(ellama-ask-about :wk "Ask ellama about region")
    "a c" '(:prefix "c" :wk "Code")
    "a c a" '(ellama-code-add :wk "Ellama code add")
    "a c c" '(ellama-code-complete :wk "Ellama code complete")
    "a c e" '(ellama-code-edit :wk "Ellama code edit")
    "a c i" '(ellama-code-improve :wk "Ellama code improve")
    "a c r" '(ellama-code-review :wk "Ellama code review")
    "a e" '(:ignore t :wk "Ellama enhance")
    "a e g" '(ellama-improve-grammar :wk "Ellama enhance wording")
    "a e w" '(ellama-improve-wording :wk "Ellama enhance grammar")
    "a i" '(ellama-chat :wk "Ask ellama")
    "a p" '(ellama-provider-select :wk "Ellama provider select")
    "a s" '(ellama-summarize :wk "Ellama summarize region")
    "a t" '(ellama-translate :wk "Ellama translate region"))

  (karna/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b I" '(consult-buffer :wk "Preview buffers")
    "b i" '(persp-switch-to-buffer* :wk "Persp Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  ;; (karna/leader-keys
  ;;   "c" '(:ignore t :wk "Centaur Tabs")
  ;;   "c n" '(centaur-tabs-forward-tab :wk "Next Tab")
  ;;   "c p" '(centaur-tabs-backward-tab :wk "Previous Tab")
  ;;   "c c" '(centaur-tabs-close-tab :wk "Close Tab")
  ;;   "c r" '(centaur-tabs-rename-tab :wk "Rename Tab")
  ;;   "c l" '(centaur-tabs-list-tabs :wk "List Tabs")
  ;;   "c m" '(centaur-tabs-move-current-tab-to-left :wk "Move Tab Left")
  ;;   "c <left>" '(karna/scroll-year-calendar-backward :wk "Scroll year calendar backward")
  ;;   "c <right>" '(karna/scroll-year-calendar-forward :wk "Scroll year calendar forward")
  ;;   "c y" '(karna/year-calendar :wk "Show year calendar")
  ;;   "c t" '(centaur-tabs-move-current-tab-to-right :wk "Move Tab Right"))


  (karna/leader-keys
    "c"  '(:ignore t :wk "Consult")
    ;; Buffer-related commands
    "c b" '(consult-buffer         :wk "Switch Buffer")

    ;; File-related commands
    "c d" '(:prefix "d"             :wk "Consult Directory")
    "c d f" '(consult-dir           :wk "Find Directory")
    "c d j" '(consult-dir-jump-file :wk "Jump to a directory")
    "c f" '(consult-fd           :wk "Find File")
    "c r" '(consult-recent-file    :wk "Recent Files")

    ;; Search commands
    "c l" '(consult-line           :wk "Search Lines")
    "c g" '(consult-grep           :wk "Grep Search")
    "c p" '(consult-ripgrep        :wk "Ripgrep Search")

    ;; Navigation commands
    "c i" '(consult-imenu          :wk "Imenu")
    "c o" '(consult-outline        :wk "Outline")

    ;; Other commands
    "c m" '(consult-man            :wk "Man Pages")
    "c k" '(consult-bookmark       :wk "Bookmarks")
    "c y" '(karna/year-calendar    :wk "Show year calendar"))

    (karna/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d f" '(wdired-finish-edit :wk "Writable dired finish edit")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(treemacs-find-file :wk "Open file in Treemacs")
    ;; "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired")
    "d w" '(wdired-change-to-wdired-mode :wk "Writable dired")

    ;; New prefix for favorite directories
    "d o" '(:ignore t :wk "Favorite Directories")
    "d o p" `((lambda () (interactive) (let ((default-directory "/mnt/Karna/Git/portfolio/")) (execute-extended-command nil "find-file"))) :wk "Open Portfolio")
    "d o P" `((lambda () (interactive) (let ((default-directory "/mnt/Karna/Git/Project-K/")) (execute-extended-command nil "find-file"))) :wk "Open Project-K")
    "d o h" `((lambda () (interactive) (let ((default-directory "~/")) (execute-extended-command nil "find-file"))) :wk "Open Home")
    )

  (karna/leader-keys
    "e" '(:ignore t :wk "Ediff/Eshell/Eval/EWW")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e f" '(ediff-files :wk "Run ediff on a pair of files")
    "e F" '(ediff-files3 :wk "Run ediff on three files")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e n" '(eshell-new :wk "Create new eshell buffer")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (karna/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
	      (find-file "~/.emacs.d/config.org"))
	    :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
	      (dired "~/.emacs.d/"))
	    :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f m" '(ian/format-code :wk "Format Buffer")
    "f g" '(consult-ripgrep :wk "Search for string current file")
    "f i" '((lambda () (interactive)
	      (find-file "~/dotfiles/install.sh"))
	    :wk "Open dotfiles install.sh")
    "f j" '(consult-dir-jump-file :wk "Jump to a file below current directory")
    "f l" '(consult-locate :wk "Locate a file")
    "f r" '(consult-recent-file :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (karna/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

 (karna/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		(ignore (elpaca-process-queues)))
		 ;; (karna/org-colors-doom-one) ;; Reapply colors after reloading
	    :wk "Reload emacs config"r)
    "h t" '(consult-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (karna/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (karna/leader-keys
    "i" '(:ignore t :wk "Custom")
    "i a" '(karna/insert-auto-tangle-tag :wk "Insert auto-tangle tag"))

  (karna/leader-keys
    "q" '(:ignore t :wk "Quit")
    "q q" '(evil-quit :wk " Quit Emacs"))

  (karna/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (karna/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (karna/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o p" '(open-python-right-side :wk "Open Python REPL")
    "o o" '(open-octave-right-side :wk "Open Octave REPL")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  ;; projectile-command-map already has a ton of bindings
  ;; set for us, so no need to specify each individually.
  (karna/leader-keys
    "p" '(projectile-command-map :wk "Projectile")
    "P a" '(projectile-add-known-project :wk "Add root to known projects"))

  (karna/leader-keys
    "P" '(:ignore t :wk "Custom Previews")
    "P m" '(markdown-preview-mode :wk "Preview Markdown Document"))

  (karna/leader-keys
    "r" '(:ignore t :wk "Org-roam")
    "r c" '(completion-at-point :wk "Completion at point")
    "r f" '(org-roam-node-find :wk "Find node")
    "r g" '(org-roam-graph :wk "Show graph")
    "r t" '(org-roam-dailies-goto-today :wk "Show today note")
    "r i" '(org-roam-node-insert :wk "Insert node")
    "r n" '(org-roam-capture :wk "Capture to node")
    "r d" '(:prefix "d" :wk "Dailies")
    "r d c" '(:prefix "c" :wk "Capture")
    "r d c c" '(org-roam-dailies-capture-today :wk "Capture Today")
    "r d c y" '(org-roam-dailies-capture-yesterday :wk "Capture Yesterday")
    "r d c t" '(org-roam-dailies-capture-tomorrow :wk "Capture Tomorrow")
    "r d c d" '(org-roam-dailies-capture-date :wk "Capture Specific Date")
    "r d g" '(:prefix "g" :wk "Go to")
    "r d g g" '(org-roam-dailies-goto-today :wk "Go to Today")
    "r d g y" '(org-roam-dailies-goto-yesterday :wk "Go to Yesterday")
    "r d g t" '(org-roam-dailies-goto-tomorrow :wk "Go to Tomorrow")
    "r d g d" '(org-roam-dailies-goto-date :wk "Go to Specific Date")
    "r d g n" '(org-roam-dailies-goto-next-note :wk "Go to Next Date")
    "r d g d" '(org-roam-dailies-goto-previous-note :wk "Go to Previous Date")
    "r s" '(org-id-get-create :wk "Create Small node inside buffer")
    "r a" '(org-roam-alias-add :wk "Create alias for a roam")
    "r r" '(org-roam-buffer-toggle :wk "Toggle roam buffer"))


  (karna/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s s" '(occur :wk "Search buffer")
    "s p" '(pdf-occur :wk "Pdf search lines matching STRING")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s r" '(query-replace :wk "Search and replace")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (karna/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t c" '(company-mode :wk "Toggle Company Mode")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t h" '(my/toggle-ef-theme :wk "Toggle ef-themes")
    "t n" '(treemacs :wk "Toggle Treemacs")
    ;;"t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(tabnine-mode :wk "Toggle Tabnine mode")
    "t T" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (karna/leader-keys
    "w" '(:ignore t :wk "Windows/Words")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    "w <left>" '(evil-window-left :wk "Window left")
    "w <down>" '(evil-window-down :wk "Window down")
    "w <up>" '(evil-window-up :wk "Window up")
    "w <right>" '(evil-window-right :wk "Window right")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right")
    ;; Words
    "w d" '(downcase-word :wk "Downcase word")
    "w u" '(upcase-word :wk "Upcase word")
    "w =" '(count-words :wk "Count words/lines for buffer"))

  (karna/leader-keys
    "y" '(:ignore t :wk "YASnippet")
    "y i" '(consult-yasnippet :wk "Insert Consult yasnippet")
    "y I" '(yas-insert-snippet :wk "Insert snippet")
    "y n" '(yas-new-snippet :wk "New snippet")
    "y v" '(yas-visit-snippet-file :wk "Edit snippet")
    "y r" '(yas-reload-all :wk "Reload snippets")
    "y t" '(yas-describe-tables :wk "Show available snippets"))

)

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") nil)
(global-set-key (kbd "<C-wheel-down>") nil)
(global-set-key (kbd "C-a") 'mark-whole-buffer) ;; Selects whole buffer to copy/delete

;; Binds `C-s` to compile and view the latex preview document.
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-s") #'TeX-command-run-all)))

;; Keybinding to manually insert snippets
(global-set-key (kbd "C-c y") #'consult-yasnippet)

(provide 'keybindings)
;; keybindings.el ends here
#+END_SRC

-----

* LOAD CONFIG FILES
Loading all the config files from my emacs lisp folder.

#+BEGIN_SRC emacs-lisp
;;; $EMACSDIR/config.el --- Emacs Setup -*- lexical-binding: t; -*-

(add-to-list 'load-path "~/.emacs.d/lisp/")

(require 'elpaca)  ;; The Elpaca Package Manager
(require 'buffer-move) ;; Buffer Moving Custom Functions
(require 'hooks-dirs) ;; Hooks and Directories
(require 'core-config) ;; Core Configurations
(require 'editor) ;; Editor Settings
(require 'packages/evil) ;; Evil Mode
(require 'ui-config) ;; UI Settings for Emacs
(require 'keybindings) ;; General Custom Keybindings
(require 'git) ;; Git
(require 'calcc) ;; Calc
(require 'file-manager) ;; File Manager
(require 'packages/wakatime) ;; Wakatime
(require 'packages/dashboard) ;; Dashboard
(require 'packages/doom-modeline) ;; Doom Modeline
(require 'packages/projectile) ;; Projectile
(require 'packages/perspective) ;; Perspective
(require 'packages/minibuffer) ;; Minibuffer
(require 'packages/consult) ;; Consult
(require 'packages/corfu) ;; Corfu
(require 'packages/cape) ;; Cape
(require 'packages/orderless) ;; Orderless
(require 'org-config) ;; Org Config
(require 'org-agenda-config) ;; Org Agenda
(require 'org-roam-config) ;; Org Roam
(require 'packages/tabnine) ;; TabNine
(require 'packages/yasnippet) ;; Yasnippet
(require 'packages/gptel) ;; GPTel
(require 'treesitter) ;; Treesitter
(require 'dev) ;; Development Stuff
(require 'packages/conda) ;; Conda
(require 'packages/pyenv) ;; PyEnv
(require 'packages/latex) ;; Latex
(require 'packages/org-latex) ;; Org Latex
(require 'packages/markdown) ;; Markdown
(require 'eshell-prompt) ;; Custom ESHELL Prompt
(require 'shells) ;; Shells
(require 'packages/calendar) ;; Calendar
(require 'consult-yasnippet) ;; Consult Yasnippet

(provide 'config)
;;; config.el ends here
#+END_SRC
